Category|Type|Id|Text|Implementation|Verification
DP|S|1|The PUS Extension of the CORDET Framework shall provide a Data Pool component implementing the behaviour of the Data Pool State Machine of figure \ref{fig:CrPsDataPool} in [PX-SP].|Component is generated by FW Profile Editor in module \texttt{CrPsDataPool}|The configuraton code for the Data Pool component is generated by the FW Profile editor (see section \ref{sec:svrFwProfEd} for a discussion of its verification). No behaviour is associated by default to the actions and guards in the Data Pool component.
DP|A|2|The Data Pool Component shall support the adaptation points specified in table \ref{tab:AP-DP}|Stub implementations provided in \texttt{CrPsDataPoolFunc.c}|
DP|S|3|In state READY, the Data Pool component shall provide operations to let other components access the current value of its data items |Accessor functions are generated by CORDET Editor in modules in directory \texttt{src/DataPool}|The data pool accessor functions are generated by the CORDET Editor (see section \ref{sec:svrAutoCode} for a discussion of its verification). Table \ref{tab:VerDataPool}  lists the data pool items which are directly verified by the test cases.
DP|C|5|An application shall instantiate the Data Pool Component only once||
DP|C|6|An application shall only access the data items in the data pool when it is in state READY||
CRA|S|1|Components encapsulating a command or a report shall implement all attributes defined for them by the PUS|For each service \texttt{srv} which it supports, the PUS Extension provides a header file \texttt{ /Pckt/CrPsPcktSrv.h} which defines the layout of the commands and reports in that service and the functions to access their parameters. |The layout of the commands and reports is defined in the CORDET Editor and is described in [PX-IC]. Verification of consistency to the PUS is done by review of this document.
CRA|S|2|Components encapsulating a command or a report shall provide operations to access in read and write mode all their PUS-defined attributes|Parameter are accessed by first extracting the packet encapsulating a command or report and by then using the functions described at the previous requirement|The parameter accessor functions are generated by the CORDET Editor (see section \ref{sec:svrAutoCode} for a discussion of its verification). They are implicitly verified as part of the test cases which verify the PUS commands and reports.
CRA|S|3|The PUS Extension of the CORDET Framework shall provide operations to encode and decode any PUS-defined attribute in a packet carrying a command or report|See previous requirement|See previous requirement
CRA|C|4|If an application sends commands or reports to the same destination with different APIDs, then for each such APID, a CORDET Group shall be defined||
CRA|C|5|If an application receives commands or reports from the same source  with different APIDs, then for each such APID, a CORDET group shall be defined||
FAC|S|1|The PUS Extension of the CORDET Framework shall provide an InFactory component capable of creating an instance of any of the command or report types defined by the framework|The implementation provided by the CORDET Framework in module \texttt{CrFwInFactory} is used unchanged. The packet allocation policy must be provided by applications by implementing interface \texttt{CrFwPckt.h}|The test cases create at least one instance of each command supported by the PUS Extension (see section \ref{sec:svrVerCmdReps}). The commands are created by the InFactory.
FAC|S|2|The PUS Extension of the CORDET Framework shall provide an OutFactory component capable of creating an instance of any of the command or report types defined by the framework|The implementation provided by the CORDET Framework in module \texttt{CrFwOutFactory} is used unchanged. The packet allocation policy must be provided by applications by implementing interface \texttt{CrFwPckt.h}|The test cases create at least one instance of each report supported by the PUS Extension (see section \ref{sec:svrVerCmdReps}). The commands are created by the OutFactory.
FAC|S|3|The two factory components shall maintain and make accessible through the data pool the observables listed in table \ref{tab:Obs-FAC} in [PX-SP]|Observables are implemented in generated module \texttt{CrPsDpFct}|Extent of verification of observables is shown in section \ref{sec:svrVerDataPool}
PCR|A|1|The InCommand components provided by the PUS Extension of the CORDET Framework shall close the InCommand adaptation points as stated in table \ref{tab:AP-OCM} in [PX-SP]|See implementation of adaptation points|
PCR|A|2|The OutComponent components provided by the PUS Extension of the CORDET Framework shall close the OutComponent adaptation points as stated in table \ref{tab:AP-ICM} in [PX-SP]|See implementation of adaptation points|
PCR|C|3|Applications shall comply with the service dependencies listed in table \ref{tab:dependencies}||
S1|S|1|The PUS Extension of the CORDET Framework shall provide OutComponents implementing the service 1 reports listed in tables \ref{tab:OutCmpVerSuccAccRepSpec} to \ref{tab:OutCmpVerFailedRoutingRepSpec} in [PX-SP]|Report Xyz is implemented in module CrPsOutCmpXyz. The header file of this module and a skeleton body file is generated by the CORDET Editor.|All service 1 reports are verified by test (see section \ref{sec:svrVerCmdReps})
S1|A|2|The service 1 implementation of the PUS Extension of the CORDET Framework shall close or override the InLoader and InCommand adaptation points listed in table \ref{tab:AP-S1} in [PX-SP]|See implementation of adaptation points|
S1|S|3|The PUS Extension of the CORDET Framework shall maintain and make accessible through the data pool the observables listed in table \ref{tab:Obs-S1} in [PX-SP]|The service 1 observables are implemented in module \texttt{CrPsDpVer}. This module is generated by the CORDET Editor.|Extent of verification of observables is shown in section \ref{sec:svrVerDataPool}
S1|C|4|If an application performs a verification check for a command and the check fails, it shall update the Verification Failure Data in the data pool with either zero or with a command-specific failure data item||
S1|C|5|Applications shall be responsible for configuring the OutRegistry component to selectively disable failure verification reports which they do not need||
S3|S|1|The PUS Extension of the CORDET Framework shall implement a Report Definition List (RDL) consisting of HK\_N\_REP\_DEF Report Definitions with the fields defined in table \ref{tab:repDefDataStruct} in [PX-SP]|See the data structures defined in \texttt{CrPsDpHk}|The service 3 commands access the RDL. The RDL is therefore verified in the test cases which exercise the service 3 commands (see section \ref{sec:svrVerCmdReps}). Dedicated tests are done in test case \texttt{CrPsHkTestCase1}.
S3|S|2|The PUS Extension of the CORDET Framework shall implement HK\_N\_SAMPLE\_BUF Sampling Buffers capable of holding the values of the super-commutated data items for a given housekeeping/diagnostic report|This requirement is not implemented|This requirement is not implemented
S3|C|3|Application shall be responsible for loading a sampling buffer with the values of super-commutated data items||
S3|S|4|The PUS Extension of the CORDET Framework shall provide OutComponents and InCommands implementing the reports and commands defined in tables \ref{tab:InCmdHkCreHkCmdSpec} to \ref{tab:InCmdHkModPerDiagCmdSpec} in [PX-SP]|Report Xyz is implemented in module CrPsOutCmpXyz. Command Xyz is implemented in module CrPsInCmdXyz. The header files of these modules and skeleton body files are generated by the CORDET Editor.|All service 3 commands and reports are verified by test (see section \ref{sec:svrVerCmdReps})
S3|S|5|The PUS Extension of the CORDET Framework shall maintain and make accessible through the data pool the observables and parameters listed in table \ref{tab:Obs-S3} in [PX-SP]|See the data structures defined in module \texttt{CrPsDpHk}|Extent of verification of observables is shown in section \ref{sec:svrVerDataPool}
S3|C|6|Applications shall be responsible for executing with period HK\_COLLECT\_PER the OutManagers where housekeeping/diagnostic reports are loaded||
S5|S|1|The PUS Extension of the CORDET Framework shall maintain and make accessible through the data pool the observables listed in table \ref{tab:Obs-S5} in [PX-SP]|See the data structures defined in module \texttt{CrPsDpEvt}|Extent of verification of observables is shown in section \ref{sec:svrVerDataPool}
S5|C|2|Applications shall be responsible for configuring the EvtRep component with the event parameters at the point where the EvtRep component is created||
S5|C|3|As part of their initialization, applications shall be responsible for configuring the OutRegistry component to selectively disable event reports whose default enable status is: 'disabled'||
S5|S|4|For each event report it pre-defines, the PUS Extension of the CORDET Framework shall provide a Generate Pre-Defined Event Function which takes as parameters the event type, subtype, discriminant and the event parameters|See functions in \texttt{CrPsEvtGenPreDefEvt} module|See test cases \texttt{CrPsEvtTestCase3} and \texttt{CrPsEvtTestCase9}
S5|S|5|The Generate Pre-Defined Event Function shall: retrieve an OutComponent to encapsulate the event report from the OutFactory, configure it with its parameters and load it in the OutLoader|See functions in \texttt{CrPsEvtGenPreDefEvt} module|See test cases \texttt{CrPsEvtTestCase3} and \texttt{CrPsEvtTestCase9}
S5|S|6|If the OutComponent retrieval from the OutFactory fails, the Generate Pre-Defined Event Function shall generate an error report of type OUTFACTORY\_FAIL|See functions in \text{CrPsEvtGenPreDefEvt} module|See test cases \texttt{CrPsEvtTestCase9}
S5|S|7|The PUS Extension of the CORDET Framework shall support the commands and reports specified in tables \ref{tab:OutCmpEvtRepaSpec} to \ref{tab:OutCmpEvtDisRepSpec} in [PX-SP]|Report Xyz is implemented in module CrPsOutCmpXyz. Command Xyz is implemented in module CrPsInCmdXyz. The header files of these modules and skeleton body files are generated by the CORDET Editor.|All service 5 commands and reports are verified by test (see section \ref{sec:svrVerCmdReps})
S5|S|8|The PUS Extension of the CORDET Framework shall maintain and make accessible through the data pool the observables and parameters listed in table \ref{tab:Obs-S5} in [PX-SP]|See the data structures defined in \texttt{CrPsDpEvt}|Extent of verification of observables is shown in section \ref{sec:svrVerDataPool}
S11|S|1|The PUS Extension of the CORDET Framework shall implement a Time-Based Schedule (TBS) consisting of SCD\_N\_TBA Time-Based Activities (TBAs) with the attributes defined in table \ref{tab:tbaAtt} in [PX-SP]|This service is not yet implemented|
S11|S|2|The PUS Extension of the CORDET Framework shall provide a Time-Based Execution Procedure implementing the behaviour shown in figure \ref{fig:TbsExec} in [PX-SP]|This service is not yet implemented|
S11|C|3|Applications shall be responsible for periodically executing the Time-Based Execution Procedure of figure \ref{fig:TbsExec}||
S11|C|4|Applications which do not need sub-schedules shall: (a) set SCD\_N\_SUB\_TBS to 1 and (b) enable the first sub-schedule as part of their initialization||
S11|C|5|Applications which do not need groups shall, as part of their initialization, (a) set SCD\_N\_GROUP to 1, and (b) set the InUse and Enabled flag of the first group to true||
S11|S|6|The PUS Extension of the CORDET Framework shall support the commands and reports specified in tables \ref{tab:InCmdScdEnbTbsCmdSpec} to \ref{tab:OutCmpScdGrpRepSpec}|This service is not yet implemented|
S11|C|7|Service 11 shall be configured such that a single (11,27) report can hold the status of SCD\_N\_GROUPS groups||
S12|S|1|The PUS Extension of the CORDET Framework shall provide a Monitoring Function Procedure implementing the behaviour shown in figure \ref{fig:MonFncPr}|This service is not yet implemented|
S12|S|2|The PUS Extension of the CORDET Framework shall implement a Parameter Monitor Definition List (PMDL) consisting of MON\_N\_PMON Parameter Monitor Definitions with the fields defined in table \ref{tab:pmonAtt}|This service is not yet implemented|
S12|S|3|The PUS Extension of the CORDET Framework shall implement a Check Transition List (CTL) consisting of MON\_N\_CLST Check Transitions with the fields defined in table \ref{tab:chkTransAttr}|This service is not yet implemented|
S12|S|4|The PUS Extension of the CORDET Framework shall provide the Limit Check Monitoring Procedure implementing the behaviour shown in figure \ref{fig:MonLimCheckPr}|This service is not yet implemented|
S12|S|5|The PUS Extension of the CORDET Framework shall provide the Expected Value Monitoring Procedure implementing the behaviour shown in figure \ref{fig:MonExpValPr}|This service is not yet implemented|
S12|S|6|The PUS Extension of the CORDET Framework shall provide the Delta Value Monitoring Procedure implementing the behaviour shown in figure \ref{fig:MonDeltaValPr}|This service is not yet implemented|
S12|S|7|The PUS Extension of the CORDET Framework shall provide the Process CTL Procedure implementing the behaviour shown in figure \ref{fig:ProcCTL}|This service is not yet implemented|
S12|S|8|The PUS Extension of the CORDET Framework shall provide the Functional Monitor Notification Procedure implementing the behaviour shown in figure \ref{fig:FuncMonNotif} |This service is not yet implemented|
S12|C|9|Applications shall be responsible for initializing the data pool items \texttt{nmbAvailParMon} and \texttt{nmbEnbParMon} giving the number of available and enabled parameter monitors in the PMDL||
S12|C|10|As part of their initialization, applications shall be responsible for configuring and starting the monitor procedures associated to the pre-defined parameter monitors ||
S12|C|11|Applications shall be responsible for initializing the data pool items \texttt{nmbAvailFuncMon} and \texttt{nmbEnbFuncMon} giving the number of available and enabled functional monitors in the FMDL||
S12|C|12|During their initialization, applications shall start the Monitoring Function Procedure||
S12|C|13|During normal operation, applications shall cyclically execute the Monitoring Function Procedure with a period of MON\_PER||
S12|S|14|The PUS Extension of the CORDET Framework shall support the commands and reports specified in tables \ref{tab:InCmdMonEnbParMonDefCmdSpec} to \ref{tab:OutCmpMonRepFuncMonStatRepSpec}|This service is not yet implemented|
S13|S|1|The PUS Extension of the CORDET Framework shall support the commands and reports specified in tables \ref{tab:OutCmpLptDownFirstRepSpec} to \ref{tab:InCmdLptAbortDownCmdSpec}|This service is not yet implemented|
S13|S|2|The PUS Extension of the CORDET Framework shall maintain and make accessible through the data pool the observables and parameters listed in table \ref{tab:Obs-S13} in [PX-SP]|This service is not yet implemented|
S13|C|3|The part size or destination of a large packet transfer shall not be updated while a transfer is under way||
S13|C|4|The initiator of a down-transfer shall ensure that, prior to starting a down-transfer, all data are available in the LPT Buffer and \texttt{lptSize} is initialized to the amount of data to be down-transferred||
S13|C|5|The user shall not start an up-transfer to an LPT Buffer which is being processed by the application||
S17|S|1|The PUS Extension of the CORDET Framework shall support the commands and reports specified in tables\ref{tab:InCmdTstAreYouAliveCmdSpec} to \ref{tab:OutCmpTstConnectRepSpec} in [PX-SP]|Report Xyz is implemented in module CrPsOutCmpXyz. Command Xyz is implemented in module CrPsInCmdXyz. The header files of these modules and skeleton body files are generated by the CORDET Editor.|All service 17 commands and reports are verified by test (see section \ref{sec:svrVerCmdReps})
S17|C|2|An application shall not be sent a (17,3) command before execution of the previous (17,3) command has completed||
S17|S|3|The PUS Extension of the CORDET Framework shall maintain and make accessible through the data pool the observables and parameters listed in table \ref{tab:Obs-S17} in [PX-SP]|See the data structures defined in \texttt{CrPsDpTst}|Extent of verification of observables is shown in section \ref{sec:svrVerDataPool}
