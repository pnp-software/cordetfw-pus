__author__ = 'pnp'

#===============================================================================
# This program processes the verify.html file generated by doxygen.
# This file contains the list of @verify tags which associate the verified 
# items to the test cases which verify them.
# The program generates a csv file tracing the verified items to the test cases
# which verify them.  
#
# This script should be run from the vr directory with the following command:
# >python3 ReqToImplementation.py
#===============================================================================

from html.parser import HTMLParser
import csv
import operator

# Doxygen file holding the @implement tags
ImplTagFile = '../html/verify.html'

# Output file holding the @implement tags
OutFile = 'ListOfVerifyItems.csv'

#-------------------------------------------------------------------------------
class MyHTMLParser(HTMLParser):
    foundEl = False
    foundDd = False
    foundP = False
    testCaseName = ""
    listOfVerItem = []
    
    #---------------------------------------------------------------------------
    def openOutFile(self, OutFile):
        self.outFileFd = open(OutFile,'w')
        self.outFileFd.write('TestCaseName|Kind|Name|Desc\n')
    
    #---------------------------------------------------------------------------
    def closeOutFile(self):
        self.outFileFd.close()

    #---------------------------------------------------------------------------
    def flushListOfVerItems(self):
        self.listOfVerItem.sort(key=operator.itemgetter('Name'))
        prevItem = {}
        prevItem["Name"] = ""
        for item in self.listOfVerItem:
            if (item["Name"] != prevItem["Name"]):
                self.outFileFd.write(item["TestCaseName"]+'|'+item["Kind"]+'|'+ \
                    item["Name"]+'|'+item["Desc"]+'\n')
            else:
                self.outFileFd.write(item["TestCaseName"]+'|'+item["Kind"]+'|'+ \
                    ""+'|'+item["Desc"]+'\n')
            prevItem = item

    #---------------------------------------------------------------------------
    # Return a description of the requirement item
    # If the requirement item is a state machine or a procedure, then its 
    # description is "State Machine" or "Procedure".
    # If it is an interface item, then its description is taken from
    # UserInteface.csv.
    def get_desc(self, splitData):
        if ("State Machine" in splitData[0]):
            return "State Machine"
        if ("Procedure" in splitData[0]):
            return "Procedure"
            
        with open(UIFile) as csv_file:
            reader = csv.DictReader(csv_file, delimiter='|')
            for row in reader:
                if (row['Name'].strip() == splitData[1].strip()):
                    return row['Description']
            
        return "No Description Found"
 
    #---------------------------------------------------------------------------
    # Handle the tag holding the element associated to the @verify tag.
    # Three tags are handled:
    # - "a" with a class attribute equal to "el": holds the name of the
    #   test case
    # - "dd": holds the content of one or more @verify tags
    # - "p": holds the content of one @verify tag
    def handle_starttag(self, tag, attrs):
        if (tag == "a"):
            for attr in attrs:
                if ((attr[0] == "class") and (attr[1] == "el")):
                    self.foundEl = True
        if (tag == "dd"):
            self.foundDd = True
        if ((tag == "p") and (self.foundDd == True)):
            self.foundP = True

    #---------------------------------------------------------------------------
    # Handle the close-out of the tag holding one or more @verify tags
    def handle_endtag(self, tag):
        if (tag == "dd"):
            self.foundDd = False

    #---------------------------------------------------------------------------
    # Collect the data associated to the html tags of interest and write them
    # to the output file.
    # - testCaseName: holds the name of the test case
    # - splitData: holds the content of the doxygen @implement tag split by 
    #              commands (this is the requirement-level item)
    # - descData: holds the description of the requirement-level item
    def handle_data(self, data):
        if (self.foundEl == True):
            self.testCaseName = data
            self.foundEl = False
        if (self.foundP == True):
            splitData = data.split(",")
            verItem = {}
            verItem["TestCaseName"] = self.testCaseName
            if (len(splitData) == 3):
                verItem["Kind"] = splitData[0].strip()
                verItem["Name"] = splitData[1].strip()
                verItem["Desc"] = splitData[2].strip()
            elif (len(splitData) == 2):     
                verItem["Kind"] = splitData[0].strip()
                verItem["Name"] = splitData[1].strip()
                verItem["Desc"] = ""
            else:
                verItem["Kind"] = ""
                verItem["Name"] = ""
                verItem["Desc"] = ""
                print("Incorrect syntax of verify tag: "+data)
            
            self.listOfVerItem.append(verItem)                   
            self.foundP = False

#-------------------------------------------------------------------------------
parser = MyHTMLParser()

ImplTagFileFd = open(ImplTagFile,"r");
parser.openOutFile(OutFile);

for line in ImplTagFileFd:
    parser.feed(line)

parser.flushListOfVerItems()
    
parser.closeOutFile()


