/** @defgroup psExt PUS Extension of the CORDET Framework
 * @brief  Implementation of Packet Utilization Standard (PUS) services.
 *
 * The CORDET Framework is built around the <i>CORDET Service Concept</i>.
 * A service consists of a set of logically related commands and reports.
 * The service concept defines the life-cycle of a generic command and of
 * generic report.
 * This life-cycle is independent of the specific content and actions of 
 * a command or report.
 * The CORDET Framework provides components which enforce this life-cycle but
 * it does not support any specific command or report.
 *
 * The service concept of the CORDET Framework is the same as the service concept
 * of the Packet Utilization Standard (PUS).
 * The PUS Extension of the CORDET Framework provides components which implement
 * the commands and reports of the most commonly used services in the PUS.
 */

 /** @defgroup PUSTestsuite PUS Test Suite  
 * @ingroup psExt
 *
 * Test Suite for the for the PUS Extension of the CORDET Framework.
 * The test suite consists of a set of test cases.
 * Each test case is implemented in a module with a name like <code>CrPsXyzTestCase</code>
 * with 'Xyz' being the name of the function verified by the test case.
 * The main program for the test suite is in CrPsTestSuite.c.
 * 
 * This module includes both the test cases and the stubs which are used to run them.
 */

/** @defgroup gen_dp Data Pool Component 
 * @ingroup psExt
 * 
 * @brief Implementation of the data pool component.
 * 
 * The Data Pool Component is a pre-defined component offered by the PUS Extension of the
 * CORDET Framework. 
 * It is used by all services supported by the framework extension and
 * it is therefore defined independently of these services.
 *
 * The Data Pool Component provides read-write access to a set of Data Items.
 * A Data Item is characterized by the following attributes:
 * - Default Value: the value of the data item when the data pool is reset
 * - Current Value: the value of the data item at a particular point in time
 * - Identifier: a positive integer which uniquely identifies the Data Item within the Data Pool.
 * - Type: an enumerated value which determines the range of possible values of the Data
 *   Item and its representation in the Data Pool
 * .
 * The data items can be of two kinds:
 * - Parameters: data items whose value is under the control of an entity external to the host application
 * - Variables: data items whose value is autonomously updated by the host application as part of its normal operation
 * .
 * The files in this module implement the data pool component. They have been generated by the 
 * <a href="https://www.pnp-software.com/cordetfw/editor/">CORDET Editor</a>.
 *
 * @limitation The refresh operation of the Data Pool State Machine does not implement
 * the loading of the debug variables
 */

/** @defgroup gen_cfw Implementation of Commands and Reports 
 * @ingroup psExt
 * 
 * @brief Implementation of PUS Extension commmands and reports.
 * 
 * The CORDET Framework defines the components which implement generic commands
 * and reports.
 * They can be seen as abstract components which must be specialized to implement 
 * concrete commands or concrete reports.
 * The PUS Extension defines the commands and reports which implement the most
 * commonly used PUS services. 
 * This module includes:
 * - The modules which implement these commands and reports
 * - The header files which configure these commands and reports
 * .
 * The files in this module have been generated by the 
 * <a href="https://www.pnp-software.com/cordetfw/editor/">CORDET Editor</a>.
 */

 /** @defgroup gen_pck Packet Access Functions 
 * @ingroup psExt
 *
 * Implementation of Functions to Access Parameters in Commands and Reports
 * 
 * The components implementing commands and reports are serialized to <i>packets</i>.
 * The items in a packet are called <i>parameters</i>.
 * This module defines the functions to access the parameters in the packets
 * of the PUS Extension of the CORDET Framework.
 * 
 * The files in this module have been generated by the 
 * <a href="https://www.pnp-software.com/cordetfw/editor/">CORDET Editor</a>.
 */

 /** @defgroup man_config Configuration Files 
 * @ingroup psExt
 *
 * Configuration files for the CORDET Framework
 * 
 * This module includes two kinds of configuration files:
 * - Header files which configure a component of the CORDET Framework
 * - Body files which implement an interface defined by the CORDET Framework
 * .
 * The configuration files in this module are aimed at supporting the testing of
 * the PUS Extension of the CORDET Framework.
 * Applications will nornmally have to modify them to match their own needs. 
 */

/** @defgroup man_ver Request Verification Service 
 * @ingroup psExt
 *
 * @brief Implementation of Request Verification Service (PUS Service 1) 
 * 
 * The Request Verification Service is implemented by nine reports which are issued in response
 * to notifications generated by a service provider application. 
 * The notifications cover different stages of the processing of an incoming command. More precisely:
 * - The report (1,10) is triggered in response to notifications of a routing failure for an
 *   incoming command (Routing and Reporting Sub-Service)
 * - The reports (1,1) and (1,2) are triggered in response to notifications of the failure
 *   or success of the acceptance of an incoming command (Acceptance and Reporting Sub-Service)
 * - The reports (1,3) to (1,8) are triggered in response to notifications of the failure or
 *   success of execution of an incoming command (Execution and Reporting Sub-Service)
 * .
 * The notifications listed above are generated by the CORDET Framework infrastructure.
 * The operations which generate them are defined as adaptation points. The PUS Extension
 * closes these adaptation points to generate the service 1 reports.
 */
 
 /** @defgroup man_hk Housekeeping Reporting Service 
 * @ingroup psExt
 *
 * @brief Implementation of Housekeeping Service (PUS Service 3) 
 *
 * The housekeeping service provides the capability to create, delete and control housekeeping
 * and diagnostic reports.
 * A housekeeping/diagnostic report carries the values of a set of data pool items. Any data
 * pool item may be included in a housekeeping/diagnostic report.
 *
 * @limitation The over-sampling mechanism for housekeeping reports is not supported
 */

 /** @defgroup man_evt Event Reporting Service 
 * @ingroup psExt
 *
 * @brief Implementation of Event Reporting Service (PUS Service 5) 
 * 
 * The event reporting service provides the capability to report event-like occurrences and to
 * control the generation of event reports by enabling and disabling individual event identifiers.
 * 
 * The PUS recognizes four levels of event reports and associates to each level a service sub-
 * type. Thus, for instance, all event reports of level 1 are carried by reports of type (5,1) and
 * all event reports of level 2 are carried by event reports of type (5,2).
 * All event reports have the same behaviour irrespective of their level. The PUS Extension
 * of the CORDET Framework consequently defines one single component which may
 * encapsulate an event report of any level.
 * 
 * Event reports may carry data. The Event Identifier (EID) determines the format of the data
 * associated to an event report. The PUS Extension accordingly treats the event identifier
 * as a discriminant. The range of discriminants and the data associated to each discriminant
 * are adaptation points which must be defined at application level. Some event reports are 
 * pre-defined at framework level.
 */

 /** @defgroup man_mon On-Board Monitoring Service 
 * @ingroup psExt
 *
 * @brief Implementation of On-Board Monitoring Service (PUS Service 12) 
 *
 * This service comprises two sub-services.
 * The <i>parameter monitoring subservice</i> controls the parameter monitoring function. 
 * This function monitors the values of a set of data items in the data pool.
 * The <i>functional monitoring subservice</i> controls the functional monitoring function. 
 * This function monitors the status of the parameter monitors.
 *
 * @limitation The functional monitoring subservice is not yet supported
 */

 /** @defgroup man_tst Test Service 
 * @ingroup psExt
 *
 * Implementation of Test Service (PUS Service 17)
 * 
 * The Test Service provides the capability to perform two kinds of connections tests:
 * the <i>Are-You-Alive Test</i> and the <i>On-Board Connection Test</i>.
 * 
 * The Are-You-Alive test is like a ping test: an external user sends a command of type (17,1)
 * to the application and the application responds by sending to the user a (17,2) report.
 * Neither the (17,1) command nor the (17,2) report carry any parameters.
 * 
 * In the On-Board-Connection Test, an external user sends a command of type (17,3) to appliation 
 * A asking it to perform a connection test with some other application B. Application
 * B is specified through a parameter carried by the (17,3) command.
 * 
 * The way the connection test is performed is not specified by the PUS. The PUS Extension
 * of the CORDET Framework implements it as an Are-You-Alive Test from application A
 * to application B. If this Are-You-Alive Test is successful, application A generates a (17,4)
 * report to its user.
 * The Are-You-Alive Test is declared successful if a (17,2) report from application B is received within 
 * a time-out (defined as a parameter in data pool structure #DpTstParams_t) from the sending of the (17,1) command.
 */


