/** @defgroup psExt PUS Extension 
 * @brief  Implementation of most commonly used services of the 
 * Packet Utilization Service (PUS).
 *
 * The CORDET Framework is built around the <i>CORDET Service Concept</i>.
 * A service consists of a set of logically related commands and reports.
 * The service concept defines the life-cycle of a generic command and of
 * generic report.
 * This life-cycle is independent of the specific content and actions of 
 * a command or report.
 * The CORDET Framework provides components which enforce this life-cycle but
 * it does not provide support for any specific command or report.
 *
 * The service concept of the CORDET Framework is the same as the service concept
 * of the Packet Utilization Standard (PUS).
 * The PUS Extension of the CORDET Framework provides components which implement
 * the commands and reports of the most commonly used services in the PUS.
 */

/** @defgroup DataPool Data Pool Component 
 * @ingroup psExt
 * 
 * @brief Implementation of the data pool component.
 * 
 * The Data Pool Component is a pre-defined component offered by the PUS Extension of the
 * CORDET Framework. 
 * It is used by all services supported by the framework extension and
 * it is therefore defined independently of these services.
 *
 * The Data Pool Component provides read-write access to a set of Data Items.
 * A Data Item is characterized by the following attributes:
 * - Default Value: the value of the data item when the data pool is reset
 * - Current Value: the value of the data item at a particular point in time
 * - Identifier: a positive integer which uniquely identifies the Data Item within the Data Pool.
 * - Type: an enumerated value which determines the range of possible values of the Data
 *   Item and its representation in the Data Pool
 * .
 * The data items can be of two kinds:
 * - Parameters: data items whose value is under the control of an entity external to the host application
 * - Variables: data items whose value is autonomously updated by the host application as part of its normal operation
 * .
 * The files which make up the data pool component can be generated by the 
 * <a href="https://www.pnp-software.com/cordetfw/editor/">CORDET Editor</a>.
 */

/** @defgroup Serv1 Request Verification Service 
 * @ingroup psExt
 *
 * @brief Implementation of Request Verification Service (PUS Service 1) 
 * 
 * The Request Verification Service is implemented by nine reports which are issued in response
 * to notifications generated by a service provider application. 
 * The notifications cover different stages of the processing of an incoming command. More precisely:
 * - The report (1,10) is triggered in response to notifications of a routing failure for an
 *   incoming command (Routing and Reporting Sub-Service)
 * - The reports (1,1) and (1,2) are triggered in response to notifications of the failure
 *   or success of the acceptance of an incoming command (Acceptance and Reporting Sub-Service)
 * - The reports (1,3) to (1,8) are triggered in response to notifications of the failure or
 *   success of execution of an incoming command (Execution and Reporting Sub-Service)
 * .
 * The notifications listed above are generated by the CORDET Framework infrastructure.
 * The operations which generate them are defined as adaptation points. The PUS Extension
 * closes these adaptation points to generate the service 1 reports.
 */
 
 /** @defgroup Serv3 Request Verification Service 
 * @ingroup psExt
 *
 * @brief Implementation of Housekeeping Service (PUS Service 3) 
 *
 * The housekeeping service provides the capability to create, delete and control housekeeping
 * and diagnostic reports.
 * A housekeeping/diagnostic report carries the values of a set of data pool items. Any data
 * pool item may be included in a housekeeping/diagnostic report.
 */
 
 /** @defgroup Serv5 Event Reporting Service 
 * @ingroup psExt
 *
 * @brief Implementation of Event Reporting Service (PUS Service 5) 
 * 
 * The event reporting service provides the capability to report event-like occurrences and to
 * control the generation of event reports by enabling and disabling individual event identifiers.
 * 
 * The PUS recognizes four levels of event reports and associates to each level a service sub-
 * type. Thus, for instance, all event reports of level 1 are carried by reports of type (5,1) and
 * all event reports of level 2 are carried by event reports of type (5,2).
 * All event reports have the same behaviour irrespective of their level. The PUS Extension
 * of the CORDET Framework consequently defines one single component which may
 * encapsulate an event report of any level.
 * 
 * Event reports may carry data. The Event Identifier (EID) determines the format of the data
 * associated to an event report. The PUS Extension accordingly treats the event identifier
 * as a discriminant. The range of discriminants and the data associated to each discriminant
 * are adaptation points which must be defined at application level. No event identifiers are
 * pre-defined at framework level.
 */

 /** @defgroup Serv13 Large Packet Transfer Service 
 * @ingroup psExt
 *
 * Implementation of Large Packet Transfer Service (PUS Service 13) 
 * 
 * The Large Packet Transfer Service provides the capabilities to perform a <i>down-transfer</i>
 * (namely a transfer of large packet from the service provider to the service user) and an
 * <i>up-transfer</i> (namely a transfer of a large packet from the service user to the service provider).
 */

 /** @defgroup Serv17 Test Service 
 * @ingroup psExt
 *
 * Implementation of Test Service (PUS Service 17)
 * 
 * The Test Service provides the capability to perform two kinds of connections tests:
 * the <i>Are-You-Alive Test</i> and the <i>On-Board Connection Test</i>.
 * 
 * The Are-You-Alive test is like a ping test: an external user sends a command of type (17,1)
 * to the application and the application responds by sending to the user a (17,2) report.
 * Neither the (17,1) command nor the (17,2) report carry any parameters.
 * 
 * In the On-Board-Connection Test, an external user sends a command of type (17,3) to appliation 
 * A asking it to perform a connection test with some other application B. Application
 * B is specified through a parameter carried by the (17,3) command.
 * 
 * The way the connection test is performed is not specified by the PUS. The PUS Extension
 * of the CORDET Framework implements it as an Are-You-Alive Test from application A
 * to application B. If this Are-You-Alive Test is successful, application A generates a (17,4)
 * report to its user.
 * The Are-You-Alive Test is declared successful if a (17,2) report from application B is received within time
 * #AreYouAliveTimeOut from the sending of the (17,1) command.
 */

 /** @defgroup pktgetset Getter and Setter Functions 
 * @ingroup psExt
 *
 * Implementation of Functions to Access Parameters in Commands and Reports
 * 
 * The files in this module define getter and setter functions for the parameters in the
 * commands and reports suported by the PUS Extension of the CORDET Framework.
 * These files are generated by the <a href="https://www.pnp-software.com/cordetfw/editor/">CORDET Editor</a>.
 */

 /** @defgroup InCmd Definition of Incoming Commands 
 * @ingroup psExt
 *
 * Components implementing incoming commands (InCommands)
 * 
 * The CORDET Framework defines the InCommand as a generic component which encapsulates an
 * incoming command.
 * The InCommand can therefore be seen as an abstract component which can be specialized to implement 
 * concrete incoming commands.
 * The PUS Extension of the CORDET Framework defines several concrete commands to support its services.
 * This module gathers together all files which implement incoming commands.
 */

 /** @defgroup OutCmp Definition of Out-Going Reports 
 * @ingroup psExt
 *
 * Components implementing out-going reports (OutComponents)
 * 
 * The CORDET Framework defines the OutComponent as a generic component which encapsulates an
 * out-going command or report.
 * The OutComponent can therefore be seen as an abstract component which can be specialized to implement 
 * concrete out-going commands or out-going reports.
 * The PUS Extension of the CORDET Framework does not define any out-going commands but it
 * defines several concrete out-going reports to support its services.
 * This module gathers together all files which implement out-going reports.
 */

 /** @defgroup InRep Definition of Incoming Reports 
 * @ingroup psExt
 *
 * Components implementing incoming reports (InReports)
 * 
 * The CORDET Framework defines the InReport as a generic component which encapsulates an
 * incoming report.
 * The InReport can therefore be seen as an abstract component which can be specialized to implement 
 * concrete incoming reports.
 * The PUS Extension of the CORDET Framework defines a small number of incoming reports.
 * This module gathers together all files which implement incoming reports.
 */

 /** @defgroup procedures Definition of Procedures
 * @ingroup psExt
 *
 * Components implementing procedures
 * 
 * The behaviour of the CORDET Framework is specified through a set of models which conform to the
 * <a href="https://www.pnp-software.com/fwprofile/">FW Profile</a>.
 * The FW Profile uses state machines and procedures (a form of activity diagrams) to describe functional
 * behaviour.
 * The state machines and procedures are modelled in the 
 * <a href="https://www.pnp-software.com/fwprofile/editor">FW Profile Editor</a> (a web-based tool which
 * enforces the rules of the FW Profile).
 * The editor has a code generating back-end which generates the skeleton implementation of a procedure
 * or state machine. 
 * This module gathers together all files which implement procedures.
 * The files with names like 'XyzCreate' are generated by the editor tool. 
 * The files with names like 'XyzFunc' are instead manually developed. 
 */
 
  /** @defgroup statemachines Definition of State Machines
 * @ingroup psExt
 *
 * Components implementing state machines
 * 
 * The behaviour of the CORDET Framework is specified through a set of models which conform to the
 * <a href="https://www.pnp-software.com/fwprofile/">FW Profile</a>.
 * The FW Profile uses state machines and procedures (a form of activity diagrams) to describe functional
 * behaviour.
 * The state machines and procedures are modelled in the 
 * <a href="https://www.pnp-software.com/fwprofile/editor">FW Profile Editor</a> (a web-based tool which
 * enforces the rules of the FW Profile).
 * The editor has a code generating back-end which generates the skeleton implementation of a procedure
 * or state machine. 
 * This module gathers together all files which implement state machines.
 * The files with names like 'XyzCreate' are generated by the editor tool. 
 * The files with names like 'XyzFunc' are instead manually developed. 
 */

 /** @defgroup Utilities Utility Functions for the PUS Extension 
 * @ingroup psExt
 *
 * Implementation of utility functions for the PUS Extenstion
 */

 /** @defgroup PUSTestsuite PUS Test Suite  
 * @ingroup psExt
 *
 * Test Suite for the for the PUS Extension of the CORDET Framework
 */

 /** @defgroup PUSTestconfig PUS Configuration Files   
 * @ingroup psExt
 *
 * Configuration files for the test suite of the PUS Extension
 *
 * The PUS Test Suite is an application which instantiates the PUS Extension of the CORDET
 * Framework. 
 * The files in this module contain the configurable information which must be tuned for
 * each instantiation of the framework. 
 */

