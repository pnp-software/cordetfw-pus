/**
 * @file
 * @ingroup gen_pck
 *
 * Interface for accessing fields in packets of service "Evt".
 *
 * @note This file was generated on 2018-10-28 20:42:51
 * @author Automatically Generated by CORDET Editor
 * @copyright P&P Software GmbH
 */
#ifndef CRPSPCKTEVT_H_
#define CRPSPCKTEVT_H_

#include "CrPsTypes.h"

#include "CrPsPckt.h"
/**
 * Structure for Rep1 - EVT_DOWN_ABORT
 */
typedef struct __attribute__((packed)) _Rep1EVT_DOWN_ABORT_t {
   /**
    * Packet header.
    */
   TmHeader_t Header;

   /**
    * Event Identifier
    */
   CrPsEvtId_t EventId;
   
} Rep1EVT_DOWN_ABORT_t ;

/**
 * Structure for Rep1 - EVT_DUMMY
 */
typedef struct __attribute__((packed)) _Rep1EVT_DUMMY_t {
   /**
    * Packet header.
    */
   TmHeader_t Header;

   /**
    * Event Identifier
    */
   CrPsEvtId_t EventId;
   
   /**
    * Dummy parameter for dummy event used for testing
    */
   CrPsEightBit_t Par;
   
} Rep1EVT_DUMMY_t ;

/**
 * Structure for Rep2
 */
typedef struct __attribute__((packed)) _Rep2_t {
   /**
    * Packet header.
    */
   TmHeader_t Header;

   /**
    * Event Identifier
    */
   CrPsEvtId_t EventId;
   
} Rep2_t ;

/**
 * Structure for Rep3
 */
typedef struct __attribute__((packed)) _Rep3_t {
   /**
    * Packet header.
    */
   TmHeader_t Header;

   /**
    * Event Identifier
    */
   CrPsEvtId_t EventId;
   
} Rep3_t ;

/**
 * Structure for Rep4
 */
typedef struct __attribute__((packed)) _Rep4_t {
   /**
    * Packet header.
    */
   TmHeader_t Header;

   /**
    * Event Identifier
    */
   CrPsEvtId_t EventId;
   
} Rep4_t ;

/**
 * Structure for EnbCmd
 */
typedef struct __attribute__((packed)) _EnbCmd_t {
   /**
    * Packet header.
    */
   TcHeader_t Header;

   /**
    * The number of event identifiers to be enabled
    */
   CrPsNEvtId_t N;
   
   struct __attribute__((packed)) {
      /**
       * Event identifier to be enabled
       */
      CrPsEvtId_t EventId;
      
   } N_[0];
} EnbCmd_t ;

/**
 * Structure for DisCmd
 */
typedef struct __attribute__((packed)) _DisCmd_t {
   /**
    * Packet header.
    */
   TcHeader_t Header;

   /**
    * The number of event identifiers to be disabled
    */
   CrPsNEvtId_t N;
   
   struct __attribute__((packed)) {
      /**
       * Event identifier to be disabled
       */
      CrPsEvtId_t EventId;
      
   } N_[0];
} DisCmd_t ;

/**
 * Structure for RepDisCmd
 */
typedef struct __attribute__((packed)) _RepDisCmd_t {
   /**
    * Packet header.
    */
   TcHeader_t Header;

} RepDisCmd_t ;

/**
 * Structure for DisRep
 */
typedef struct __attribute__((packed)) _DisRep_t {
   /**
    * Packet header.
    */
   TmHeader_t Header;

   /**
    * The number of disabled event identifiers
    */
   CrPsNEvtId_t N;
   
   struct __attribute__((packed)) {
      /**
       * Event Identifier
       */
      CrPsEvtId_t EventId;
      
   } N_[0];
} DisRep_t ;

/**
 * Get "EventId" from "Rep1 - EVT_DOWN_ABORT" packet.
 * @param p Pointer to the packet.
 * @return Value of "EventId".
 */
static inline CrPsEvtId_t getRep1EVT_DOWN_ABORTEventId(void* p) {
   Rep1EVT_DOWN_ABORT_t* t;
   t = (Rep1EVT_DOWN_ABORT_t*)p;
   return __builtin_bswap16(t->EventId);
}

/**
 * Set "EventId" in "Rep1 - EVT_DOWN_ABORT" packet.
 * @param p Pointer to the packet.
 * @param EventId Value of "EventId" to be set in packet.
 */
static inline void setRep1EVT_DOWN_ABORTEventId(void* p, CrPsEvtId_t EventId) {
   Rep1EVT_DOWN_ABORT_t* t;
   t = (Rep1EVT_DOWN_ABORT_t*)p;
   t->EventId = __builtin_bswap16(EventId);
}

/**
 * Get "EventId" from "Rep1 - EVT_DUMMY" packet.
 * @param p Pointer to the packet.
 * @return Value of "EventId".
 */
static inline CrPsEvtId_t getRep1EVT_DUMMYEventId(void* p) {
   Rep1EVT_DUMMY_t* t;
   t = (Rep1EVT_DUMMY_t*)p;
   return __builtin_bswap16(t->EventId);
}

/**
 * Set "EventId" in "Rep1 - EVT_DUMMY" packet.
 * @param p Pointer to the packet.
 * @param EventId Value of "EventId" to be set in packet.
 */
static inline void setRep1EVT_DUMMYEventId(void* p, CrPsEvtId_t EventId) {
   Rep1EVT_DUMMY_t* t;
   t = (Rep1EVT_DUMMY_t*)p;
   t->EventId = __builtin_bswap16(EventId);
}

/**
 * Get "Par" from "Rep1 - EVT_DUMMY" packet.
 * @param p Pointer to the packet.
 * @return Value of "Par".
 */
static inline CrPsEightBit_t getRep1EVT_DUMMYPar(void* p) {
   Rep1EVT_DUMMY_t* t;
   t = (Rep1EVT_DUMMY_t*)p;
   return t->Par;
}

/**
 * Set "Par" in "Rep1 - EVT_DUMMY" packet.
 * @param p Pointer to the packet.
 * @param Par Value of "Par" to be set in packet.
 */
static inline void setRep1EVT_DUMMYPar(void* p, CrPsEightBit_t Par) {
   Rep1EVT_DUMMY_t* t;
   t = (Rep1EVT_DUMMY_t*)p;
   t->Par = Par;
}

/**
 * Get "EventId" from "Rep2" packet.
 * @param p Pointer to the packet.
 * @return Value of "EventId".
 */
static inline CrPsEvtId_t getEvtRep2EventId(void* p) {
   Rep2_t* t;
   t = (Rep2_t*)p;
   return __builtin_bswap16(t->EventId);
}

/**
 * Set "EventId" in "Rep2" packet.
 * @param p Pointer to the packet.
 * @param EventId Value of "EventId" to be set in packet.
 */
static inline void setEvtRep2EventId(void* p, CrPsEvtId_t EventId) {
   Rep2_t* t;
   t = (Rep2_t*)p;
   t->EventId = __builtin_bswap16(EventId);
}

/**
 * Get "EventId" from "Rep3" packet.
 * @param p Pointer to the packet.
 * @return Value of "EventId".
 */
static inline CrPsEvtId_t getEvtRep3EventId(void* p) {
   Rep3_t* t;
   t = (Rep3_t*)p;
   return __builtin_bswap16(t->EventId);
}

/**
 * Set "EventId" in "Rep3" packet.
 * @param p Pointer to the packet.
 * @param EventId Value of "EventId" to be set in packet.
 */
static inline void setEvtRep3EventId(void* p, CrPsEvtId_t EventId) {
   Rep3_t* t;
   t = (Rep3_t*)p;
   t->EventId = __builtin_bswap16(EventId);
}

/**
 * Get "EventId" from "Rep4" packet.
 * @param p Pointer to the packet.
 * @return Value of "EventId".
 */
static inline CrPsEvtId_t getEvtRep4EventId(void* p) {
   Rep4_t* t;
   t = (Rep4_t*)p;
   return __builtin_bswap16(t->EventId);
}

/**
 * Set "EventId" in "Rep4" packet.
 * @param p Pointer to the packet.
 * @param EventId Value of "EventId" to be set in packet.
 */
static inline void setEvtRep4EventId(void* p, CrPsEvtId_t EventId) {
   Rep4_t* t;
   t = (Rep4_t*)p;
   t->EventId = __builtin_bswap16(EventId);
}

/**
 * Get "N" from "EnbCmd" packet.
 * @param p Pointer to the packet.
 * @return Value of "N".
 */
static inline CrPsNEvtId_t getEvtEnbCmdN(void* p) {
   EnbCmd_t* t;
   t = (EnbCmd_t*)p;
   return t->N;
}

/**
 * Set "N" in "EnbCmd" packet.
 * @param p Pointer to the packet.
 * @param N Value of "N" to be set in packet.
 */
static inline void setEvtEnbCmdN(void* p, CrPsNEvtId_t N) {
   EnbCmd_t* t;
   t = (EnbCmd_t*)p;
   t->N = N;
}

/**
 * Get pointer to "EventId" array from "EnbCmd" packet.
 * @param p Pointer to the packet.
 * @return Pointer to the start of the EventId array.
 */
static inline CrPsEvtId_t* getEvtEnbCmdEventIdArray(void* p) {
   EnbCmd_t* t;
   t = (EnbCmd_t*)p;
   return &t->N_[0].EventId;
}

/**
 * Get "EventId" array from "EnbCmd" packet.
 * @param p Pointer to the packet.
 * @param dest Pointer to memory location where array data are copied to.
 */
static inline void readEvtEnbCmdEventIdArray(void* p, void* dest) {
   EnbCmd_t* t;
   t = (EnbCmd_t*)p;
   memcpy(dest, &t->N_[0].EventId, t->N*sizeof(t->N_[0].EventId));
}

/**
 * Set "EventId" array in "EnbCmd" packet.
 * @param p Pointer to the packet.
 * @param src Pointer to memory location from where array data are copied.
 */
static inline void writeEvtEnbCmdEventIdArray(void* p, const void* src) {
   EnbCmd_t* t;
   t = (EnbCmd_t*)p;
   memcpy(&t->N_[0].EventId, src, t->N*sizeof(t->N_[0].EventId));
}

/**
 * Get "EventId" from "EnbCmd" packet.
 * @param p Pointer to the packet.
 * @param N
 * @return Value of "EventId".
 */
static inline CrPsEvtId_t getEvtEnbCmdEventId(void* p, CrPsNEvtId_t N) {
   EnbCmd_t* t;
   t = (EnbCmd_t*)p;
   return __builtin_bswap16(t->N_[N].EventId);
}

/**
 * Set "EventId" in "EnbCmd" packet.
 * @param p Pointer to the packet.
 * @param N
 * @param EventId Value of "EventId" to be set in packet.
 */
static inline void setEvtEnbCmdEventId(void* p, CrPsNEvtId_t N, CrPsEvtId_t EventId) {
   EnbCmd_t* t;
   t = (EnbCmd_t*)p;
   t->N_[N].EventId = __builtin_bswap16(EventId);
}

/**
 * Get "N" from "DisCmd" packet.
 * @param p Pointer to the packet.
 * @return Value of "N".
 */
static inline CrPsNEvtId_t getEvtDisCmdN(void* p) {
   DisCmd_t* t;
   t = (DisCmd_t*)p;
   return t->N;
}

/**
 * Set "N" in "DisCmd" packet.
 * @param p Pointer to the packet.
 * @param N Value of "N" to be set in packet.
 */
static inline void setEvtDisCmdN(void* p, CrPsNEvtId_t N) {
   DisCmd_t* t;
   t = (DisCmd_t*)p;
   t->N = N;
}

/**
 * Get pointer to "EventId" array from "DisCmd" packet.
 * @param p Pointer to the packet.
 * @return Pointer to the start of the EventId array.
 */
static inline CrPsEvtId_t* getEvtDisCmdEventIdArray(void* p) {
   DisCmd_t* t;
   t = (DisCmd_t*)p;
   return &t->N_[0].EventId;
}

/**
 * Get "EventId" array from "DisCmd" packet.
 * @param p Pointer to the packet.
 * @param dest Pointer to memory location where array data are copied to.
 */
static inline void readEvtDisCmdEventIdArray(void* p, void* dest) {
   DisCmd_t* t;
   t = (DisCmd_t*)p;
   memcpy(dest, &t->N_[0].EventId, t->N*sizeof(t->N_[0].EventId));
}

/**
 * Set "EventId" array in "DisCmd" packet.
 * @param p Pointer to the packet.
 * @param src Pointer to memory location from where array data are copied.
 */
static inline void writeEvtDisCmdEventIdArray(void* p, const void* src) {
   DisCmd_t* t;
   t = (DisCmd_t*)p;
   memcpy(&t->N_[0].EventId, src, t->N*sizeof(t->N_[0].EventId));
}

/**
 * Get "EventId" from "DisCmd" packet.
 * @param p Pointer to the packet.
 * @param N
 * @return Value of "EventId".
 */
static inline CrPsEvtId_t getEvtDisCmdEventId(void* p, CrPsNEvtId_t N) {
   DisCmd_t* t;
   t = (DisCmd_t*)p;
   return __builtin_bswap16(t->N_[N].EventId);
}

/**
 * Set "EventId" in "DisCmd" packet.
 * @param p Pointer to the packet.
 * @param N
 * @param EventId Value of "EventId" to be set in packet.
 */
static inline void setEvtDisCmdEventId(void* p, CrPsNEvtId_t N, CrPsEvtId_t EventId) {
   DisCmd_t* t;
   t = (DisCmd_t*)p;
   t->N_[N].EventId = __builtin_bswap16(EventId);
}

/**
 * Get "N" from "DisRep" packet.
 * @param p Pointer to the packet.
 * @return Value of "N".
 */
static inline CrPsNEvtId_t getEvtDisRepN(void* p) {
   DisRep_t* t;
   t = (DisRep_t*)p;
   return t->N;
}

/**
 * Set "N" in "DisRep" packet.
 * @param p Pointer to the packet.
 * @param N Value of "N" to be set in packet.
 */
static inline void setEvtDisRepN(void* p, CrPsNEvtId_t N) {
   DisRep_t* t;
   t = (DisRep_t*)p;
   t->N = N;
}

/**
 * Get pointer to "EventId" array from "DisRep" packet.
 * @param p Pointer to the packet.
 * @return Pointer to the start of the EventId array.
 */
static inline CrPsEvtId_t* getEvtDisRepEventIdArray(void* p) {
   DisRep_t* t;
   t = (DisRep_t*)p;
   return &t->N_[0].EventId;
}

/**
 * Get "EventId" array from "DisRep" packet.
 * @param p Pointer to the packet.
 * @param dest Pointer to memory location where array data are copied to.
 */
static inline void readEvtDisRepEventIdArray(void* p, void* dest) {
   DisRep_t* t;
   t = (DisRep_t*)p;
   memcpy(dest, &t->N_[0].EventId, t->N*sizeof(t->N_[0].EventId));
}

/**
 * Set "EventId" array in "DisRep" packet.
 * @param p Pointer to the packet.
 * @param src Pointer to memory location from where array data are copied.
 */
static inline void writeEvtDisRepEventIdArray(void* p, const void* src) {
   DisRep_t* t;
   t = (DisRep_t*)p;
   memcpy(&t->N_[0].EventId, src, t->N*sizeof(t->N_[0].EventId));
}

/**
 * Get "EventId" from "DisRep" packet.
 * @param p Pointer to the packet.
 * @param N
 * @return Value of "EventId".
 */
static inline CrPsEvtId_t getEvtDisRepEventId(void* p, CrPsNEvtId_t N) {
   DisRep_t* t;
   t = (DisRep_t*)p;
   return __builtin_bswap16(t->N_[N].EventId);
}

/**
 * Set "EventId" in "DisRep" packet.
 * @param p Pointer to the packet.
 * @param N
 * @param EventId Value of "EventId" to be set in packet.
 */
static inline void setEvtDisRepEventId(void* p, CrPsNEvtId_t N, CrPsEvtId_t EventId) {
   DisRep_t* t;
   t = (DisRep_t*)p;
   t->N_[N].EventId = __builtin_bswap16(EventId);
}


/*----------------------------------------------------------------------------*/
#endif /* CRPSPCKTEVT_H */
