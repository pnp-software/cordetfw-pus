/**
 * @file
 * @ingroup gen_pck
 *
 * Interface for accessing fields in packets of service "Mon".
 *
 * @note This file was generated on 2018-09-30 23:01:15
 * @author Automatically Generated by CORDET Editor
 * @copyright P&P Software GmbH
 */
#ifndef CRPSPCKTMON_H_
#define CRPSPCKTMON_H_

#include "CrPsTypes.h"

#include "CrPsPckt.h"
/**
 * Structure for EnbParMonDefCmd
 */
typedef struct __attribute__((packed)) _EnbParMonDefCmd_t {
   /**
    * Packet header.
    */
   TcHeader_t Header;

   /**
    * Number of monitoring definitions to be enabled.
    */
   CrPsNParMon_t NParMon;
   
   struct __attribute__((packed)) {
      /**
       * Identifier of Parameter Monitor
       */
      CrPsParMonId_t ParMonId;
      
   } NParMon_[0];
} EnbParMonDefCmd_t ;

/**
 * Structure for DisParMonDefCmd
 */
typedef struct __attribute__((packed)) _DisParMonDefCmd_t {
   /**
    * Packet header.
    */
   TcHeader_t Header;

   /**
    * Number of monitoring definitions to be disabled,
    */
   CrPsNParMon_t NParMon;
   
   struct __attribute__((packed)) {
      /**
       * Identifier of Parameter Monitor
       */
      CrPsParMonId_t ParMonId;
      
   } NParMon_[0];
} DisParMonDefCmd_t ;

/**
 * Structure for ChgTransDelCmd
 */
typedef struct __attribute__((packed)) _ChgTransDelCmd_t {
   /**
    * Packet header.
    */
   TcHeader_t Header;

   /**
    * Maximum reporting delay
    */
   CrPsRepDelay_t maxRepDelay;
   
} ChgTransDelCmd_t ;

/**
 * Structure for DelAllParMonCmd
 */
typedef struct __attribute__((packed)) _DelAllParMonCmd_t {
   /**
    * Packet header.
    */
   TcHeader_t Header;

} DelAllParMonCmd_t ;

/**
 * Structure for DelParMonDefCmd
 */
typedef struct __attribute__((packed)) _DelParMonDefCmd_t {
   /**
    * Packet header.
    */
   TcHeader_t Header;

   /**
    * Number of parameter monitoring definitions to be deleted
    */
   CrPsNParMon_t NParMon;
   
   struct __attribute__((packed)) {
      /**
       * The identifier of the parameter monitoring definition to be deleted
       */
      CrPsParMonId_t ParMonId;
      
   } NParMon_[0];
} DelParMonDefCmd_t ;

/**
 * Structure for RepParMonDefCmd
 */
typedef struct __attribute__((packed)) _RepParMonDefCmd_t {
   /**
    * Packet header.
    */
   TcHeader_t Header;

   /**
    * The number of parameter monitoring definitions to be reported or zero if
    * all parameter monitoring definitions must be reported
    */
   CrPsNParMon_t NParMon;
   
   struct __attribute__((packed)) {
      /**
       * Identifier of a parameter monitor to be reported
       */
      CrPsParMonId_t ParMonId;
      
   } NParMon_[0];
} RepParMonDefCmd_t ;

/**
 * Structure for RepParMonDefRep
 */
typedef struct __attribute__((packed)) _RepParMonDefRep_t {
   /**
    * Packet header.
    */
   TmHeader_t Header;

} RepParMonDefRep_t ;

/**
 * Structure for RepOutOfLimitsCmd
 */
typedef struct __attribute__((packed)) _RepOutOfLimitsCmd_t {
   /**
    * Packet header.
    */
   TcHeader_t Header;

} RepOutOfLimitsCmd_t ;

/**
 * Structure for RepParMonStatCmd
 */
typedef struct __attribute__((packed)) _RepParMonStatCmd_t {
   /**
    * Packet header.
    */
   TcHeader_t Header;

} RepParMonStatCmd_t ;

/**
 * Structure for RepParMonStatRep
 */
typedef struct __attribute__((packed)) _RepParMonStatRep_t {
   /**
    * Packet header.
    */
   TmHeader_t Header;

   /**
    * Number of parameter monitors whose status is reported by the telecommand
    */
   CrPsNParMon_t NParMon;
   
   struct __attribute__((packed)) {
      /**
       * Identifier of a parameter monitor
       */
      CrPsParMonId_t ParMonId;
      
      /**
       * Current checking status of the parameter monitor
       */
      CrPsParMonCheckStatus_t ParMonCheckStatus;
      
   } NParMon_[0];
} RepParMonStatRep_t ;

/**
 * Structure for EnbParMonFuncCmd
 */
typedef struct __attribute__((packed)) _EnbParMonFuncCmd_t {
   /**
    * Packet header.
    */
   TcHeader_t Header;

} EnbParMonFuncCmd_t ;

/**
 * Structure for DisParMonFuncCmd
 */
typedef struct __attribute__((packed)) _DisParMonFuncCmd_t {
   /**
    * Packet header.
    */
   TcHeader_t Header;

} DisParMonFuncCmd_t ;

/**
 * Structure for EnbFuncMonCmd
 */
typedef struct __attribute__((packed)) _EnbFuncMonCmd_t {
   /**
    * Packet header.
    */
   TcHeader_t Header;

} EnbFuncMonCmd_t ;

/**
 * Structure for DisFuncMonCmd
 */
typedef struct __attribute__((packed)) _DisFuncMonCmd_t {
   /**
    * Packet header.
    */
   TcHeader_t Header;

} DisFuncMonCmd_t ;

/**
 * Structure for EnbFuncMonDefCmd
 */
typedef struct __attribute__((packed)) _EnbFuncMonDefCmd_t {
   /**
    * Packet header.
    */
   TcHeader_t Header;

   /**
    * The number of functional monitoring definitions to be enabled
    */
   CrPsNFuncMon_t NFuncMon;
   
   struct __attribute__((packed)) {
      /**
       * Identifier of a functional monitor to be enabled
       */
      CrPsFuncMonId_t FuncMonId;
      
   } NFuncMon_[0];
} EnbFuncMonDefCmd_t ;

/**
 * Structure for DisFuncMonDefCmd
 */
typedef struct __attribute__((packed)) _DisFuncMonDefCmd_t {
   /**
    * Packet header.
    */
   TcHeader_t Header;

   /**
    * The number of functional monitors to be disabled
    */
   CrPsNFuncMon_t NFuncMon;
   
   struct __attribute__((packed)) {
      /**
       * Identifier of functional monitor to be disabled
       */
      CrPsFuncMonId_t FuncMonId;
      
   } NFuncMon_[0];
} DisFuncMonDefCmd_t ;

/**
 * Structure for ProtFuncMonDefCmd
 */
typedef struct __attribute__((packed)) _ProtFuncMonDefCmd_t {
   /**
    * Packet header.
    */
   TcHeader_t Header;

   /**
    * The number of functional monitors to be protected
    */
   CrPsNFuncMon_t NFuncMon;
   
   struct __attribute__((packed)) {
      /**
       * Identifier of functional monitor to be protected
       */
      CrPsFuncMonId_t FuncMonId;
      
   } NFuncMon_[0];
} ProtFuncMonDefCmd_t ;

/**
 * Structure for UnprotFuncMonDefCmd
 */
typedef struct __attribute__((packed)) _UnprotFuncMonDefCmd_t {
   /**
    * Packet header.
    */
   TcHeader_t Header;

   /**
    * The number of functional monitor to be unprotected
    */
   CrPsFuncMonId_t FuncMonId;
   
   struct __attribute__((packed)) {
      /**
       * Identifier of a functional monitor to be unprotected
       */
      CrPsFuncMonId_t FuncMonId;
      
   } FuncMonId_[0];
} UnprotFuncMonDefCmd_t ;

/**
 * Structure for DelFuncMonDefCmd
 */
typedef struct __attribute__((packed)) _DelFuncMonDefCmd_t {
   /**
    * Packet header.
    */
   TcHeader_t Header;

   /**
    * Number of functional monitors to be deleted
    */
   CrPsNFuncMon_t NFuncMon;
   
   struct __attribute__((packed)) {
      /**
       * Identifier of functional monitor to be deleted
       */
      CrPsFuncMonId_t FuncMonId;
      
   } NFuncMon_[0];
} DelFuncMonDefCmd_t ;

/**
 * Structure for RepFuncMonDefCmd
 */
typedef struct __attribute__((packed)) _RepFuncMonDefCmd_t {
   /**
    * Packet header.
    */
   TcHeader_t Header;

   /**
    * Number of functional monitors whose definition is to be reported
    */
   CrPsFuncMonId_t FuncMonId;
   
   struct __attribute__((packed)) {
      /**
       * Identifier of functional monitor whose definition is to be reported
       */
      CrPsFuncMonId_t FuncMonId;
      
   } FuncMonId_[0];
} RepFuncMonDefCmd_t ;

/**
 * Structure for RepFuncMonStatCmd
 */
typedef struct __attribute__((packed)) _RepFuncMonStatCmd_t {
   /**
    * Packet header.
    */
   TcHeader_t Header;

} RepFuncMonStatCmd_t ;

/**
 * Structure for RepFuncMonStatRep
 */
typedef struct __attribute__((packed)) _RepFuncMonStatRep_t {
   /**
    * Packet header.
    */
   TmHeader_t Header;

   /**
    * The number of functional monitor statuses in the report
    */
   CrPsNParMon_t NParMon;
   
   struct __attribute__((packed)) {
      /**
       * Identifier of Functional Monitor
       */
      CrPsFuncMonId_t FuncMonId;
      
      /**
       * Functional Monitor Protection Status
       */
      CrPsProtStatus_t ProtStatus;
      
      /**
       * Enable Status
       */
      CrPsEnDis_t IsEnabled;
      
      /**
       * Functional Monitor Checking Status
       */
      CrPsFunctMonCheckStatus_t FuncMonCheckStatus;
      
   } NParMon_[0];
} RepFuncMonStatRep_t ;

/**
 * Get "NParMon" from "EnbParMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @return Value of "NParMon".
 */
static inline CrPsNParMon_t getMonEnbParMonDefCmdNParMon(void* p) {
   EnbParMonDefCmd_t* t;
   t = (EnbParMonDefCmd_t*)p;
   return t->NParMon;
}

/**
 * Set "NParMon" in "EnbParMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @param NParMon Value of "NParMon" to be set in packet.
 */
static inline void setMonEnbParMonDefCmdNParMon(void* p, CrPsNParMon_t NParMon) {
   EnbParMonDefCmd_t* t;
   t = (EnbParMonDefCmd_t*)p;
   t->NParMon = NParMon;
}

/**
 * Get pointer to "ParMonId" array from "EnbParMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @return Pointer to the start of the ParMonId array.
 */
static inline CrPsParMonId_t* getMonEnbParMonDefCmdParMonIdArray(void* p) {
   EnbParMonDefCmd_t* t;
   t = (EnbParMonDefCmd_t*)p;
   return &t->NParMon_[0].ParMonId;
}

/**
 * Get "ParMonId" array from "EnbParMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @param dest Pointer to memory location where array data are copied to.
 */
static inline void readMonEnbParMonDefCmdParMonIdArray(void* p, void* dest) {
   EnbParMonDefCmd_t* t;
   t = (EnbParMonDefCmd_t*)p;
   memcpy(dest, &t->NParMon_[0].ParMonId, t->NParMon*sizeof(t->NParMon_[0].ParMonId));
}

/**
 * Set "ParMonId" array in "EnbParMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @param src Pointer to memory location from where array data are copied.
 */
static inline void writeMonEnbParMonDefCmdParMonIdArray(void* p, const void* src) {
   EnbParMonDefCmd_t* t;
   t = (EnbParMonDefCmd_t*)p;
   memcpy(&t->NParMon_[0].ParMonId, src, t->NParMon*sizeof(t->NParMon_[0].ParMonId));
}

/**
 * Get "ParMonId" from "EnbParMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @param NParMon
 * @return Value of "ParMonId".
 */
static inline CrPsParMonId_t getMonEnbParMonDefCmdParMonId(void* p, CrPsNParMon_t NParMon) {
   EnbParMonDefCmd_t* t;
   t = (EnbParMonDefCmd_t*)p;
   return __builtin_bswap16(t->NParMon_[NParMon].ParMonId);
}

/**
 * Set "ParMonId" in "EnbParMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @param NParMon
 * @param ParMonId Value of "ParMonId" to be set in packet.
 */
static inline void setMonEnbParMonDefCmdParMonId(void* p, CrPsNParMon_t NParMon, CrPsParMonId_t ParMonId) {
   EnbParMonDefCmd_t* t;
   t = (EnbParMonDefCmd_t*)p;
   t->NParMon_[NParMon].ParMonId = __builtin_bswap16(ParMonId);
}

/**
 * Get "NParMon" from "DisParMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @return Value of "NParMon".
 */
static inline CrPsNParMon_t getMonDisParMonDefCmdNParMon(void* p) {
   DisParMonDefCmd_t* t;
   t = (DisParMonDefCmd_t*)p;
   return t->NParMon;
}

/**
 * Set "NParMon" in "DisParMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @param NParMon Value of "NParMon" to be set in packet.
 */
static inline void setMonDisParMonDefCmdNParMon(void* p, CrPsNParMon_t NParMon) {
   DisParMonDefCmd_t* t;
   t = (DisParMonDefCmd_t*)p;
   t->NParMon = NParMon;
}

/**
 * Get pointer to "ParMonId" array from "DisParMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @return Pointer to the start of the ParMonId array.
 */
static inline CrPsParMonId_t* getMonDisParMonDefCmdParMonIdArray(void* p) {
   DisParMonDefCmd_t* t;
   t = (DisParMonDefCmd_t*)p;
   return &t->NParMon_[0].ParMonId;
}

/**
 * Get "ParMonId" array from "DisParMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @param dest Pointer to memory location where array data are copied to.
 */
static inline void readMonDisParMonDefCmdParMonIdArray(void* p, void* dest) {
   DisParMonDefCmd_t* t;
   t = (DisParMonDefCmd_t*)p;
   memcpy(dest, &t->NParMon_[0].ParMonId, t->NParMon*sizeof(t->NParMon_[0].ParMonId));
}

/**
 * Set "ParMonId" array in "DisParMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @param src Pointer to memory location from where array data are copied.
 */
static inline void writeMonDisParMonDefCmdParMonIdArray(void* p, const void* src) {
   DisParMonDefCmd_t* t;
   t = (DisParMonDefCmd_t*)p;
   memcpy(&t->NParMon_[0].ParMonId, src, t->NParMon*sizeof(t->NParMon_[0].ParMonId));
}

/**
 * Get "ParMonId" from "DisParMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @param NParMon
 * @return Value of "ParMonId".
 */
static inline CrPsParMonId_t getMonDisParMonDefCmdParMonId(void* p, CrPsNParMon_t NParMon) {
   DisParMonDefCmd_t* t;
   t = (DisParMonDefCmd_t*)p;
   return __builtin_bswap16(t->NParMon_[NParMon].ParMonId);
}

/**
 * Set "ParMonId" in "DisParMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @param NParMon
 * @param ParMonId Value of "ParMonId" to be set in packet.
 */
static inline void setMonDisParMonDefCmdParMonId(void* p, CrPsNParMon_t NParMon, CrPsParMonId_t ParMonId) {
   DisParMonDefCmd_t* t;
   t = (DisParMonDefCmd_t*)p;
   t->NParMon_[NParMon].ParMonId = __builtin_bswap16(ParMonId);
}

/**
 * Get "maxRepDelay" from "ChgTransDelCmd" packet.
 * @param p Pointer to the packet.
 * @return Value of "maxRepDelay".
 */
static inline CrPsRepDelay_t getMonChgTransDelCmdmaxRepDelay(void* p) {
   ChgTransDelCmd_t* t;
   t = (ChgTransDelCmd_t*)p;
   return __builtin_bswap16(t->maxRepDelay);
}

/**
 * Set "maxRepDelay" in "ChgTransDelCmd" packet.
 * @param p Pointer to the packet.
 * @param maxRepDelay Value of "maxRepDelay" to be set in packet.
 */
static inline void setMonChgTransDelCmdmaxRepDelay(void* p, CrPsRepDelay_t maxRepDelay) {
   ChgTransDelCmd_t* t;
   t = (ChgTransDelCmd_t*)p;
   t->maxRepDelay = __builtin_bswap16(maxRepDelay);
}

/**
 * Get "NParMon" from "DelParMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @return Value of "NParMon".
 */
static inline CrPsNParMon_t getMonDelParMonDefCmdNParMon(void* p) {
   DelParMonDefCmd_t* t;
   t = (DelParMonDefCmd_t*)p;
   return t->NParMon;
}

/**
 * Set "NParMon" in "DelParMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @param NParMon Value of "NParMon" to be set in packet.
 */
static inline void setMonDelParMonDefCmdNParMon(void* p, CrPsNParMon_t NParMon) {
   DelParMonDefCmd_t* t;
   t = (DelParMonDefCmd_t*)p;
   t->NParMon = NParMon;
}

/**
 * Get pointer to "ParMonId" array from "DelParMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @return Pointer to the start of the ParMonId array.
 */
static inline CrPsParMonId_t* getMonDelParMonDefCmdParMonIdArray(void* p) {
   DelParMonDefCmd_t* t;
   t = (DelParMonDefCmd_t*)p;
   return &t->NParMon_[0].ParMonId;
}

/**
 * Get "ParMonId" array from "DelParMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @param dest Pointer to memory location where array data are copied to.
 */
static inline void readMonDelParMonDefCmdParMonIdArray(void* p, void* dest) {
   DelParMonDefCmd_t* t;
   t = (DelParMonDefCmd_t*)p;
   memcpy(dest, &t->NParMon_[0].ParMonId, t->NParMon*sizeof(t->NParMon_[0].ParMonId));
}

/**
 * Set "ParMonId" array in "DelParMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @param src Pointer to memory location from where array data are copied.
 */
static inline void writeMonDelParMonDefCmdParMonIdArray(void* p, const void* src) {
   DelParMonDefCmd_t* t;
   t = (DelParMonDefCmd_t*)p;
   memcpy(&t->NParMon_[0].ParMonId, src, t->NParMon*sizeof(t->NParMon_[0].ParMonId));
}

/**
 * Get "ParMonId" from "DelParMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @param NParMon
 * @return Value of "ParMonId".
 */
static inline CrPsParMonId_t getMonDelParMonDefCmdParMonId(void* p, CrPsNParMon_t NParMon) {
   DelParMonDefCmd_t* t;
   t = (DelParMonDefCmd_t*)p;
   return __builtin_bswap16(t->NParMon_[NParMon].ParMonId);
}

/**
 * Set "ParMonId" in "DelParMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @param NParMon
 * @param ParMonId Value of "ParMonId" to be set in packet.
 */
static inline void setMonDelParMonDefCmdParMonId(void* p, CrPsNParMon_t NParMon, CrPsParMonId_t ParMonId) {
   DelParMonDefCmd_t* t;
   t = (DelParMonDefCmd_t*)p;
   t->NParMon_[NParMon].ParMonId = __builtin_bswap16(ParMonId);
}

/**
 * Get "NParMon" from "RepParMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @return Value of "NParMon".
 */
static inline CrPsNParMon_t getMonRepParMonDefCmdNParMon(void* p) {
   RepParMonDefCmd_t* t;
   t = (RepParMonDefCmd_t*)p;
   return t->NParMon;
}

/**
 * Set "NParMon" in "RepParMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @param NParMon Value of "NParMon" to be set in packet.
 */
static inline void setMonRepParMonDefCmdNParMon(void* p, CrPsNParMon_t NParMon) {
   RepParMonDefCmd_t* t;
   t = (RepParMonDefCmd_t*)p;
   t->NParMon = NParMon;
}

/**
 * Get pointer to "ParMonId" array from "RepParMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @return Pointer to the start of the ParMonId array.
 */
static inline CrPsParMonId_t* getMonRepParMonDefCmdParMonIdArray(void* p) {
   RepParMonDefCmd_t* t;
   t = (RepParMonDefCmd_t*)p;
   return &t->NParMon_[0].ParMonId;
}

/**
 * Get "ParMonId" array from "RepParMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @param dest Pointer to memory location where array data are copied to.
 */
static inline void readMonRepParMonDefCmdParMonIdArray(void* p, void* dest) {
   RepParMonDefCmd_t* t;
   t = (RepParMonDefCmd_t*)p;
   memcpy(dest, &t->NParMon_[0].ParMonId, t->NParMon*sizeof(t->NParMon_[0].ParMonId));
}

/**
 * Set "ParMonId" array in "RepParMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @param src Pointer to memory location from where array data are copied.
 */
static inline void writeMonRepParMonDefCmdParMonIdArray(void* p, const void* src) {
   RepParMonDefCmd_t* t;
   t = (RepParMonDefCmd_t*)p;
   memcpy(&t->NParMon_[0].ParMonId, src, t->NParMon*sizeof(t->NParMon_[0].ParMonId));
}

/**
 * Get "ParMonId" from "RepParMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @param NParMon
 * @return Value of "ParMonId".
 */
static inline CrPsParMonId_t getMonRepParMonDefCmdParMonId(void* p, CrPsNParMon_t NParMon) {
   RepParMonDefCmd_t* t;
   t = (RepParMonDefCmd_t*)p;
   return __builtin_bswap16(t->NParMon_[NParMon].ParMonId);
}

/**
 * Set "ParMonId" in "RepParMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @param NParMon
 * @param ParMonId Value of "ParMonId" to be set in packet.
 */
static inline void setMonRepParMonDefCmdParMonId(void* p, CrPsNParMon_t NParMon, CrPsParMonId_t ParMonId) {
   RepParMonDefCmd_t* t;
   t = (RepParMonDefCmd_t*)p;
   t->NParMon_[NParMon].ParMonId = __builtin_bswap16(ParMonId);
}

/**
 * Get "NParMon" from "RepParMonStatRep" packet.
 * @param p Pointer to the packet.
 * @return Value of "NParMon".
 */
static inline CrPsNParMon_t getMonRepParMonStatRepNParMon(void* p) {
   RepParMonStatRep_t* t;
   t = (RepParMonStatRep_t*)p;
   return t->NParMon;
}

/**
 * Set "NParMon" in "RepParMonStatRep" packet.
 * @param p Pointer to the packet.
 * @param NParMon Value of "NParMon" to be set in packet.
 */
static inline void setMonRepParMonStatRepNParMon(void* p, CrPsNParMon_t NParMon) {
   RepParMonStatRep_t* t;
   t = (RepParMonStatRep_t*)p;
   t->NParMon = NParMon;
}

/**
 * Get "ParMonId" from "RepParMonStatRep" packet.
 * @param p Pointer to the packet.
 * @param NParMon
 * @return Value of "ParMonId".
 */
static inline CrPsParMonId_t getMonRepParMonStatRepParMonId(void* p, CrPsNParMon_t NParMon) {
   RepParMonStatRep_t* t;
   t = (RepParMonStatRep_t*)p;
   return __builtin_bswap16(t->NParMon_[NParMon].ParMonId);
}

/**
 * Set "ParMonId" in "RepParMonStatRep" packet.
 * @param p Pointer to the packet.
 * @param NParMon
 * @param ParMonId Value of "ParMonId" to be set in packet.
 */
static inline void setMonRepParMonStatRepParMonId(void* p, CrPsNParMon_t NParMon, CrPsParMonId_t ParMonId) {
   RepParMonStatRep_t* t;
   t = (RepParMonStatRep_t*)p;
   t->NParMon_[NParMon].ParMonId = __builtin_bswap16(ParMonId);
}

/**
 * Get "ParMonCheckStatus" from "RepParMonStatRep" packet.
 * @param p Pointer to the packet.
 * @param NParMon
 * @return Value of "ParMonCheckStatus".
 */
static inline CrPsParMonCheckStatus_t getMonRepParMonStatRepParMonCheckStatus(void* p, CrPsNParMon_t NParMon) {
   RepParMonStatRep_t* t;
   t = (RepParMonStatRep_t*)p;
   return t->NParMon_[NParMon].ParMonCheckStatus;
}

/**
 * Set "ParMonCheckStatus" in "RepParMonStatRep" packet.
 * @param p Pointer to the packet.
 * @param NParMon
 * @param ParMonCheckStatus Value of "ParMonCheckStatus" to be set in packet.
 */
static inline void setMonRepParMonStatRepParMonCheckStatus(void* p, CrPsNParMon_t NParMon, CrPsParMonCheckStatus_t ParMonCheckStatus) {
   RepParMonStatRep_t* t;
   t = (RepParMonStatRep_t*)p;
   t->NParMon_[NParMon].ParMonCheckStatus = ParMonCheckStatus;
}

/**
 * Get "NFuncMon" from "EnbFuncMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @return Value of "NFuncMon".
 */
static inline CrPsNFuncMon_t getMonEnbFuncMonDefCmdNFuncMon(void* p) {
   EnbFuncMonDefCmd_t* t;
   t = (EnbFuncMonDefCmd_t*)p;
   return t->NFuncMon;
}

/**
 * Set "NFuncMon" in "EnbFuncMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @param NFuncMon Value of "NFuncMon" to be set in packet.
 */
static inline void setMonEnbFuncMonDefCmdNFuncMon(void* p, CrPsNFuncMon_t NFuncMon) {
   EnbFuncMonDefCmd_t* t;
   t = (EnbFuncMonDefCmd_t*)p;
   t->NFuncMon = NFuncMon;
}

/**
 * Get pointer to "FuncMonId" array from "EnbFuncMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @return Pointer to the start of the FuncMonId array.
 */
static inline CrPsFuncMonId_t* getMonEnbFuncMonDefCmdFuncMonIdArray(void* p) {
   EnbFuncMonDefCmd_t* t;
   t = (EnbFuncMonDefCmd_t*)p;
   return &t->NFuncMon_[0].FuncMonId;
}

/**
 * Get "FuncMonId" array from "EnbFuncMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @param dest Pointer to memory location where array data are copied to.
 */
static inline void readMonEnbFuncMonDefCmdFuncMonIdArray(void* p, void* dest) {
   EnbFuncMonDefCmd_t* t;
   t = (EnbFuncMonDefCmd_t*)p;
   memcpy(dest, &t->NFuncMon_[0].FuncMonId, t->NFuncMon*sizeof(t->NFuncMon_[0].FuncMonId));
}

/**
 * Set "FuncMonId" array in "EnbFuncMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @param src Pointer to memory location from where array data are copied.
 */
static inline void writeMonEnbFuncMonDefCmdFuncMonIdArray(void* p, const void* src) {
   EnbFuncMonDefCmd_t* t;
   t = (EnbFuncMonDefCmd_t*)p;
   memcpy(&t->NFuncMon_[0].FuncMonId, src, t->NFuncMon*sizeof(t->NFuncMon_[0].FuncMonId));
}

/**
 * Get "FuncMonId" from "EnbFuncMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @param NFuncMon
 * @return Value of "FuncMonId".
 */
static inline CrPsFuncMonId_t getMonEnbFuncMonDefCmdFuncMonId(void* p, CrPsNFuncMon_t NFuncMon) {
   EnbFuncMonDefCmd_t* t;
   t = (EnbFuncMonDefCmd_t*)p;
   return t->NFuncMon_[NFuncMon].FuncMonId;
}

/**
 * Set "FuncMonId" in "EnbFuncMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @param NFuncMon
 * @param FuncMonId Value of "FuncMonId" to be set in packet.
 */
static inline void setMonEnbFuncMonDefCmdFuncMonId(void* p, CrPsNFuncMon_t NFuncMon, CrPsFuncMonId_t FuncMonId) {
   EnbFuncMonDefCmd_t* t;
   t = (EnbFuncMonDefCmd_t*)p;
   t->NFuncMon_[NFuncMon].FuncMonId = FuncMonId;
}

/**
 * Get "NFuncMon" from "DisFuncMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @return Value of "NFuncMon".
 */
static inline CrPsNFuncMon_t getMonDisFuncMonDefCmdNFuncMon(void* p) {
   DisFuncMonDefCmd_t* t;
   t = (DisFuncMonDefCmd_t*)p;
   return t->NFuncMon;
}

/**
 * Set "NFuncMon" in "DisFuncMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @param NFuncMon Value of "NFuncMon" to be set in packet.
 */
static inline void setMonDisFuncMonDefCmdNFuncMon(void* p, CrPsNFuncMon_t NFuncMon) {
   DisFuncMonDefCmd_t* t;
   t = (DisFuncMonDefCmd_t*)p;
   t->NFuncMon = NFuncMon;
}

/**
 * Get pointer to "FuncMonId" array from "DisFuncMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @return Pointer to the start of the FuncMonId array.
 */
static inline CrPsFuncMonId_t* getMonDisFuncMonDefCmdFuncMonIdArray(void* p) {
   DisFuncMonDefCmd_t* t;
   t = (DisFuncMonDefCmd_t*)p;
   return &t->NFuncMon_[0].FuncMonId;
}

/**
 * Get "FuncMonId" array from "DisFuncMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @param dest Pointer to memory location where array data are copied to.
 */
static inline void readMonDisFuncMonDefCmdFuncMonIdArray(void* p, void* dest) {
   DisFuncMonDefCmd_t* t;
   t = (DisFuncMonDefCmd_t*)p;
   memcpy(dest, &t->NFuncMon_[0].FuncMonId, t->NFuncMon*sizeof(t->NFuncMon_[0].FuncMonId));
}

/**
 * Set "FuncMonId" array in "DisFuncMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @param src Pointer to memory location from where array data are copied.
 */
static inline void writeMonDisFuncMonDefCmdFuncMonIdArray(void* p, const void* src) {
   DisFuncMonDefCmd_t* t;
   t = (DisFuncMonDefCmd_t*)p;
   memcpy(&t->NFuncMon_[0].FuncMonId, src, t->NFuncMon*sizeof(t->NFuncMon_[0].FuncMonId));
}

/**
 * Get "FuncMonId" from "DisFuncMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @param NFuncMon
 * @return Value of "FuncMonId".
 */
static inline CrPsFuncMonId_t getMonDisFuncMonDefCmdFuncMonId(void* p, CrPsNFuncMon_t NFuncMon) {
   DisFuncMonDefCmd_t* t;
   t = (DisFuncMonDefCmd_t*)p;
   return t->NFuncMon_[NFuncMon].FuncMonId;
}

/**
 * Set "FuncMonId" in "DisFuncMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @param NFuncMon
 * @param FuncMonId Value of "FuncMonId" to be set in packet.
 */
static inline void setMonDisFuncMonDefCmdFuncMonId(void* p, CrPsNFuncMon_t NFuncMon, CrPsFuncMonId_t FuncMonId) {
   DisFuncMonDefCmd_t* t;
   t = (DisFuncMonDefCmd_t*)p;
   t->NFuncMon_[NFuncMon].FuncMonId = FuncMonId;
}

/**
 * Get "NFuncMon" from "ProtFuncMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @return Value of "NFuncMon".
 */
static inline CrPsNFuncMon_t getMonProtFuncMonDefCmdNFuncMon(void* p) {
   ProtFuncMonDefCmd_t* t;
   t = (ProtFuncMonDefCmd_t*)p;
   return t->NFuncMon;
}

/**
 * Set "NFuncMon" in "ProtFuncMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @param NFuncMon Value of "NFuncMon" to be set in packet.
 */
static inline void setMonProtFuncMonDefCmdNFuncMon(void* p, CrPsNFuncMon_t NFuncMon) {
   ProtFuncMonDefCmd_t* t;
   t = (ProtFuncMonDefCmd_t*)p;
   t->NFuncMon = NFuncMon;
}

/**
 * Get pointer to "FuncMonId" array from "ProtFuncMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @return Pointer to the start of the FuncMonId array.
 */
static inline CrPsFuncMonId_t* getMonProtFuncMonDefCmdFuncMonIdArray(void* p) {
   ProtFuncMonDefCmd_t* t;
   t = (ProtFuncMonDefCmd_t*)p;
   return &t->NFuncMon_[0].FuncMonId;
}

/**
 * Get "FuncMonId" array from "ProtFuncMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @param dest Pointer to memory location where array data are copied to.
 */
static inline void readMonProtFuncMonDefCmdFuncMonIdArray(void* p, void* dest) {
   ProtFuncMonDefCmd_t* t;
   t = (ProtFuncMonDefCmd_t*)p;
   memcpy(dest, &t->NFuncMon_[0].FuncMonId, t->NFuncMon*sizeof(t->NFuncMon_[0].FuncMonId));
}

/**
 * Set "FuncMonId" array in "ProtFuncMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @param src Pointer to memory location from where array data are copied.
 */
static inline void writeMonProtFuncMonDefCmdFuncMonIdArray(void* p, const void* src) {
   ProtFuncMonDefCmd_t* t;
   t = (ProtFuncMonDefCmd_t*)p;
   memcpy(&t->NFuncMon_[0].FuncMonId, src, t->NFuncMon*sizeof(t->NFuncMon_[0].FuncMonId));
}

/**
 * Get "FuncMonId" from "ProtFuncMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @param NFuncMon
 * @return Value of "FuncMonId".
 */
static inline CrPsFuncMonId_t getMonProtFuncMonDefCmdFuncMonId(void* p, CrPsNFuncMon_t NFuncMon) {
   ProtFuncMonDefCmd_t* t;
   t = (ProtFuncMonDefCmd_t*)p;
   return t->NFuncMon_[NFuncMon].FuncMonId;
}

/**
 * Set "FuncMonId" in "ProtFuncMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @param NFuncMon
 * @param FuncMonId Value of "FuncMonId" to be set in packet.
 */
static inline void setMonProtFuncMonDefCmdFuncMonId(void* p, CrPsNFuncMon_t NFuncMon, CrPsFuncMonId_t FuncMonId) {
   ProtFuncMonDefCmd_t* t;
   t = (ProtFuncMonDefCmd_t*)p;
   t->NFuncMon_[NFuncMon].FuncMonId = FuncMonId;
}

/**
 * Get "FuncMonId" from "UnprotFuncMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @return Value of "FuncMonId".
 */
static inline CrPsFuncMonId_t getMonUnprotFuncMonDefCmdFuncMonId(void* p) {
   UnprotFuncMonDefCmd_t* t;
   t = (UnprotFuncMonDefCmd_t*)p;
   return t->FuncMonId;
}

/**
 * Set "FuncMonId" in "UnprotFuncMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @param FuncMonId Value of "FuncMonId" to be set in packet.
 */
static inline void setMonUnprotFuncMonDefCmdFuncMonId(void* p, CrPsFuncMonId_t FuncMonId) {
   UnprotFuncMonDefCmd_t* t;
   t = (UnprotFuncMonDefCmd_t*)p;
   t->FuncMonId = FuncMonId;
}

/**
 * Get pointer to "FuncMonId" array from "UnprotFuncMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @return Pointer to the start of the FuncMonId array.
 */
static inline CrPsFuncMonId_t* getMonUnprotFuncMonDefCmdFuncMonIdArray(void* p) {
   UnprotFuncMonDefCmd_t* t;
   t = (UnprotFuncMonDefCmd_t*)p;
   return &t->FuncMonId_[0].FuncMonId;
}

/**
 * Get "FuncMonId" array from "UnprotFuncMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @param dest Pointer to memory location where array data are copied to.
 */
static inline void readMonUnprotFuncMonDefCmdFuncMonIdArray(void* p, void* dest) {
   UnprotFuncMonDefCmd_t* t;
   t = (UnprotFuncMonDefCmd_t*)p;
   memcpy(dest, &t->FuncMonId_[0].FuncMonId, t->FuncMonId*sizeof(t->FuncMonId_[0].FuncMonId));
}

/**
 * Set "FuncMonId" array in "UnprotFuncMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @param src Pointer to memory location from where array data are copied.
 */
static inline void writeMonUnprotFuncMonDefCmdFuncMonIdArray(void* p, const void* src) {
   UnprotFuncMonDefCmd_t* t;
   t = (UnprotFuncMonDefCmd_t*)p;
   memcpy(&t->FuncMonId_[0].FuncMonId, src, t->FuncMonId*sizeof(t->FuncMonId_[0].FuncMonId));
}

/**
 * Get "FuncMonId" from "UnprotFuncMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @param FuncMonId
 * @return Value of "FuncMonId".
 */
static inline CrPsFuncMonId_t getMonUnprotFuncMonDefCmdFuncMonId(void* p, CrPsFuncMonId_t FuncMonId) {
   UnprotFuncMonDefCmd_t* t;
   t = (UnprotFuncMonDefCmd_t*)p;
   return t->FuncMonId_[FuncMonId].FuncMonId;
}

/**
 * Set "FuncMonId" in "UnprotFuncMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @param FuncMonId
 * @param FuncMonId Value of "FuncMonId" to be set in packet.
 */
static inline void setMonUnprotFuncMonDefCmdFuncMonId(void* p, CrPsFuncMonId_t FuncMonId, CrPsFuncMonId_t FuncMonId) {
   UnprotFuncMonDefCmd_t* t;
   t = (UnprotFuncMonDefCmd_t*)p;
   t->FuncMonId_[FuncMonId].FuncMonId = FuncMonId;
}

/**
 * Get "NFuncMon" from "DelFuncMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @return Value of "NFuncMon".
 */
static inline CrPsNFuncMon_t getMonDelFuncMonDefCmdNFuncMon(void* p) {
   DelFuncMonDefCmd_t* t;
   t = (DelFuncMonDefCmd_t*)p;
   return t->NFuncMon;
}

/**
 * Set "NFuncMon" in "DelFuncMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @param NFuncMon Value of "NFuncMon" to be set in packet.
 */
static inline void setMonDelFuncMonDefCmdNFuncMon(void* p, CrPsNFuncMon_t NFuncMon) {
   DelFuncMonDefCmd_t* t;
   t = (DelFuncMonDefCmd_t*)p;
   t->NFuncMon = NFuncMon;
}

/**
 * Get pointer to "FuncMonId" array from "DelFuncMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @return Pointer to the start of the FuncMonId array.
 */
static inline CrPsFuncMonId_t* getMonDelFuncMonDefCmdFuncMonIdArray(void* p) {
   DelFuncMonDefCmd_t* t;
   t = (DelFuncMonDefCmd_t*)p;
   return &t->NFuncMon_[0].FuncMonId;
}

/**
 * Get "FuncMonId" array from "DelFuncMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @param dest Pointer to memory location where array data are copied to.
 */
static inline void readMonDelFuncMonDefCmdFuncMonIdArray(void* p, void* dest) {
   DelFuncMonDefCmd_t* t;
   t = (DelFuncMonDefCmd_t*)p;
   memcpy(dest, &t->NFuncMon_[0].FuncMonId, t->NFuncMon*sizeof(t->NFuncMon_[0].FuncMonId));
}

/**
 * Set "FuncMonId" array in "DelFuncMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @param src Pointer to memory location from where array data are copied.
 */
static inline void writeMonDelFuncMonDefCmdFuncMonIdArray(void* p, const void* src) {
   DelFuncMonDefCmd_t* t;
   t = (DelFuncMonDefCmd_t*)p;
   memcpy(&t->NFuncMon_[0].FuncMonId, src, t->NFuncMon*sizeof(t->NFuncMon_[0].FuncMonId));
}

/**
 * Get "FuncMonId" from "DelFuncMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @param NFuncMon
 * @return Value of "FuncMonId".
 */
static inline CrPsFuncMonId_t getMonDelFuncMonDefCmdFuncMonId(void* p, CrPsNFuncMon_t NFuncMon) {
   DelFuncMonDefCmd_t* t;
   t = (DelFuncMonDefCmd_t*)p;
   return t->NFuncMon_[NFuncMon].FuncMonId;
}

/**
 * Set "FuncMonId" in "DelFuncMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @param NFuncMon
 * @param FuncMonId Value of "FuncMonId" to be set in packet.
 */
static inline void setMonDelFuncMonDefCmdFuncMonId(void* p, CrPsNFuncMon_t NFuncMon, CrPsFuncMonId_t FuncMonId) {
   DelFuncMonDefCmd_t* t;
   t = (DelFuncMonDefCmd_t*)p;
   t->NFuncMon_[NFuncMon].FuncMonId = FuncMonId;
}

/**
 * Get "FuncMonId" from "RepFuncMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @return Value of "FuncMonId".
 */
static inline CrPsFuncMonId_t getMonRepFuncMonDefCmdFuncMonId(void* p) {
   RepFuncMonDefCmd_t* t;
   t = (RepFuncMonDefCmd_t*)p;
   return t->FuncMonId;
}

/**
 * Set "FuncMonId" in "RepFuncMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @param FuncMonId Value of "FuncMonId" to be set in packet.
 */
static inline void setMonRepFuncMonDefCmdFuncMonId(void* p, CrPsFuncMonId_t FuncMonId) {
   RepFuncMonDefCmd_t* t;
   t = (RepFuncMonDefCmd_t*)p;
   t->FuncMonId = FuncMonId;
}

/**
 * Get pointer to "FuncMonId" array from "RepFuncMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @return Pointer to the start of the FuncMonId array.
 */
static inline CrPsFuncMonId_t* getMonRepFuncMonDefCmdFuncMonIdArray(void* p) {
   RepFuncMonDefCmd_t* t;
   t = (RepFuncMonDefCmd_t*)p;
   return &t->FuncMonId_[0].FuncMonId;
}

/**
 * Get "FuncMonId" array from "RepFuncMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @param dest Pointer to memory location where array data are copied to.
 */
static inline void readMonRepFuncMonDefCmdFuncMonIdArray(void* p, void* dest) {
   RepFuncMonDefCmd_t* t;
   t = (RepFuncMonDefCmd_t*)p;
   memcpy(dest, &t->FuncMonId_[0].FuncMonId, t->FuncMonId*sizeof(t->FuncMonId_[0].FuncMonId));
}

/**
 * Set "FuncMonId" array in "RepFuncMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @param src Pointer to memory location from where array data are copied.
 */
static inline void writeMonRepFuncMonDefCmdFuncMonIdArray(void* p, const void* src) {
   RepFuncMonDefCmd_t* t;
   t = (RepFuncMonDefCmd_t*)p;
   memcpy(&t->FuncMonId_[0].FuncMonId, src, t->FuncMonId*sizeof(t->FuncMonId_[0].FuncMonId));
}

/**
 * Get "FuncMonId" from "RepFuncMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @param FuncMonId
 * @return Value of "FuncMonId".
 */
static inline CrPsFuncMonId_t getMonRepFuncMonDefCmdFuncMonId(void* p, CrPsFuncMonId_t FuncMonId) {
   RepFuncMonDefCmd_t* t;
   t = (RepFuncMonDefCmd_t*)p;
   return t->FuncMonId_[FuncMonId].FuncMonId;
}

/**
 * Set "FuncMonId" in "RepFuncMonDefCmd" packet.
 * @param p Pointer to the packet.
 * @param FuncMonId
 * @param FuncMonId Value of "FuncMonId" to be set in packet.
 */
static inline void setMonRepFuncMonDefCmdFuncMonId(void* p, CrPsFuncMonId_t FuncMonId, CrPsFuncMonId_t FuncMonId) {
   RepFuncMonDefCmd_t* t;
   t = (RepFuncMonDefCmd_t*)p;
   t->FuncMonId_[FuncMonId].FuncMonId = FuncMonId;
}

/**
 * Get "NParMon" from "RepFuncMonStatRep" packet.
 * @param p Pointer to the packet.
 * @return Value of "NParMon".
 */
static inline CrPsNParMon_t getMonRepFuncMonStatRepNParMon(void* p) {
   RepFuncMonStatRep_t* t;
   t = (RepFuncMonStatRep_t*)p;
   return t->NParMon;
}

/**
 * Set "NParMon" in "RepFuncMonStatRep" packet.
 * @param p Pointer to the packet.
 * @param NParMon Value of "NParMon" to be set in packet.
 */
static inline void setMonRepFuncMonStatRepNParMon(void* p, CrPsNParMon_t NParMon) {
   RepFuncMonStatRep_t* t;
   t = (RepFuncMonStatRep_t*)p;
   t->NParMon = NParMon;
}

/**
 * Get "FuncMonId" from "RepFuncMonStatRep" packet.
 * @param p Pointer to the packet.
 * @param NParMon
 * @return Value of "FuncMonId".
 */
static inline CrPsFuncMonId_t getMonRepFuncMonStatRepFuncMonId(void* p, CrPsNParMon_t NParMon) {
   RepFuncMonStatRep_t* t;
   t = (RepFuncMonStatRep_t*)p;
   return t->NParMon_[NParMon].FuncMonId;
}

/**
 * Set "FuncMonId" in "RepFuncMonStatRep" packet.
 * @param p Pointer to the packet.
 * @param NParMon
 * @param FuncMonId Value of "FuncMonId" to be set in packet.
 */
static inline void setMonRepFuncMonStatRepFuncMonId(void* p, CrPsNParMon_t NParMon, CrPsFuncMonId_t FuncMonId) {
   RepFuncMonStatRep_t* t;
   t = (RepFuncMonStatRep_t*)p;
   t->NParMon_[NParMon].FuncMonId = FuncMonId;
}

/**
 * Get "ProtStatus" from "RepFuncMonStatRep" packet.
 * @param p Pointer to the packet.
 * @param NParMon
 * @return Value of "ProtStatus".
 */
static inline CrPsProtStatus_t getMonRepFuncMonStatRepProtStatus(void* p, CrPsNParMon_t NParMon) {
   RepFuncMonStatRep_t* t;
   t = (RepFuncMonStatRep_t*)p;
   return t->NParMon_[NParMon].ProtStatus;
}

/**
 * Set "ProtStatus" in "RepFuncMonStatRep" packet.
 * @param p Pointer to the packet.
 * @param NParMon
 * @param ProtStatus Value of "ProtStatus" to be set in packet.
 */
static inline void setMonRepFuncMonStatRepProtStatus(void* p, CrPsNParMon_t NParMon, CrPsProtStatus_t ProtStatus) {
   RepFuncMonStatRep_t* t;
   t = (RepFuncMonStatRep_t*)p;
   t->NParMon_[NParMon].ProtStatus = ProtStatus;
}

/**
 * Get "IsEnabled" from "RepFuncMonStatRep" packet.
 * @param p Pointer to the packet.
 * @param NParMon
 * @return Value of "IsEnabled".
 */
static inline CrPsEnDis_t getMonRepFuncMonStatRepIsEnabled(void* p, CrPsNParMon_t NParMon) {
   RepFuncMonStatRep_t* t;
   t = (RepFuncMonStatRep_t*)p;
   return t->NParMon_[NParMon].IsEnabled;
}

/**
 * Set "IsEnabled" in "RepFuncMonStatRep" packet.
 * @param p Pointer to the packet.
 * @param NParMon
 * @param IsEnabled Value of "IsEnabled" to be set in packet.
 */
static inline void setMonRepFuncMonStatRepIsEnabled(void* p, CrPsNParMon_t NParMon, CrPsEnDis_t IsEnabled) {
   RepFuncMonStatRep_t* t;
   t = (RepFuncMonStatRep_t*)p;
   t->NParMon_[NParMon].IsEnabled = IsEnabled;
}

/**
 * Get "FuncMonCheckStatus" from "RepFuncMonStatRep" packet.
 * @param p Pointer to the packet.
 * @param NParMon
 * @return Value of "FuncMonCheckStatus".
 */
static inline CrPsFunctMonCheckStatus_t getMonRepFuncMonStatRepFuncMonCheckStatus(void* p, CrPsNParMon_t NParMon) {
   RepFuncMonStatRep_t* t;
   t = (RepFuncMonStatRep_t*)p;
   return t->NParMon_[NParMon].FuncMonCheckStatus;
}

/**
 * Set "FuncMonCheckStatus" in "RepFuncMonStatRep" packet.
 * @param p Pointer to the packet.
 * @param NParMon
 * @param FuncMonCheckStatus Value of "FuncMonCheckStatus" to be set in
 * packet.
 */
static inline void setMonRepFuncMonStatRepFuncMonCheckStatus(void* p, CrPsNParMon_t NParMon, CrPsFunctMonCheckStatus_t FuncMonCheckStatus) {
   RepFuncMonStatRep_t* t;
   t = (RepFuncMonStatRep_t*)p;
   t->NParMon_[NParMon].FuncMonCheckStatus = FuncMonCheckStatus;
}


/*----------------------------------------------------------------------------*/
#endif /* CRPSPCKTMON_H */
