/**
 * @file
 * @ingroup gen_dp
 *
 * Interface for accessing data pool items.
 *
 * @note This file was generated on 2018-07-14 22:58:14
 * @author Automatically Generated by CORDET Editor
 * @copyright P&P Software GmbH
 */
#ifndef CRPSDPLPT_H_
#define CRPSDPLPT_H_

#include "CrPsTypes.h"
#include "CrPsConstants.h"
#include "CrFwUserConstants.h"
#include "CrFwConstants.h"


/**
 * Type description
 */
typedef struct {
   /**
    * Destination of transfer from LPT Buffer
    */
   CrFwDestSrc_t lptDest[LPT_N_BUF];
   /**
    * Time-out for up-tramsfer to LPT Buffer
    */
   CrPsTimeSec_t lptTimeOut[LPT_N_BUF];
   /**
    * Part size for transfers to/from LPT Buffer
    */
   CrPsSize_t partSize[LPT_N_BUF];
} DpLptParams_t;

/**
 * Type description
 */
typedef struct {
   /**
    * Remaining size of a large packet in the LPT Buffer (part of the large
    * packet not yet down-transferred)
    */
   CrPsSize_t lptRemSize[LPT_N_BUF];
   /**
    * Size of large packet in the LPT Buffer
    */
   CrPsSize_t lptSize[LPT_N_BUF];
   /**
    * Source of the large packet up-transfer to the LPT Buffer
    */
   CrFwDestSrc_t lptSrc[LPT_N_BUF];
   /**
    * Time when last up-transfer command to the LPT Buffer was received
    */
   CrPsTimeSec_t lptTime[LPT_N_BUF];
   /**
    * Number of on-going down-transfers
    */
   CrPsNOfLinks_t nOfDownlinks;
   /**
    * Number of on-going up-transfers
    */
   CrPsNOfLinks_t nOfUplinks;
   /**
    * Part sequence number for the up/down/transfer to/from the LPT Buffer
    */
   CrPsPartSeqNmb_t partSeqNmb[LPT_N_BUF];
} DpLptVars_t;

extern DpLptParams_t dpLptParams;
extern DpLptVars_t dpLptVars;

/**
 * Get the data pool array lptDest (Destination of transfer from LPT Buffer)
 * @return The data pool array lptDest
 */
static inline CrFwDestSrc_t* getDpLptLptDestArray() {
   return &dpLptParams.lptDest[0];
}

/**
 * Get the value of the i-th element in the data pool array lptDest
 * (Destination of transfer from LPT Buffer)
 * @param i Index variable
 * @return The i-th element in the data pool array lptDest
 */
static inline CrFwDestSrc_t getDpLptLptDestItem(int i) {
   return dpLptParams.lptDest[i];
}

/**
 * Set the value of the i-th element in the data pool array lptDest
 * (Destination of transfer from LPT Buffer)
 * @param i Index variable
 * @param lptDest The value to be stored into the i-th element of data pool
 * array lptDest.
 */
static inline void setDpLptLptDestItem(int i, CrFwDestSrc_t lptDest) {
   dpLptParams.lptDest[i] = lptDest;
}

/**
 * Get the data pool array lptTimeOut (Time-out for up-tramsfer to LPT Buffer)
 * @return The data pool array lptTimeOut
 */
static inline CrPsTimeSec_t* getDpLptLptTimeOutArray() {
   return &dpLptParams.lptTimeOut[0];
}

/**
 * Get the value of the i-th element in the data pool array lptTimeOut
 * (Time-out for up-tramsfer to LPT Buffer)
 * @param i Index variable
 * @return The i-th element in the data pool array lptTimeOut
 */
static inline CrPsTimeSec_t getDpLptLptTimeOutItem(int i) {
   return dpLptParams.lptTimeOut[i];
}

/**
 * Set the value of the i-th element in the data pool array lptTimeOut
 * (Time-out for up-tramsfer to LPT Buffer)
 * @param i Index variable
 * @param lptTimeOut The value to be stored into the i-th element of data pool
 * array lptTimeOut.
 */
static inline void setDpLptLptTimeOutItem(int i, CrPsTimeSec_t lptTimeOut) {
   dpLptParams.lptTimeOut[i] = lptTimeOut;
}

/**
 * Get the data pool array partSize (Part size for transfers to/from LPT
 * Buffer)
 * @return The data pool array partSize
 */
static inline CrPsSize_t* getDpLptPartSizeArray() {
   return &dpLptParams.partSize[0];
}

/**
 * Get the value of the i-th element in the data pool array partSize (Part
 * size for transfers to/from LPT Buffer)
 * @param i Index variable
 * @return The i-th element in the data pool array partSize
 */
static inline CrPsSize_t getDpLptPartSizeItem(int i) {
   return dpLptParams.partSize[i];
}

/**
 * Set the value of the i-th element in the data pool array partSize (Part
 * size for transfers to/from LPT Buffer)
 * @param i Index variable
 * @param partSize The value to be stored into the i-th element of data pool
 * array partSize.
 */
static inline void setDpLptPartSizeItem(int i, CrPsSize_t partSize) {
   dpLptParams.partSize[i] = partSize;
}

/**
 * Get the data pool array lptRemSize (Remaining size of a large packet in the
 * LPT Buffer (part of the large packet not yet down-transferred))
 * @return The data pool array lptRemSize
 */
static inline CrPsSize_t* getDpLptLptRemSizeArray() {
   return &dpLptVars.lptRemSize[0];
}

/**
 * Get the value of the i-th element in the data pool array lptRemSize
 * (Remaining size of a large packet in the LPT Buffer (part of the large
 * packet not yet down-transferred))
 * @param i Index variable
 * @return The i-th element in the data pool array lptRemSize
 */
static inline CrPsSize_t getDpLptLptRemSizeItem(int i) {
   return dpLptVars.lptRemSize[i];
}

/**
 * Set the value of the i-th element in the data pool array lptRemSize
 * (Remaining size of a large packet in the LPT Buffer (part of the large
 * packet not yet down-transferred))
 * @param i Index variable
 * @param lptRemSize The value to be stored into the i-th element of data pool
 * array lptRemSize.
 */
static inline void setDpLptLptRemSizeItem(int i, CrPsSize_t lptRemSize) {
   dpLptVars.lptRemSize[i] = lptRemSize;
}

/**
 * Get the data pool array lptSize (Size of large packet in the LPT Buffer)
 * @return The data pool array lptSize
 */
static inline CrPsSize_t* getDpLptLptSizeArray() {
   return &dpLptVars.lptSize[0];
}

/**
 * Get the value of the i-th element in the data pool array lptSize (Size of
 * large packet in the LPT Buffer)
 * @param i Index variable
 * @return The i-th element in the data pool array lptSize
 */
static inline CrPsSize_t getDpLptLptSizeItem(int i) {
   return dpLptVars.lptSize[i];
}

/**
 * Set the value of the i-th element in the data pool array lptSize (Size of
 * large packet in the LPT Buffer)
 * @param i Index variable
 * @param lptSize The value to be stored into the i-th element of data pool
 * array lptSize.
 */
static inline void setDpLptLptSizeItem(int i, CrPsSize_t lptSize) {
   dpLptVars.lptSize[i] = lptSize;
}

/**
 * Get the data pool array lptSrc (Source of the large packet up-transfer to
 * the LPT Buffer)
 * @return The data pool array lptSrc
 */
static inline CrFwDestSrc_t* getDpLptLptSrcArray() {
   return &dpLptVars.lptSrc[0];
}

/**
 * Get the value of the i-th element in the data pool array lptSrc (Source of
 * the large packet up-transfer to the LPT Buffer)
 * @param i Index variable
 * @return The i-th element in the data pool array lptSrc
 */
static inline CrFwDestSrc_t getDpLptLptSrcItem(int i) {
   return dpLptVars.lptSrc[i];
}

/**
 * Set the value of the i-th element in the data pool array lptSrc (Source of
 * the large packet up-transfer to the LPT Buffer)
 * @param i Index variable
 * @param lptSrc The value to be stored into the i-th element of data pool
 * array lptSrc.
 */
static inline void setDpLptLptSrcItem(int i, CrFwDestSrc_t lptSrc) {
   dpLptVars.lptSrc[i] = lptSrc;
}

/**
 * Get the data pool array lptTime (Time when last up-transfer command to the
 * LPT Buffer was received)
 * @return The data pool array lptTime
 */
static inline CrPsTimeSec_t* getDpLptLptTimeArray() {
   return &dpLptVars.lptTime[0];
}

/**
 * Get the value of the i-th element in the data pool array lptTime (Time when
 * last up-transfer command to the LPT Buffer was received)
 * @param i Index variable
 * @return The i-th element in the data pool array lptTime
 */
static inline CrPsTimeSec_t getDpLptLptTimeItem(int i) {
   return dpLptVars.lptTime[i];
}

/**
 * Set the value of the i-th element in the data pool array lptTime (Time when
 * last up-transfer command to the LPT Buffer was received)
 * @param i Index variable
 * @param lptTime The value to be stored into the i-th element of data pool
 * array lptTime.
 */
static inline void setDpLptLptTimeItem(int i, CrPsTimeSec_t lptTime) {
   dpLptVars.lptTime[i] = lptTime;
}

/**
 * Get the value of the data pool item nOfDownlinks (Number of on-going
 * down-transfers)
 * @return The value of data pool item nOfDownlinks
 */
static inline CrPsNOfLinks_t getDpLptNOfDownlinks() {
   return dpLptVars.nOfDownlinks;
}

/**
 * Set the value of the data pool item nOfDownlinks (Number of on-going
 * down-transfers)
 * @param nOfDownlinks The value to be stored into the data pool item
 * nOfDownlinks.
 */
static inline void setDpLptNOfDownlinks(CrPsNOfLinks_t nOfDownlinks) {
   dpLptVars.nOfDownlinks = nOfDownlinks;
}

/**
 * Get the value of the data pool item nOfUplinks (Number of on-going
 * up-transfers)
 * @return The value of data pool item nOfUplinks
 */
static inline CrPsNOfLinks_t getDpLptNOfUplinks() {
   return dpLptVars.nOfUplinks;
}

/**
 * Set the value of the data pool item nOfUplinks (Number of on-going
 * up-transfers)
 * @param nOfUplinks The value to be stored into the data pool item
 * nOfUplinks.
 */
static inline void setDpLptNOfUplinks(CrPsNOfLinks_t nOfUplinks) {
   dpLptVars.nOfUplinks = nOfUplinks;
}

/**
 * Get the data pool array partSeqNmb (Part sequence number for the
 * up/down/transfer to/from the LPT Buffer)
 * @return The data pool array partSeqNmb
 */
static inline CrPsPartSeqNmb_t* getDpLptPartSeqNmbArray() {
   return &dpLptVars.partSeqNmb[0];
}

/**
 * Get the value of the i-th element in the data pool array partSeqNmb (Part
 * sequence number for the up/down/transfer to/from the LPT Buffer)
 * @param i Index variable
 * @return The i-th element in the data pool array partSeqNmb
 */
static inline CrPsPartSeqNmb_t getDpLptPartSeqNmbItem(int i) {
   return dpLptVars.partSeqNmb[i];
}

/**
 * Set the value of the i-th element in the data pool array partSeqNmb (Part
 * sequence number for the up/down/transfer to/from the LPT Buffer)
 * @param i Index variable
 * @param partSeqNmb The value to be stored into the i-th element of data pool
 * array partSeqNmb.
 */
static inline void setDpLptPartSeqNmbItem(int i, CrPsPartSeqNmb_t partSeqNmb) {
   dpLptVars.partSeqNmb[i] = partSeqNmb;
}


/*----------------------------------------------------------------------------*/
#endif /* CRPSDPLPT_H */
