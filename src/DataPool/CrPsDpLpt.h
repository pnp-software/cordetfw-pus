/**
 * @file
 * @ingroup gen_dp
 *
 * Interface for accessing data pool items.
 *
 * @note This file was generated on 2018-07-10 22:24:45
 * @author Automatically Generated by CORDET Editor
 * @copyright P&P Software GmbH
 */
#ifndef CRPSDPLPT_H_
#define CRPSDPLPT_H_

#include "CrPsTypes.h"
#include "CrPsConstants.h"

/**
 * Type description
 */
typedef struct {
   /**
    * Destination of transfer from LPT Buffer
    */
   CrFwDestSrc_t lptDest[LPT_N_BUF];
   /**
    * Time-out for up-tramsfer to LPT Buffer
    */
   CrPsTimeSec_t lptTimeOut[LPT_N_BUF];
   /**
    * Part size for transfers to/from LPT Buffer
    */
   CrPsSize_t partSize[LPT_N_BUF];
} DpLptParams_t;

/**
 * Type description
 */
typedef struct {
   /**
    * Remaining size of a large packet in the LPT Buffer (part of the large
    * packet not yet down-transferred)
    */
   CrPsSize_t lptRemSize[LPT_N_BUF];
   /**
    * Size of large packet in the LPT Buffer
    */
   CrPsSize_t lptSize[LPT_N_BUF];
   /**
    * Source of the large packet up-transfer to the LPT Buffer
    */
   CrFwDestSrc_t lptSrc[LPT_N_BUF];
   /**
    * Time when last up-transfer command to the LPT Buffer was received
    */
   CrPsTimeSec_t lptTime[LPT_N_BUF];
   /**
    * Number of on-going down-transfers
    */
   CrPsNOfLinks_t nOfDownlinks;
   /**
    * Number of on-going up-transfers
    */
   CrPsNOfLinks_t nOfUplinks;
   /**
    * Part sequence number for the up/down/transfer to/from the LPT Buffer
    */
   CrPsPartSeqNmb_t partSeqNmb[LPT_N_BUF];
} DpLptVars_t;

extern DpLptParams_t dpLptParams;
extern DpLptVars_t dpLptVars;

/**
 * Get the datapool array lptDest (Destination of transfer from LPT Buffer)
 * @return The datapool array lptDest
 */
static inline CrFwDestSrc_t* getDplptDestArray() {
   return &dpLptParams.lptDest[0];
}

/**
 * Get the value of the i-th element in the datapool array lptDest
 * (Destination of transfer from LPT Buffer)
 * @param i Index variable
 * @return The i-th element in the datapool array lptDest
 */
static inline CrFwDestSrc_t getDplptDestItem(int i) {
   return dpLptParams.lptDest[i];
}

/**
 * Set the value of the i-th element in the datapool array lptDest
 * (Destination of transfer from LPT Buffer)
 * @param i Index variable
 * @param lptDest The value to be stored into the i-th element of datapool
 * array lptDest.
 */
static inline void setDplptDestItem(int i, CrFwDestSrc_t lptDest) {
   dpLptParams.lptDest[i] = lptDest;
}

/**
 * Get the datapool array lptTimeOut (Time-out for up-tramsfer to LPT Buffer)
 * @return The datapool array lptTimeOut
 */
static inline CrPsTimeSec_t* getDplptTimeOutArray() {
   return &dpLptParams.lptTimeOut[0];
}

/**
 * Get the value of the i-th element in the datapool array lptTimeOut
 * (Time-out for up-tramsfer to LPT Buffer)
 * @param i Index variable
 * @return The i-th element in the datapool array lptTimeOut
 */
static inline CrPsTimeSec_t getDplptTimeOutItem(int i) {
   return dpLptParams.lptTimeOut[i];
}

/**
 * Set the value of the i-th element in the datapool array lptTimeOut
 * (Time-out for up-tramsfer to LPT Buffer)
 * @param i Index variable
 * @param lptTimeOut The value to be stored into the i-th element of datapool
 * array lptTimeOut.
 */
static inline void setDplptTimeOutItem(int i, CrPsTimeSec_t lptTimeOut) {
   dpLptParams.lptTimeOut[i] = lptTimeOut;
}

/**
 * Get the datapool array partSize (Part size for transfers to/from LPT
 * Buffer)
 * @return The datapool array partSize
 */
static inline CrPsSize_t* getDppartSizeArray() {
   return &dpLptParams.partSize[0];
}

/**
 * Get the value of the i-th element in the datapool array partSize (Part size
 * for transfers to/from LPT Buffer)
 * @param i Index variable
 * @return The i-th element in the datapool array partSize
 */
static inline CrPsSize_t getDppartSizeItem(int i) {
   return dpLptParams.partSize[i];
}

/**
 * Set the value of the i-th element in the datapool array partSize (Part size
 * for transfers to/from LPT Buffer)
 * @param i Index variable
 * @param partSize The value to be stored into the i-th element of datapool
 * array partSize.
 */
static inline void setDppartSizeItem(int i, CrPsSize_t partSize) {
   dpLptParams.partSize[i] = partSize;
}

/**
 * Get the datapool array lptRemSize (Remaining size of a large packet in the
 * LPT Buffer (part of the large packet not yet down-transferred))
 * @return The datapool array lptRemSize
 */
static inline CrPsSize_t* getDplptRemSizeArray() {
   return &dpLptVars.lptRemSize[0];
}

/**
 * Get the value of the i-th element in the datapool array lptRemSize
 * (Remaining size of a large packet in the LPT Buffer (part of the large
 * packet not yet down-transferred))
 * @param i Index variable
 * @return The i-th element in the datapool array lptRemSize
 */
static inline CrPsSize_t getDplptRemSizeItem(int i) {
   return dpLptVars.lptRemSize[i];
}

/**
 * Set the value of the i-th element in the datapool array lptRemSize
 * (Remaining size of a large packet in the LPT Buffer (part of the large
 * packet not yet down-transferred))
 * @param i Index variable
 * @param lptRemSize The value to be stored into the i-th element of datapool
 * array lptRemSize.
 */
static inline void setDplptRemSizeItem(int i, CrPsSize_t lptRemSize) {
   dpLptVars.lptRemSize[i] = lptRemSize;
}

/**
 * Get the datapool array lptSize (Size of large packet in the LPT Buffer)
 * @return The datapool array lptSize
 */
static inline CrPsSize_t* getDplptSizeArray() {
   return &dpLptVars.lptSize[0];
}

/**
 * Get the value of the i-th element in the datapool array lptSize (Size of
 * large packet in the LPT Buffer)
 * @param i Index variable
 * @return The i-th element in the datapool array lptSize
 */
static inline CrPsSize_t getDplptSizeItem(int i) {
   return dpLptVars.lptSize[i];
}

/**
 * Set the value of the i-th element in the datapool array lptSize (Size of
 * large packet in the LPT Buffer)
 * @param i Index variable
 * @param lptSize The value to be stored into the i-th element of datapool
 * array lptSize.
 */
static inline void setDplptSizeItem(int i, CrPsSize_t lptSize) {
   dpLptVars.lptSize[i] = lptSize;
}

/**
 * Get the datapool array lptSrc (Source of the large packet up-transfer to
 * the LPT Buffer)
 * @return The datapool array lptSrc
 */
static inline CrFwDestSrc_t* getDplptSrcArray() {
   return &dpLptVars.lptSrc[0];
}

/**
 * Get the value of the i-th element in the datapool array lptSrc (Source of
 * the large packet up-transfer to the LPT Buffer)
 * @param i Index variable
 * @return The i-th element in the datapool array lptSrc
 */
static inline CrFwDestSrc_t getDplptSrcItem(int i) {
   return dpLptVars.lptSrc[i];
}

/**
 * Set the value of the i-th element in the datapool array lptSrc (Source of
 * the large packet up-transfer to the LPT Buffer)
 * @param i Index variable
 * @param lptSrc The value to be stored into the i-th element of datapool
 * array lptSrc.
 */
static inline void setDplptSrcItem(int i, CrFwDestSrc_t lptSrc) {
   dpLptVars.lptSrc[i] = lptSrc;
}

/**
 * Get the datapool array lptTime (Time when last up-transfer command to the
 * LPT Buffer was received)
 * @return The datapool array lptTime
 */
static inline CrPsTimeSec_t* getDplptTimeArray() {
   return &dpLptVars.lptTime[0];
}

/**
 * Get the value of the i-th element in the datapool array lptTime (Time when
 * last up-transfer command to the LPT Buffer was received)
 * @param i Index variable
 * @return The i-th element in the datapool array lptTime
 */
static inline CrPsTimeSec_t getDplptTimeItem(int i) {
   return dpLptVars.lptTime[i];
}

/**
 * Set the value of the i-th element in the datapool array lptTime (Time when
 * last up-transfer command to the LPT Buffer was received)
 * @param i Index variable
 * @param lptTime The value to be stored into the i-th element of datapool
 * array lptTime.
 */
static inline void setDplptTimeItem(int i, CrPsTimeSec_t lptTime) {
   dpLptVars.lptTime[i] = lptTime;
}

/**
 * Get the value of the datapool item nOfDownlinks (Number of on-going
 * down-transfers)
 * @return The value of datapool item nOfDownlinks
 */
static inline CrPsNOfLinks_t getDpnOfDownlinks() {
   return dpLptVars.nOfDownlinks;
}

/**
 * Set the value of the datapool item nOfDownlinks (Number of on-going
 * down-transfers)
 * @param nOfDownlinks The value to be stored into the datapool item
 * nOfDownlinks.
 */
static inline void setDpnOfDownlinks(CrPsNOfLinks_t nOfDownlinks) {
   dpLptVars.nOfDownlinks = nOfDownlinks;
}

/**
 * Get the value of the datapool item nOfUplinks (Number of on-going
 * up-transfers)
 * @return The value of datapool item nOfUplinks
 */
static inline CrPsNOfLinks_t getDpnOfUplinks() {
   return dpLptVars.nOfUplinks;
}

/**
 * Set the value of the datapool item nOfUplinks (Number of on-going
 * up-transfers)
 * @param nOfUplinks The value to be stored into the datapool item nOfUplinks.
 */
static inline void setDpnOfUplinks(CrPsNOfLinks_t nOfUplinks) {
   dpLptVars.nOfUplinks = nOfUplinks;
}

/**
 * Get the datapool array partSeqNmb (Part sequence number for the
 * up/down/transfer to/from the LPT Buffer)
 * @return The datapool array partSeqNmb
 */
static inline CrPsPartSeqNmb_t* getDppartSeqNmbArray() {
   return &dpLptVars.partSeqNmb[0];
}

/**
 * Get the value of the i-th element in the datapool array partSeqNmb (Part
 * sequence number for the up/down/transfer to/from the LPT Buffer)
 * @param i Index variable
 * @return The i-th element in the datapool array partSeqNmb
 */
static inline CrPsPartSeqNmb_t getDppartSeqNmbItem(int i) {
   return dpLptVars.partSeqNmb[i];
}

/**
 * Set the value of the i-th element in the datapool array partSeqNmb (Part
 * sequence number for the up/down/transfer to/from the LPT Buffer)
 * @param i Index variable
 * @param partSeqNmb The value to be stored into the i-th element of datapool
 * array partSeqNmb.
 */
static inline void setDppartSeqNmbItem(int i, CrPsPartSeqNmb_t partSeqNmb) {
   dpLptVars.partSeqNmb[i] = partSeqNmb;
}


/*----------------------------------------------------------------------------*/
#endif /* CRPSDPLPT_H */
