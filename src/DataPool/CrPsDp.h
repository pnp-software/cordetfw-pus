/**
 * @file
 * @ingroup gen_dp
 *
 * Interface for accessing data pool items.
 *
 * @note This file was generated on 2018-07-14 04:04:39
 * @author Automatically Generated by CORDET Editor
 * @copyright P&P Software GmbH
 */
#ifndef CRPSDP_H_
#define CRPSDP_H_

#include "CrPsTypes.h"
#include "CrPsConstants.h"
#include "CrFwUserConstants.h"
#include "CrFwConstants.h"


enum {
   /* Parameters */
   DpIdParamsLowest = 1,
   DpIdParamsHighest = 17,
   DpIddebugVarAddr = 1,
   DpIddest = 2,
   DpIdisEnabled = 3,
   DpIdperiod = 4,
   DpIdsid = 5,
   DpIdlptDest = 6,
   DpIdlptTimeOut = 7,
   DpIdpartSize = 8,
   DpIdmaxRepDelay = 9,
   DpIdservUser = 10,
   DpIdisSubSchedEnabled = 11,
   DpIdisTbsEnabled = 12,
   DpIdnOfTbaInGroup = 13,
   DpIdnOfTbaInSubSched = 14,
   DpIdtimeMargin = 15,
   DpIdAreYouAliveTimeOut = 16,
   DpIdOnBoardConnectDestLst = 17,
   /* Variables */
   DpIdVarsLowest = 9,
   DpIdVarsHighest = 83,
   DpIdisEidEnabled = 9,
   DpIdlastEvtEid_1 = 10,
   DpIdlastEvtEid_2 = 11,
   DpIdlastEvtEid_3 = 12,
   DpIdlastEvtEid_4 = 13,
   DpIdlastEvtTime_1 = 14,
   DpIdlastEvtTime_2 = 15,
   DpIdlastEvtTime_3 = 16,
   DpIdlastEvtTime_4 = 17,
   DpIdnOfDetectedEvts_1 = 18,
   DpIdnOfDetectedEvts_2 = 19,
   DpIdnOfDetectedEvts_3 = 20,
   DpIdnOfDetectedEvts_4 = 21,
   DpIdnOfDisabledEid_1 = 22,
   DpIdnOfDisabledEid_2 = 23,
   DpIdnOfDisabledEid_3 = 24,
   DpIdnOfDisabledEid_4 = 25,
   DpIdnOfGenEvtRep_1 = 26,
   DpIdnOfGenEvtRep_2 = 27,
   DpIdnOfGenEvtRep_3 = 28,
   DpIdnOfGenEvtRep_4 = 29,
   DpIdnOfAllocatedInCmd = 30,
   DpIdnOfAllocatedInRep = 31,
   DpIdnOfAllocatedOutCmp = 32,
   DpIdnOfFailedInCmd = 33,
   DpIdnOfFailedInRep = 34,
   DpIdnOfFailedOutCmp = 35,
   DpIdnOfTotAllocatedInCmd = 36,
   DpIdnOfTotAllocatedInRep = 37,
   DpIdnOfTotAllocatedOutCmp = 38,
   DpIdcycleCnt = 39,
   DpIddebugVar = 40,
   DpIdsampleBufId = 41,
   DpIdlptRemSize = 42,
   DpIdlptSize = 43,
   DpIdlptSrc = 44,
   DpIdlptTime = 45,
   DpIdnOfDownlinks = 46,
   DpIdnOfUplinks = 47,
   DpIdpartSeqNmb = 48,
   DpIdctlRepDelay = 49,
   DpIdctlTimeFirstEntry = 50,
   DpIdfuncMonEnbStatus = 51,
   DpIdnmbAvailFuncMon = 52,
   DpIdnmbAvailParMon = 53,
   DpIdnmbEnbFuncMon = 54,
   DpIdnmbEnbParMon = 55,
   DpIdparMonEnbStatus = 56,
   DpIdfirstTba = 57,
   DpIdisGroupEnabled = 58,
   DpIdisGroupInUse = 59,
   DpIdnOfGroup = 60,
   DpIdnOfSubSched = 61,
   DpIdnOfTba = 62,
   DpIdAreYouAliveSrc = 63,
   DpIdAreYouAliveStart = 64,
   DpIdOnBoardConnectDest = 65,
   DpIdfailCodeAccFailed = 66,
   DpIdfailCodePrgrFailed = 67,
   DpIdfailCodeStartFailed = 68,
   DpIdfailCodeTermFailed = 69,
   DpIdinvDestRerouting = 70,
   DpIdnOfAccFailed = 71,
   DpIdnOfPrgrFailed = 72,
   DpIdnOfReroutingFailed = 73,
   DpIdnOfStartFailed = 74,
   DpIdnOfTermFailed = 75,
   DpIdpcktIdAccFailed = 76,
   DpIdpcktIdPrgrFailed = 77,
   DpIdpcktIdReroutingFailed = 78,
   DpIdpcktIdStartFailed = 79,
   DpIdpcktIdTermFailed = 80,
   DpIdstepPrgrFailed = 81,
   DpIdverFailCode = 82,
   DpIdverFailData = 83
};

/**
 * Get the value of a data pool item by identifier.
 * @param id The data pool item identifier
 * @param dest The address of the target variable where the value gets copied
 * to.
 * @return Number of bytes copied. 0 if id is invalid.
 */
extern size_t getDpValue(CrPsParId_t id, void* dest);
/**
 * Get the value of a data pool item plus meta information by identifier.
 * @param id The data pool item identifier
 * @param dest The address of the target variable where the value gets copied
 * to.
 * @param pElementLength Pointer to where the element size is copied to.
 * @param pNElements Pointer to where the number of elements is copied
 * to.@return Number of bytes copied. 0 if id is invalid.
 */
extern size_t getDpValueEx(CrPsParId_t id, void* dest, size_t* pElementLength, unsigned int* pNElements);
/**
 * Set the value of a data pool item by identifier
 * @param id The data pool item identifier
 * @param src The address of the source variable where the value gets copied
 * from.
 * @return Number of bytes copied. 0 if id is invalid.
 */
extern int setDpValue(CrPsParId_t id, const void* src);
/**
 * Set the value of a data pool item by identifier and get meta information
 * @param id The data pool item identifier
 * @param src The address of the source variable where the value gets copied
 * from.
 * @param dest Pointer to pointer to where the element address is copied
 * to.@param pElementLength Pointer to where the element size is copied to.
 * @param pNElements Pointer to where the number of elements is copied
 * to.@return Number of bytes copied. 0 if id is invalid.
 */
extern int setDpValueEx(CrPsParId_t id, const void* src, void** dest, size_t* pElementLength, unsigned int* pNElements);
/**
 * Get the size of a data pool item by identifier.
 * @param id The data pool item identifier
 * @return The size of the data pool parameter. 0 if id is invalid.
 */
extern size_t getDpSize(CrPsParId_t id);
/**
 * Get the size of a data pool parameter by identifier.
 * @param id The data pool parameter identifier
 * @return The size of the data pool parameter. 0 if id is invalid.
 */
extern size_t getDpParamSize(CrPsParId_t id);
/**
 * Get the size of a data pool variable by identifier.
 * @param id The data pool variable identifier
 * @return The size of the data pool variable. 0 if id is invalid.
 */
extern size_t getDpVarSize(CrPsParId_t id);

/*----------------------------------------------------------------------------*/
#endif /* CRPSDP_H */
