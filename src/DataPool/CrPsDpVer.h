/**
 * @file
 * @ingroup gen_dp
 *
 * Interface for accessing data pool items.
 *
 * @note This file was generated on 2018-07-25 18:43:28
 * @author Automatically Generated by CORDET Editor
 * @copyright P&P Software GmbH
 */
#ifndef CRPSDPVER_H_
#define CRPSDPVER_H_

#include "CrPsTypes.h"
#include "CrPsConstants.h"
#include "CrFwUserConstants.h"
#include "CrFwConstants.h"


/**
 * Type description
 */
typedef struct {
   /**
    * Failure code of last command which failed its Acceptance
    */
   CrPsFailCode_t failCodeAccFailed;
   /**
    * Failure code of last command which failed its Progress Check
    */
   CrPsFailCode_t failCodePrgrFailed;
   /**
    * Failure code of last command which failed its Start Check
    */
   CrPsFailCode_t failCodeStartFailed;
   /**
    * Failure code of last command which failed its Termination
    */
   CrPsFailCode_t failCodeTermFailed;
   /**
    * Destination of last command for which re-routing failed
    */
   CrFwDestSrc_t invDestRerouting;
   /**
    * Number of commands which have failed their Acceptance Check
    */
   CrPsNOfCmd_t nOfAccFailed;
   /**
    * Number of commands which have failed their Progress Action
    */
   CrPsNOfCmd_t nOfPrgrFailed;
   /**
    * Number of commands for which re-routing failed
    */
   CrPsNOfCmd_t nOfReroutingFailed;
   /**
    * Number of commands which have failed their Start Action
    */
   CrPsNOfCmd_t nOfStartFailed;
   /**
    * Number of commands which have failed their Termination Action
    */
   CrPsNOfCmd_t nOfTermFailed;
   /**
    * Packet identifier of last command which failed its Acceptance Check
    */
   CrPsThirteenBit_t pcktIdAccFailed;
   /**
    * Packet identifier of last command which failed its Progress Action
    */
   CrPsThirteenBit_t pcktIdPrgrFailed;
   /**
    * Packet identifier of last command for which re-routing failed
    */
   CrPsThirteenBit_t pcktIdReroutingFailed;
   /**
    * Packet identifier of last command which failed its Start Check
    */
   CrPsThirteenBit_t pcktIdStartFailed;
   /**
    * Packet identifier of last command which failed its Termination
    */
   CrPsThirteenBit_t pcktIdTermFailed;
   /**
    * Step identifier of last command which failed its Progress Check
    */
   CrPsPrgStep_t stepPrgrFailed;
   /**
    * Verification Failure Code
    */
   CrPsFailCode_t verFailCode;
   /**
    * Verification Failure Data (data item of fixed size but variable meaning)
    */
   CrPsFailData_t verFailData;
} DpVerVars_t;

extern DpVerVars_t dpVerVars;

/**
 * Get the value of the data pool item failCodeAccFailed (Failure code of last
 * command which failed its Acceptance)
 * @return The value of data pool item failCodeAccFailed
 */
static inline CrPsFailCode_t getDpVerFailCodeAccFailed() {
   return dpVerVars.failCodeAccFailed;
}

/**
 * Set the value of the data pool item failCodeAccFailed (Failure code of last
 * command which failed its Acceptance)
 * @param failCodeAccFailed The value to be stored into the data pool item
 * failCodeAccFailed.
 */
static inline void setDpVerFailCodeAccFailed(CrPsFailCode_t failCodeAccFailed) {
   dpVerVars.failCodeAccFailed = failCodeAccFailed;
}

/**
 * Get the value of the data pool item failCodePrgrFailed (Failure code of
 * last command which failed its Progress Check)
 * @return The value of data pool item failCodePrgrFailed
 */
static inline CrPsFailCode_t getDpVerFailCodePrgrFailed() {
   return dpVerVars.failCodePrgrFailed;
}

/**
 * Set the value of the data pool item failCodePrgrFailed (Failure code of
 * last command which failed its Progress Check)
 * @param failCodePrgrFailed The value to be stored into the data pool item
 * failCodePrgrFailed.
 */
static inline void setDpVerFailCodePrgrFailed(CrPsFailCode_t failCodePrgrFailed) {
   dpVerVars.failCodePrgrFailed = failCodePrgrFailed;
}

/**
 * Get the value of the data pool item failCodeStartFailed (Failure code of
 * last command which failed its Start Check)
 * @return The value of data pool item failCodeStartFailed
 */
static inline CrPsFailCode_t getDpVerFailCodeStartFailed() {
   return dpVerVars.failCodeStartFailed;
}

/**
 * Set the value of the data pool item failCodeStartFailed (Failure code of
 * last command which failed its Start Check)
 * @param failCodeStartFailed The value to be stored into the data pool item
 * failCodeStartFailed.
 */
static inline void setDpVerFailCodeStartFailed(CrPsFailCode_t failCodeStartFailed) {
   dpVerVars.failCodeStartFailed = failCodeStartFailed;
}

/**
 * Get the value of the data pool item failCodeTermFailed (Failure code of
 * last command which failed its Termination)
 * @return The value of data pool item failCodeTermFailed
 */
static inline CrPsFailCode_t getDpVerFailCodeTermFailed() {
   return dpVerVars.failCodeTermFailed;
}

/**
 * Set the value of the data pool item failCodeTermFailed (Failure code of
 * last command which failed its Termination)
 * @param failCodeTermFailed The value to be stored into the data pool item
 * failCodeTermFailed.
 */
static inline void setDpVerFailCodeTermFailed(CrPsFailCode_t failCodeTermFailed) {
   dpVerVars.failCodeTermFailed = failCodeTermFailed;
}

/**
 * Get the value of the data pool item invDestRerouting (Destination of last
 * command for which re-routing failed)
 * @return The value of data pool item invDestRerouting
 */
static inline CrFwDestSrc_t getDpVerInvDestRerouting() {
   return dpVerVars.invDestRerouting;
}

/**
 * Set the value of the data pool item invDestRerouting (Destination of last
 * command for which re-routing failed)
 * @param invDestRerouting The value to be stored into the data pool item
 * invDestRerouting.
 */
static inline void setDpVerInvDestRerouting(CrFwDestSrc_t invDestRerouting) {
   dpVerVars.invDestRerouting = invDestRerouting;
}

/**
 * Get the value of the data pool item nOfAccFailed (Number of commands which
 * have failed their Acceptance Check)
 * @return The value of data pool item nOfAccFailed
 */
static inline CrPsNOfCmd_t getDpVerNOfAccFailed() {
   return dpVerVars.nOfAccFailed;
}

/**
 * Set the value of the data pool item nOfAccFailed (Number of commands which
 * have failed their Acceptance Check)
 * @param nOfAccFailed The value to be stored into the data pool item
 * nOfAccFailed.
 */
static inline void setDpVerNOfAccFailed(CrPsNOfCmd_t nOfAccFailed) {
   dpVerVars.nOfAccFailed = nOfAccFailed;
}

/**
 * Get the value of the data pool item nOfPrgrFailed (Number of commands which
 * have failed their Progress Action)
 * @return The value of data pool item nOfPrgrFailed
 */
static inline CrPsNOfCmd_t getDpVerNOfPrgrFailed() {
   return dpVerVars.nOfPrgrFailed;
}

/**
 * Set the value of the data pool item nOfPrgrFailed (Number of commands which
 * have failed their Progress Action)
 * @param nOfPrgrFailed The value to be stored into the data pool item
 * nOfPrgrFailed.
 */
static inline void setDpVerNOfPrgrFailed(CrPsNOfCmd_t nOfPrgrFailed) {
   dpVerVars.nOfPrgrFailed = nOfPrgrFailed;
}

/**
 * Get the value of the data pool item nOfReroutingFailed (Number of commands
 * for which re-routing failed)
 * @return The value of data pool item nOfReroutingFailed
 */
static inline CrPsNOfCmd_t getDpVerNOfReroutingFailed() {
   return dpVerVars.nOfReroutingFailed;
}

/**
 * Set the value of the data pool item nOfReroutingFailed (Number of commands
 * for which re-routing failed)
 * @param nOfReroutingFailed The value to be stored into the data pool item
 * nOfReroutingFailed.
 */
static inline void setDpVerNOfReroutingFailed(CrPsNOfCmd_t nOfReroutingFailed) {
   dpVerVars.nOfReroutingFailed = nOfReroutingFailed;
}

/**
 * Get the value of the data pool item nOfStartFailed (Number of commands
 * which have failed their Start Action)
 * @return The value of data pool item nOfStartFailed
 */
static inline CrPsNOfCmd_t getDpVerNOfStartFailed() {
   return dpVerVars.nOfStartFailed;
}

/**
 * Set the value of the data pool item nOfStartFailed (Number of commands
 * which have failed their Start Action)
 * @param nOfStartFailed The value to be stored into the data pool item
 * nOfStartFailed.
 */
static inline void setDpVerNOfStartFailed(CrPsNOfCmd_t nOfStartFailed) {
   dpVerVars.nOfStartFailed = nOfStartFailed;
}

/**
 * Get the value of the data pool item nOfTermFailed (Number of commands which
 * have failed their Termination Action)
 * @return The value of data pool item nOfTermFailed
 */
static inline CrPsNOfCmd_t getDpVerNOfTermFailed() {
   return dpVerVars.nOfTermFailed;
}

/**
 * Set the value of the data pool item nOfTermFailed (Number of commands which
 * have failed their Termination Action)
 * @param nOfTermFailed The value to be stored into the data pool item
 * nOfTermFailed.
 */
static inline void setDpVerNOfTermFailed(CrPsNOfCmd_t nOfTermFailed) {
   dpVerVars.nOfTermFailed = nOfTermFailed;
}

/**
 * Get the value of the data pool item pcktIdAccFailed (Packet identifier of
 * last command which failed its Acceptance Check)
 * @return The value of data pool item pcktIdAccFailed
 */
static inline CrPsThirteenBit_t getDpVerPcktIdAccFailed() {
   return dpVerVars.pcktIdAccFailed;
}

/**
 * Set the value of the data pool item pcktIdAccFailed (Packet identifier of
 * last command which failed its Acceptance Check)
 * @param pcktIdAccFailed The value to be stored into the data pool item
 * pcktIdAccFailed.
 */
static inline void setDpVerPcktIdAccFailed(CrPsThirteenBit_t pcktIdAccFailed) {
   dpVerVars.pcktIdAccFailed = pcktIdAccFailed;
}

/**
 * Get the value of the data pool item pcktIdPrgrFailed (Packet identifier of
 * last command which failed its Progress Action)
 * @return The value of data pool item pcktIdPrgrFailed
 */
static inline CrPsThirteenBit_t getDpVerPcktIdPrgrFailed() {
   return dpVerVars.pcktIdPrgrFailed;
}

/**
 * Set the value of the data pool item pcktIdPrgrFailed (Packet identifier of
 * last command which failed its Progress Action)
 * @param pcktIdPrgrFailed The value to be stored into the data pool item
 * pcktIdPrgrFailed.
 */
static inline void setDpVerPcktIdPrgrFailed(CrPsThirteenBit_t pcktIdPrgrFailed) {
   dpVerVars.pcktIdPrgrFailed = pcktIdPrgrFailed;
}

/**
 * Get the value of the data pool item pcktIdReroutingFailed (Packet
 * identifier of last command for which re-routing failed)
 * @return The value of data pool item pcktIdReroutingFailed
 */
static inline CrPsThirteenBit_t getDpVerPcktIdReroutingFailed() {
   return dpVerVars.pcktIdReroutingFailed;
}

/**
 * Set the value of the data pool item pcktIdReroutingFailed (Packet
 * identifier of last command for which re-routing failed)
 * @param pcktIdReroutingFailed The value to be stored into the data pool item
 * pcktIdReroutingFailed.
 */
static inline void setDpVerPcktIdReroutingFailed(CrPsThirteenBit_t pcktIdReroutingFailed) {
   dpVerVars.pcktIdReroutingFailed = pcktIdReroutingFailed;
}

/**
 * Get the value of the data pool item pcktIdStartFailed (Packet identifier of
 * last command which failed its Start Check)
 * @return The value of data pool item pcktIdStartFailed
 */
static inline CrPsThirteenBit_t getDpVerPcktIdStartFailed() {
   return dpVerVars.pcktIdStartFailed;
}

/**
 * Set the value of the data pool item pcktIdStartFailed (Packet identifier of
 * last command which failed its Start Check)
 * @param pcktIdStartFailed The value to be stored into the data pool item
 * pcktIdStartFailed.
 */
static inline void setDpVerPcktIdStartFailed(CrPsThirteenBit_t pcktIdStartFailed) {
   dpVerVars.pcktIdStartFailed = pcktIdStartFailed;
}

/**
 * Get the value of the data pool item pcktIdTermFailed (Packet identifier of
 * last command which failed its Termination)
 * @return The value of data pool item pcktIdTermFailed
 */
static inline CrPsThirteenBit_t getDpVerPcktIdTermFailed() {
   return dpVerVars.pcktIdTermFailed;
}

/**
 * Set the value of the data pool item pcktIdTermFailed (Packet identifier of
 * last command which failed its Termination)
 * @param pcktIdTermFailed The value to be stored into the data pool item
 * pcktIdTermFailed.
 */
static inline void setDpVerPcktIdTermFailed(CrPsThirteenBit_t pcktIdTermFailed) {
   dpVerVars.pcktIdTermFailed = pcktIdTermFailed;
}

/**
 * Get the value of the data pool item stepPrgrFailed (Step identifier of last
 * command which failed its Progress Check)
 * @return The value of data pool item stepPrgrFailed
 */
static inline CrPsPrgStep_t getDpVerStepPrgrFailed() {
   return dpVerVars.stepPrgrFailed;
}

/**
 * Set the value of the data pool item stepPrgrFailed (Step identifier of last
 * command which failed its Progress Check)
 * @param stepPrgrFailed The value to be stored into the data pool item
 * stepPrgrFailed.
 */
static inline void setDpVerStepPrgrFailed(CrPsPrgStep_t stepPrgrFailed) {
   dpVerVars.stepPrgrFailed = stepPrgrFailed;
}

/**
 * Get the value of the data pool item verFailCode (Verification Failure Code)
 * @return The value of data pool item verFailCode
 */
static inline CrPsFailCode_t getDpVerVerFailCode() {
   return dpVerVars.verFailCode;
}

/**
 * Set the value of the data pool item verFailCode (Verification Failure Code)
 * @param verFailCode The value to be stored into the data pool item
 * verFailCode.
 */
static inline void setDpVerVerFailCode(CrPsFailCode_t verFailCode) {
   dpVerVars.verFailCode = verFailCode;
}

/**
 * Get the value of the data pool item verFailData (Verification Failure Data
 * (data item of fixed size but variable meaning))
 * @return The value of data pool item verFailData
 */
static inline CrPsFailData_t getDpVerVerFailData() {
   return dpVerVars.verFailData;
}

/**
 * Set the value of the data pool item verFailData (Verification Failure Data
 * (data item of fixed size but variable meaning))
 * @param verFailData The value to be stored into the data pool item
 * verFailData.
 */
static inline void setDpVerVerFailData(CrPsFailData_t verFailData) {
   dpVerVars.verFailData = verFailData;
}


/*----------------------------------------------------------------------------*/
#endif /* CRPSDPVER_H */
