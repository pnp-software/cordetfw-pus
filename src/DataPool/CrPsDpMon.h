/**
 * \file
 *
 * Interface for accessing data pool items.
 *
 * \note This file was generated on 2018-06-22 17:45:58
 * \author Automatically Generated by CORDET Editor
 * \copyright P&P Software GmbH
 */
#ifndef CRPSDPMON_H_
#define CRPSDPMON_H_

#include "CrPsTypes.h"
#include "CrPsConstants.h"

/**
 * Type description
 */
typedef struct {
   /**
    * Maximum reporting delay
    */
   CrPsRepDelay_t maxRepDelay;
   /**
    * The default user of the service is the ground.
    */
   CrFwDestSrc_t servUser;
} DpMonParams_t;

/**
 * Type description
 */
typedef struct {
   /**
    * Maximum reporting delay for the CTL in multiples of MON_PER
    */
   CrPsRepDelay_t ctlRepDelay;
   /**
    * Time when first entry has been added to the CTL
    */
   CrFwTimeStamp_t ctlTimeFirstEntry;
   /**
    * Number of available functional monitors in the FMDL
    */
   CrPsFuncMonId_t nmbAvailFuncMon;
   /**
    * Number of available parameter monitors in the PMDL
    */
   CrPsParMonId_t nmbAvailParMon;
   /**
    * Number of enabled functional monitors in the FMDL
    */
   CrPsFuncMonId_t nmbEnbFuncMon;
   /**
    * Number of enabled parameter monitors in the PMDL
    */
   CrPsParMonId_t nmbEnbParMon;
} DpMonVars_t;

extern DpMonParams_t dpMonParams;
extern DpMonVars_t dpMonVars;

/**
 * Initialises Mon
 */
void initDpMon(void);

/**
 * Gets the value of the datapool item maxRepDelay
 * \return The value of datapool item maxRepDelay
 */
static inline CrPsRepDelay_t getDpmaxRepDelay()
{
   return dpMonParams.maxRepDelay;
}

/**
 * Sets the value of the datapool item maxRepDelay
 * \param maxRepDelay The value to be stored into the datapool item
 * maxRepDelay.
 */
static inline void setDpmaxRepDelay(CrPsRepDelay_t maxRepDelay)
{
   dpMonParams.maxRepDelay = maxRepDelay;
}

/**
 * Gets the value of the datapool item servUser
 * \return The value of datapool item servUser
 */
static inline CrFwDestSrc_t getDpservUser()
{
   return dpMonParams.servUser;
}

/**
 * Sets the value of the datapool item servUser
 * \param servUser The value to be stored into the datapool item servUser.
 */
static inline void setDpservUser(CrFwDestSrc_t servUser)
{
   dpMonParams.servUser = servUser;
}

/**
 * Gets the value of the datapool item ctlRepDelay
 * \return The value of datapool item ctlRepDelay
 */
static inline CrPsRepDelay_t getDpctlRepDelay()
{
   return dpMonVars.ctlRepDelay;
}

/**
 * Sets the value of the datapool item ctlRepDelay
 * \param ctlRepDelay The value to be stored into the datapool item
 * ctlRepDelay.
 */
static inline void setDpctlRepDelay(CrPsRepDelay_t ctlRepDelay)
{
   dpMonVars.ctlRepDelay = ctlRepDelay;
}

/**
 * Gets the value of the datapool item ctlTimeFirstEntry
 * \return The value of datapool item ctlTimeFirstEntry
 */
static inline CrFwTimeStamp_t getDpctlTimeFirstEntry()
{
   return dpMonVars.ctlTimeFirstEntry;
}

/**
 * Sets the value of the datapool item ctlTimeFirstEntry
 * \param ctlTimeFirstEntry The value to be stored into the datapool item
 * ctlTimeFirstEntry.
 */
static inline void setDpctlTimeFirstEntry(CrFwTimeStamp_t ctlTimeFirstEntry)
{
   dpMonVars.ctlTimeFirstEntry = ctlTimeFirstEntry;
}


/**
 * Gets the value of the datapool item nmbAvailFuncMon
 * \return The value of datapool item nmbAvailFuncMon
 */
static inline CrPsFuncMonId_t getDpnmbAvailFuncMon()
{
   return dpMonVars.nmbAvailFuncMon;
}

/**
 * Sets the value of the datapool item nmbAvailFuncMon
 * \param nmbAvailFuncMon The value to be stored into the datapool item
 * nmbAvailFuncMon.
 */
static inline void setDpnmbAvailFuncMon(CrPsFuncMonId_t nmbAvailFuncMon)
{
   dpMonVars.nmbAvailFuncMon = nmbAvailFuncMon;
}

/**
 * Gets the value of the datapool item nmbAvailParMon
 * \return The value of datapool item nmbAvailParMon
 */
static inline CrPsParMonId_t getDpnmbAvailParMon()
{
   return dpMonVars.nmbAvailParMon;
}

/**
 * Sets the value of the datapool item nmbAvailParMon
 * \param nmbAvailParMon The value to be stored into the datapool item
 * nmbAvailParMon.
 */
static inline void setDpnmbAvailParMon(CrPsParMonId_t nmbAvailParMon)
{
   dpMonVars.nmbAvailParMon = nmbAvailParMon;
}

/**
 * Gets the value of the datapool item nmbEnbFuncMon
 * \return The value of datapool item nmbEnbFuncMon
 */
static inline CrPsFuncMonId_t getDpnmbEnbFuncMon()
{
   return dpMonVars.nmbEnbFuncMon;
}

/**
 * Sets the value of the datapool item nmbEnbFuncMon
 * \param nmbEnbFuncMon The value to be stored into the datapool item
 * nmbEnbFuncMon.
 */
static inline void setDpnmbEnbFuncMon(CrPsFuncMonId_t nmbEnbFuncMon)
{
   dpMonVars.nmbEnbFuncMon = nmbEnbFuncMon;
}

/**
 * Gets the value of the datapool item nmbEnbParMon
 * \return The value of datapool item nmbEnbParMon
 */
static inline CrPsParMonId_t getDpnmbEnbParMon()
{
   return dpMonVars.nmbEnbParMon;
}

/**
 * Sets the value of the datapool item nmbEnbParMon
 * \param nmbEnbParMon The value to be stored into the datapool item
 * nmbEnbParMon.
 */
static inline void setDpnmbEnbParMon(CrPsParMonId_t nmbEnbParMon)
{
   dpMonVars.nmbEnbParMon = nmbEnbParMon;
}



/*----------------------------------------------------------------------------*/
#endif /* CRPSDPMON_H */
