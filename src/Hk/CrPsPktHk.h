/**
 * \file
 *
 * Interface for accessing fields in packets of service "Hk".
 *
 * \note This file was generated on 2018-06-13 00:06:29
 * \author Automatically Generated by CORDET Editor
 * \copyright P&P Software GmbH
 */
#ifndef CRPSPKTHK_H_
#define CRPSPKTHK_H_

#include <CrPsPkt.h>
#include "CrPsTypes.h"

/**
 * Structure for HkCreHkCmd
 */
typedef struct __attribute__((packed)) _HkCreHkCmd_t {
   /**
    * Packet header.
    */
   TcHeader_t Header;

   /**
    * The structure identifier (SID) of the packet to be created
    */
   SID_t SID;
   
   /**
    * Collection Interval
    */
   CollectInterval_t CollectionInterval;
   
   /**
    * The number of parameters in the housekeeping report to be created
    */
   NPar_t N1;
   
   struct __attribute__((packed)) {
      /**
       * The identifiers of the simply commutated parameters in the report to
       * be created
       */
      ParId_t N1ParamId;
      
   } N1_[0];
   /**
    * The number of super-commutated groups of parameters
    */
   NGroups_t NFA;
   
   struct __attribute__((packed)) {
      /**
       * Super Commutated Sample Repetition Number (repeated NFA times)
       */
      RepNum_t SCSampleRepNum;
      
      /**
       * The number of parameters in the super-commutated group
       */
      NPar_t N2;
      
      struct __attribute__((packed)) {
         /**
          * Parameter ID
          */
         ParId_t N2ParamId;
         
      } N2_[0];
   } NFA_[0];
} HkCreHkCmd_t ;

/**
 * Structure for HkCreDiagCmd
 */
typedef struct __attribute__((packed)) _HkCreDiagCmd_t {
   /**
    * Packet header.
    */
   TcHeader_t Header;

   /**
    * The structure identifier (SID) of the packet to be created
    */
   SID_t SID;
   
   /**
    * Collection Interval
    */
   CollectInterval_t CollectionInterval;
   
   /**
    * The number of parameters in the diagnostic report to be created
    */
   NPar_t N1;
   
   struct __attribute__((packed)) {
      /**
       * The identifiers of the simply commutated parameters in the report to
       * be created
       */
      ParId_t N1ParamId;
      
   } N1_[0];
   /**
    * The number of super-commutated groups of parameters
    */
   NGroups_t NFA;
   
   struct __attribute__((packed)) {
      /**
       * Super Commutated Sample Repetition Number (repeated NFA times)
       */
      RepNum_t SCSampleRepNum;
      
      /**
       * The number of parameters in the super-commutated group
       */
      NPar_t N2;
      
      struct __attribute__((packed)) {
         /**
          * Parameter ID
          */
         ParId_t N2ParamId;
         
      } N2_[0];
   } NFA_[0];
} HkCreDiagCmd_t ;

/**
 * Structure for HkDelHkCmd
 */
typedef struct __attribute__((packed)) _HkDelHkCmd_t {
   /**
    * Packet header.
    */
   TcHeader_t Header;

   /**
    * The number of report definitions to be deleted
    */
   NSID_t N;
   
   struct __attribute__((packed)) {
      /**
       * The structure identifiers (SIDs) of the report definitions to be
       * deleted
       */
      SID_t SID;
      
   } N_[0];
} HkDelHkCmd_t ;

/**
 * Structure for HkDelDiagCmd
 */
typedef struct __attribute__((packed)) _HkDelDiagCmd_t {
   /**
    * Packet header.
    */
   TcHeader_t Header;

   /**
    * The number of report definitions to be deleted
    */
   NSID_t N;
   
   struct __attribute__((packed)) {
      /**
       * The structure identifier (SID) of a report to be deleted
       */
      SID_t SID;
      
   } N_[0];
} HkDelDiagCmd_t ;

/**
 * Structure for HkEnbHkCmd
 */
typedef struct __attribute__((packed)) _HkEnbHkCmd_t {
   /**
    * Packet header.
    */
   TcHeader_t Header;

   /**
    * Number of SIDs to be enabled
    */
   NSID_t N;
   
   /**
    * SID to be enabled
    */
   SID_t SID;
   
} HkEnbHkCmd_t ;

/**
 * Structure for HkDisHkCmd
 */
typedef struct __attribute__((packed)) _HkDisHkCmd_t {
   /**
    * Packet header.
    */
   TcHeader_t Header;

   /**
    * Number of SIDs to be disabled
    */
   NSID_t N;
   
   struct __attribute__((packed)) {
      /**
       * SID to be disabled
       */
      SID_t SID;
      
   } N_[0];
} HkDisHkCmd_t ;

/**
 * Structure for HkEnbDiagCmd
 */
typedef struct __attribute__((packed)) _HkEnbDiagCmd_t {
   /**
    * Packet header.
    */
   TcHeader_t Header;

   /**
    * Number of SIDs to be enabled
    */
   NSID_t N;
   
   /**
    * SID to be enabled
    */
   SID_t SID;
   
} HkEnbDiagCmd_t ;

/**
 * Structure for HkDisDiagCmd
 */
typedef struct __attribute__((packed)) _HkDisDiagCmd_t {
   /**
    * Packet header.
    */
   TcHeader_t Header;

   /**
    * Number of SIDs to be disabled
    */
   NSID_t N;
   
   struct __attribute__((packed)) {
      /**
       * SID to be disabled
       */
      SID_t SID;
      
   } N_[0];
} HkDisDiagCmd_t ;

/**
 * Structure for HkRepStructHkCmd
 */
typedef struct __attribute__((packed)) _HkRepStructHkCmd_t {
   /**
    * Packet header.
    */
   TcHeader_t Header;

   /**
    * Number of SIDs to be reported
    */
   NSID_t N;
   
   struct __attribute__((packed)) {
      /**
       * SID to be reported
       */
      SID_t SID;
      
   } N_[0];
} HkRepStructHkCmd_t ;

/**
 * Structure for HkRepStructHkRep
 */
typedef struct __attribute__((packed)) _HkRepStructHkRep_t {
   /**
    * Packet header.
    */
   TmHeader_t Header;

   /**
    * Structure Identifier
    */
   SID_t SID;
   
   /**
    * Flag indicating whether periodic generation of the packet is enabled or
    * disabled
    */
   EnDis_t PerGenActionStatus;
   
   /**
    * Collection Interval
    */
   CollectInterval_t CollectionInterval;
   
   /**
    * The number of simply commutated parameters
    */
   NPar_t N1;
   
   struct __attribute__((packed)) {
      /**
       * Identifier of a simply commutated parameter
       */
      ParId_t N1ParamId;
      
   } N1_[0];
   /**
    * The number of super-commutated groups of parameters
    */
   NGroups_t NFA;
   
   struct __attribute__((packed)) {
      /**
       * Super Commutated Sample Repetition Number (repeated NFA times)
       */
      RepNum_t SCSampleRepNum;
      
      /**
       * The number of parameters in the super-commutated group
       */
      NPar_t N2;
      
      struct __attribute__((packed)) {
         /**
          * Parameter ID
          */
         ParId_t N2ParamId;
         
      } N2_[0];
   } NFA_[0];
} HkRepStructHkRep_t ;

/**
 * Structure for HkRepStructDiagCmd
 */
typedef struct __attribute__((packed)) _HkRepStructDiagCmd_t {
   /**
    * Packet header.
    */
   TcHeader_t Header;

   /**
    * Number of SIDs to be reported
    */
   NSID_t N;
   
   struct __attribute__((packed)) {
      /**
       * SID to be reported
       */
      SID_t SID;
      
   } N_[0];
} HkRepStructDiagCmd_t ;

/**
 * Structure for HkRepStructDiagRep
 */
typedef struct __attribute__((packed)) _HkRepStructDiagRep_t {
   /**
    * Packet header.
    */
   TmHeader_t Header;

   /**
    * Structure Identifier
    */
   SID_t SID;
   
   /**
    * Flag indicating whether periodic generation of the packet is enabled or
    * disabled
    */
   EnDis_t PerGenActionStatus;
   
   /**
    * Collection Interval
    */
   CollectInterval_t CollectionInterval;
   
   /**
    * The number of simply commutated parameters
    */
   NPar_t N1;
   
   struct __attribute__((packed)) {
      /**
       * Identifier of a simply commutated parameter
       */
      ParId_t N1ParamId;
      
   } N1_[0];
   /**
    * The number of super-commutated groups of parameters
    */
   NGroups_t NFA;
   
   struct __attribute__((packed)) {
      /**
       * Super Commutated Sample Repetition Number (repeated NFA times)
       */
      RepNum_t SCSampleRepNum;
      
      /**
       * The number of parameters in the super-commutated group
       */
      NPar_t N2;
      
      struct __attribute__((packed)) {
         /**
          * Parameter ID
          */
         ParId_t N2ParamId;
         
      } N2_[0];
   } NFA_[0];
} HkRepStructDiagRep_t ;

/**
 * Structure for HkRep
 */
typedef struct __attribute__((packed)) _HkRep_t {
   /**
    * Packet header.
    */
   TmHeader_t Header;

   /**
    * Structure Identifier
    */
   SID_t SID;
   
} HkRep_t ;

/**
 * Structure for HkDiagRep
 */
typedef struct __attribute__((packed)) _HkDiagRep_t {
   /**
    * Packet header.
    */
   TmHeader_t Header;

   /**
    * Structure Identifier
    */
   SID_t SID;
   
} HkDiagRep_t ;

/**
 * Structure for HkOneShotHkCmd
 */
typedef struct __attribute__((packed)) _HkOneShotHkCmd_t {
   /**
    * Packet header.
    */
   TcHeader_t Header;

   /**
    * Number of SIDs to be generated in one-shot mode
    */
   NSID_t N;
   
   struct __attribute__((packed)) {
      /**
       * SID to be generated in one-shot mode
       */
      SID_t SID;
      
   } N_[0];
} HkOneShotHkCmd_t ;

/**
 * Structure for HkOneShotDiagCmd
 */
typedef struct __attribute__((packed)) _HkOneShotDiagCmd_t {
   /**
    * Packet header.
    */
   TcHeader_t Header;

   /**
    * Number of SIDs to be generated in one-shot mode
    */
   NSID_t N;
   
   struct __attribute__((packed)) {
      /**
       * SID to be generated in one-shot mode
       */
      SID_t SID;
      
   } N_[0];
} HkOneShotDiagCmd_t ;

/**
 * Get "SID" from "HkCreHkCmd" packet.
 * \param p Pointer to the packet.
 * \return Value of "SID".
 */
static inline SID_t getHkCreHkCmdSID(void* p)
{
   HkCreHkCmd_t* t;
   t = (HkCreHkCmd_t*)p;
   return t->SID;
}

/**
 * Set "SID" in "HkCreHkCmd" packet.
 * \param p Pointer to the packet.
 * \param SID Value of "SID" to be set in packet.
 */
static inline void setHkCreHkCmdSID(void* p, SID_t SID)
{
   HkCreHkCmd_t* t;
   t = (HkCreHkCmd_t*)p;
   t->SID = SID;
}

/**
 * Get "CollectionInterval" from "HkCreHkCmd" packet.
 * \param p Pointer to the packet.
 * \return Value of "CollectionInterval".
 */
static inline CollectInterval_t getHkCreHkCmdCollectionInterval(void* p)
{
   HkCreHkCmd_t* t;
   t = (HkCreHkCmd_t*)p;
   return t->CollectionInterval;
}

/**
 * Set "CollectionInterval" in "HkCreHkCmd" packet.
 * \param p Pointer to the packet.
 * \param CollectionInterval Value of "CollectionInterval" to be set in
 * packet.
 */
static inline void setHkCreHkCmdCollectionInterval(void* p, CollectInterval_t CollectionInterval)
{
   HkCreHkCmd_t* t;
   t = (HkCreHkCmd_t*)p;
   t->CollectionInterval = CollectionInterval;
}

/**
 * Get "N1" from "HkCreHkCmd" packet.
 * \param p Pointer to the packet.
 * \return Value of "N1".
 */
static inline NPar_t getHkCreHkCmdN1(void* p)
{
   HkCreHkCmd_t* t;
   t = (HkCreHkCmd_t*)p;
   return t->N1;
}

/**
 * Set "N1" in "HkCreHkCmd" packet.
 * \param p Pointer to the packet.
 * \param N1 Value of "N1" to be set in packet.
 */
static inline void setHkCreHkCmdN1(void* p, NPar_t N1)
{
   HkCreHkCmd_t* t;
   t = (HkCreHkCmd_t*)p;
   t->N1 = N1;
}

/**
 * Get pointer to "N1ParamId" array from "HkCreHkCmd" packet.
 * \param p Pointer to the packet.
 * \return Pointer to the start of the N1ParamId array.
 */
static inline ParId_t* getHkCreHkCmdN1ParamIdArray(void* p)
{
   HkCreHkCmd_t* t;
   t = (HkCreHkCmd_t*)p;
   return &t->N1_[0].N1ParamId;
}

/**
 * Get "N1ParamId" array from "HkCreHkCmd" packet.
 * \param p Pointer to the packet.
 * \param dest Pointer to memory location where array data are copied to.
 */
static inline void readHkCreHkCmdN1ParamIdArray(void* p, void* dest)
{
   HkCreHkCmd_t* t;
   t = (HkCreHkCmd_t*)p;
   memcpy(dest, &t->N1_[0].N1ParamId, t->N1*sizeof(t->N1_[0].N1ParamId));
}

/**
 * Set "N1ParamId" array in "HkCreHkCmd" packet.
 * \param p Pointer to the packet.
 * \param src Pointer to memory location from where array data are copied.
 */
static inline void writeHkCreHkCmdN1ParamIdArray(void* p, const void* src)
{
   HkCreHkCmd_t* t;
   t = (HkCreHkCmd_t*)p;
   memcpy(&t->N1_[0].N1ParamId, src, t->N1*sizeof(t->N1_[0].N1ParamId));
}

/**
 * Get "N1ParamId" from "HkCreHkCmd" packet.
 * \param p Pointer to the packet.
 * \param N1
 * \return Value of "N1ParamId".
 */
static inline ParId_t getHkCreHkCmdN1ParamId(void* p, NPar_t N1)
{
   HkCreHkCmd_t* t;
   t = (HkCreHkCmd_t*)p;
   return t->N1_[N1].N1ParamId;
}

/**
 * Set "N1ParamId" in "HkCreHkCmd" packet.
 * \param p Pointer to the packet.
 * \param N1
 * \param N1ParamId Value of "N1ParamId" to be set in packet.
 */
static inline void setHkCreHkCmdN1ParamId(void* p, NPar_t N1, ParId_t N1ParamId)
{
   HkCreHkCmd_t* t;
   t = (HkCreHkCmd_t*)p;
   t->N1_[N1].N1ParamId = N1ParamId;
}

/**
 * Get "NFA" from "HkCreHkCmd" packet.
 * \param p Pointer to the packet.
 * \return Value of "NFA".
 */
static inline NGroups_t getHkCreHkCmdNFA(void* p)
{
   HkCreHkCmd_t* t;
   t = (HkCreHkCmd_t*)p;
   return t->NFA;
}

/**
 * Set "NFA" in "HkCreHkCmd" packet.
 * \param p Pointer to the packet.
 * \param NFA Value of "NFA" to be set in packet.
 */
static inline void setHkCreHkCmdNFA(void* p, NGroups_t NFA)
{
   HkCreHkCmd_t* t;
   t = (HkCreHkCmd_t*)p;
   t->NFA = NFA;
}

/**
 * Get "SCSampleRepNum" from "HkCreHkCmd" packet.
 * \param p Pointer to the packet.
 * \param NFA
 * \return Value of "SCSampleRepNum".
 */
static inline RepNum_t getHkCreHkCmdSCSampleRepNum(void* p, NGroups_t NFA)
{
   HkCreHkCmd_t* t;
   t = (HkCreHkCmd_t*)p;
   return t->NFA_[NFA].SCSampleRepNum;
}

/**
 * Set "SCSampleRepNum" in "HkCreHkCmd" packet.
 * \param p Pointer to the packet.
 * \param NFA
 * \param SCSampleRepNum Value of "SCSampleRepNum" to be set in packet.
 */
static inline void setHkCreHkCmdSCSampleRepNum(void* p, NGroups_t NFA, RepNum_t SCSampleRepNum)
{
   HkCreHkCmd_t* t;
   t = (HkCreHkCmd_t*)p;
   t->NFA_[NFA].SCSampleRepNum = SCSampleRepNum;
}

/**
 * Get "N2" from "HkCreHkCmd" packet.
 * \param p Pointer to the packet.
 * \return Value of "N2".
 */
static inline NPar_t getHkCreHkCmdN2(void* p)
{
   HkCreHkCmd_t* t;
   t = (HkCreHkCmd_t*)p;
   return t->NFA_[NFA].N2;
}

/**
 * Set "N2" in "HkCreHkCmd" packet.
 * \param p Pointer to the packet.
 * \param N2 Value of "N2" to be set in packet.
 */
static inline void setHkCreHkCmdN2(void* p, NPar_t N2)
{
   HkCreHkCmd_t* t;
   t = (HkCreHkCmd_t*)p;
   t->NFA_[NFA].N2 = N2;
}

/**
 * Get pointer to "N2ParamId" array from "HkCreHkCmd" packet.
 * \param p Pointer to the packet.
 * \param NFA
 * \return Pointer to the start of the N2ParamId array.
 */
static inline ParId_t* getHkCreHkCmdN2ParamIdArray(void* p, NGroups_t NFA)
{
   HkCreHkCmd_t* t;
   t = (HkCreHkCmd_t*)p;
   return &t->NFA_[NFA].N2_[0].N2ParamId;
}

/**
 * Get "N2ParamId" array from "HkCreHkCmd" packet.
 * \param p Pointer to the packet.
 * \param NFA
 * \param dest Pointer to memory location where array data are copied to.
 */
static inline void readHkCreHkCmdN2ParamIdArray(void* p, NGroups_t NFA, void* dest)
{
   HkCreHkCmd_t* t;
   t = (HkCreHkCmd_t*)p;
   memcpy(dest, &t->NFA_[NFA].N2_[0].N2ParamId, t->NFA_[NFA].N2*sizeof(t->NFA_[NFA].N2_[0].N2ParamId));
}

/**
 * Set "N2ParamId" array in "HkCreHkCmd" packet.
 * \param p Pointer to the packet.
 * \param NFA
 * \param src Pointer to memory location from where array data are copied.
 */
static inline void writeHkCreHkCmdN2ParamIdArray(void* p, NGroups_t NFA, const void* src)
{
   HkCreHkCmd_t* t;
   t = (HkCreHkCmd_t*)p;
   memcpy(&t->NFA_[NFA].N2_[0].N2ParamId, src, t->NFA_[NFA].N2*sizeof(t->NFA_[NFA].N2_[0].N2ParamId));
}

/**
 * Get "N2ParamId" from "HkCreHkCmd" packet.
 * \param p Pointer to the packet.
 * \param NFA
 * \param N2
 * \return Value of "N2ParamId".
 */
static inline ParId_t getHkCreHkCmdN2ParamId(void* p, NGroups_t NFA, NPar_t N2)
{
   HkCreHkCmd_t* t;
   t = (HkCreHkCmd_t*)p;
   return t->NFA_[NFA].N2_[N2].N2ParamId;
}

/**
 * Set "N2ParamId" in "HkCreHkCmd" packet.
 * \param p Pointer to the packet.
 * \param NFA
 * \param N2
 * \param N2ParamId Value of "N2ParamId" to be set in packet.
 */
static inline void setHkCreHkCmdN2ParamId(void* p, NGroups_t NFA, NPar_t N2, ParId_t N2ParamId)
{
   HkCreHkCmd_t* t;
   t = (HkCreHkCmd_t*)p;
   t->NFA_[NFA].N2_[N2].N2ParamId = N2ParamId;
}

/**
 * Get "SID" from "HkCreDiagCmd" packet.
 * \param p Pointer to the packet.
 * \return Value of "SID".
 */
static inline SID_t getHkCreDiagCmdSID(void* p)
{
   HkCreDiagCmd_t* t;
   t = (HkCreDiagCmd_t*)p;
   return t->SID;
}

/**
 * Set "SID" in "HkCreDiagCmd" packet.
 * \param p Pointer to the packet.
 * \param SID Value of "SID" to be set in packet.
 */
static inline void setHkCreDiagCmdSID(void* p, SID_t SID)
{
   HkCreDiagCmd_t* t;
   t = (HkCreDiagCmd_t*)p;
   t->SID = SID;
}

/**
 * Get "CollectionInterval" from "HkCreDiagCmd" packet.
 * \param p Pointer to the packet.
 * \return Value of "CollectionInterval".
 */
static inline CollectInterval_t getHkCreDiagCmdCollectionInterval(void* p)
{
   HkCreDiagCmd_t* t;
   t = (HkCreDiagCmd_t*)p;
   return t->CollectionInterval;
}

/**
 * Set "CollectionInterval" in "HkCreDiagCmd" packet.
 * \param p Pointer to the packet.
 * \param CollectionInterval Value of "CollectionInterval" to be set in
 * packet.
 */
static inline void setHkCreDiagCmdCollectionInterval(void* p, CollectInterval_t CollectionInterval)
{
   HkCreDiagCmd_t* t;
   t = (HkCreDiagCmd_t*)p;
   t->CollectionInterval = CollectionInterval;
}

/**
 * Get "N1" from "HkCreDiagCmd" packet.
 * \param p Pointer to the packet.
 * \return Value of "N1".
 */
static inline NPar_t getHkCreDiagCmdN1(void* p)
{
   HkCreDiagCmd_t* t;
   t = (HkCreDiagCmd_t*)p;
   return t->N1;
}

/**
 * Set "N1" in "HkCreDiagCmd" packet.
 * \param p Pointer to the packet.
 * \param N1 Value of "N1" to be set in packet.
 */
static inline void setHkCreDiagCmdN1(void* p, NPar_t N1)
{
   HkCreDiagCmd_t* t;
   t = (HkCreDiagCmd_t*)p;
   t->N1 = N1;
}

/**
 * Get pointer to "N1ParamId" array from "HkCreDiagCmd" packet.
 * \param p Pointer to the packet.
 * \return Pointer to the start of the N1ParamId array.
 */
static inline ParId_t* getHkCreDiagCmdN1ParamIdArray(void* p)
{
   HkCreDiagCmd_t* t;
   t = (HkCreDiagCmd_t*)p;
   return &t->N1_[0].N1ParamId;
}

/**
 * Get "N1ParamId" array from "HkCreDiagCmd" packet.
 * \param p Pointer to the packet.
 * \param dest Pointer to memory location where array data are copied to.
 */
static inline void readHkCreDiagCmdN1ParamIdArray(void* p, void* dest)
{
   HkCreDiagCmd_t* t;
   t = (HkCreDiagCmd_t*)p;
   memcpy(dest, &t->N1_[0].N1ParamId, t->N1*sizeof(t->N1_[0].N1ParamId));
}

/**
 * Set "N1ParamId" array in "HkCreDiagCmd" packet.
 * \param p Pointer to the packet.
 * \param src Pointer to memory location from where array data are copied.
 */
static inline void writeHkCreDiagCmdN1ParamIdArray(void* p, const void* src)
{
   HkCreDiagCmd_t* t;
   t = (HkCreDiagCmd_t*)p;
   memcpy(&t->N1_[0].N1ParamId, src, t->N1*sizeof(t->N1_[0].N1ParamId));
}

/**
 * Get "N1ParamId" from "HkCreDiagCmd" packet.
 * \param p Pointer to the packet.
 * \param N1
 * \return Value of "N1ParamId".
 */
static inline ParId_t getHkCreDiagCmdN1ParamId(void* p, NPar_t N1)
{
   HkCreDiagCmd_t* t;
   t = (HkCreDiagCmd_t*)p;
   return t->N1_[N1].N1ParamId;
}

/**
 * Set "N1ParamId" in "HkCreDiagCmd" packet.
 * \param p Pointer to the packet.
 * \param N1
 * \param N1ParamId Value of "N1ParamId" to be set in packet.
 */
static inline void setHkCreDiagCmdN1ParamId(void* p, NPar_t N1, ParId_t N1ParamId)
{
   HkCreDiagCmd_t* t;
   t = (HkCreDiagCmd_t*)p;
   t->N1_[N1].N1ParamId = N1ParamId;
}

/**
 * Get "NFA" from "HkCreDiagCmd" packet.
 * \param p Pointer to the packet.
 * \return Value of "NFA".
 */
static inline NGroups_t getHkCreDiagCmdNFA(void* p)
{
   HkCreDiagCmd_t* t;
   t = (HkCreDiagCmd_t*)p;
   return t->NFA;
}

/**
 * Set "NFA" in "HkCreDiagCmd" packet.
 * \param p Pointer to the packet.
 * \param NFA Value of "NFA" to be set in packet.
 */
static inline void setHkCreDiagCmdNFA(void* p, NGroups_t NFA)
{
   HkCreDiagCmd_t* t;
   t = (HkCreDiagCmd_t*)p;
   t->NFA = NFA;
}

/**
 * Get "SCSampleRepNum" from "HkCreDiagCmd" packet.
 * \param p Pointer to the packet.
 * \param NFA
 * \return Value of "SCSampleRepNum".
 */
static inline RepNum_t getHkCreDiagCmdSCSampleRepNum(void* p, NGroups_t NFA)
{
   HkCreDiagCmd_t* t;
   t = (HkCreDiagCmd_t*)p;
   return t->NFA_[NFA].SCSampleRepNum;
}

/**
 * Set "SCSampleRepNum" in "HkCreDiagCmd" packet.
 * \param p Pointer to the packet.
 * \param NFA
 * \param SCSampleRepNum Value of "SCSampleRepNum" to be set in packet.
 */
static inline void setHkCreDiagCmdSCSampleRepNum(void* p, NGroups_t NFA, RepNum_t SCSampleRepNum)
{
   HkCreDiagCmd_t* t;
   t = (HkCreDiagCmd_t*)p;
   t->NFA_[NFA].SCSampleRepNum = SCSampleRepNum;
}

/**
 * Get "N2" from "HkCreDiagCmd" packet.
 * \param p Pointer to the packet.
 * \return Value of "N2".
 */
static inline NPar_t getHkCreDiagCmdN2(void* p)
{
   HkCreDiagCmd_t* t;
   t = (HkCreDiagCmd_t*)p;
   return t->NFA_[NFA].N2;
}

/**
 * Set "N2" in "HkCreDiagCmd" packet.
 * \param p Pointer to the packet.
 * \param N2 Value of "N2" to be set in packet.
 */
static inline void setHkCreDiagCmdN2(void* p, NPar_t N2)
{
   HkCreDiagCmd_t* t;
   t = (HkCreDiagCmd_t*)p;
   t->NFA_[NFA].N2 = N2;
}

/**
 * Get pointer to "N2ParamId" array from "HkCreDiagCmd" packet.
 * \param p Pointer to the packet.
 * \param NFA
 * \return Pointer to the start of the N2ParamId array.
 */
static inline ParId_t* getHkCreDiagCmdN2ParamIdArray(void* p, NGroups_t NFA)
{
   HkCreDiagCmd_t* t;
   t = (HkCreDiagCmd_t*)p;
   return &t->NFA_[NFA].N2_[0].N2ParamId;
}

/**
 * Get "N2ParamId" array from "HkCreDiagCmd" packet.
 * \param p Pointer to the packet.
 * \param NFA
 * \param dest Pointer to memory location where array data are copied to.
 */
static inline void readHkCreDiagCmdN2ParamIdArray(void* p, NGroups_t NFA, void* dest)
{
   HkCreDiagCmd_t* t;
   t = (HkCreDiagCmd_t*)p;
   memcpy(dest, &t->NFA_[NFA].N2_[0].N2ParamId, t->NFA_[NFA].N2*sizeof(t->NFA_[NFA].N2_[0].N2ParamId));
}

/**
 * Set "N2ParamId" array in "HkCreDiagCmd" packet.
 * \param p Pointer to the packet.
 * \param NFA
 * \param src Pointer to memory location from where array data are copied.
 */
static inline void writeHkCreDiagCmdN2ParamIdArray(void* p, NGroups_t NFA, const void* src)
{
   HkCreDiagCmd_t* t;
   t = (HkCreDiagCmd_t*)p;
   memcpy(&t->NFA_[NFA].N2_[0].N2ParamId, src, t->NFA_[NFA].N2*sizeof(t->NFA_[NFA].N2_[0].N2ParamId));
}

/**
 * Get "N2ParamId" from "HkCreDiagCmd" packet.
 * \param p Pointer to the packet.
 * \param NFA
 * \param N2
 * \return Value of "N2ParamId".
 */
static inline ParId_t getHkCreDiagCmdN2ParamId(void* p, NGroups_t NFA, NPar_t N2)
{
   HkCreDiagCmd_t* t;
   t = (HkCreDiagCmd_t*)p;
   return t->NFA_[NFA].N2_[N2].N2ParamId;
}

/**
 * Set "N2ParamId" in "HkCreDiagCmd" packet.
 * \param p Pointer to the packet.
 * \param NFA
 * \param N2
 * \param N2ParamId Value of "N2ParamId" to be set in packet.
 */
static inline void setHkCreDiagCmdN2ParamId(void* p, NGroups_t NFA, NPar_t N2, ParId_t N2ParamId)
{
   HkCreDiagCmd_t* t;
   t = (HkCreDiagCmd_t*)p;
   t->NFA_[NFA].N2_[N2].N2ParamId = N2ParamId;
}

/**
 * Get "N" from "HkDelHkCmd" packet.
 * \param p Pointer to the packet.
 * \return Value of "N".
 */
static inline NSID_t getHkDelHkCmdN(void* p)
{
   HkDelHkCmd_t* t;
   t = (HkDelHkCmd_t*)p;
   return t->N;
}

/**
 * Set "N" in "HkDelHkCmd" packet.
 * \param p Pointer to the packet.
 * \param N Value of "N" to be set in packet.
 */
static inline void setHkDelHkCmdN(void* p, NSID_t N)
{
   HkDelHkCmd_t* t;
   t = (HkDelHkCmd_t*)p;
   t->N = N;
}

/**
 * Get pointer to "SID" array from "HkDelHkCmd" packet.
 * \param p Pointer to the packet.
 * \return Pointer to the start of the SID array.
 */
static inline SID_t* getHkDelHkCmdSIDArray(void* p)
{
   HkDelHkCmd_t* t;
   t = (HkDelHkCmd_t*)p;
   return &t->N_[0].SID;
}

/**
 * Get "SID" array from "HkDelHkCmd" packet.
 * \param p Pointer to the packet.
 * \param dest Pointer to memory location where array data are copied to.
 */
static inline void readHkDelHkCmdSIDArray(void* p, void* dest)
{
   HkDelHkCmd_t* t;
   t = (HkDelHkCmd_t*)p;
   memcpy(dest, &t->N_[0].SID, t->N*sizeof(t->N_[0].SID));
}

/**
 * Set "SID" array in "HkDelHkCmd" packet.
 * \param p Pointer to the packet.
 * \param src Pointer to memory location from where array data are copied.
 */
static inline void writeHkDelHkCmdSIDArray(void* p, const void* src)
{
   HkDelHkCmd_t* t;
   t = (HkDelHkCmd_t*)p;
   memcpy(&t->N_[0].SID, src, t->N*sizeof(t->N_[0].SID));
}

/**
 * Get "SID" from "HkDelHkCmd" packet.
 * \param p Pointer to the packet.
 * \param N
 * \return Value of "SID".
 */
static inline SID_t getHkDelHkCmdSID(void* p, NSID_t N)
{
   HkDelHkCmd_t* t;
   t = (HkDelHkCmd_t*)p;
   return t->N_[N].SID;
}

/**
 * Set "SID" in "HkDelHkCmd" packet.
 * \param p Pointer to the packet.
 * \param N
 * \param SID Value of "SID" to be set in packet.
 */
static inline void setHkDelHkCmdSID(void* p, NSID_t N, SID_t SID)
{
   HkDelHkCmd_t* t;
   t = (HkDelHkCmd_t*)p;
   t->N_[N].SID = SID;
}

/**
 * Get "N" from "HkDelDiagCmd" packet.
 * \param p Pointer to the packet.
 * \return Value of "N".
 */
static inline NSID_t getHkDelDiagCmdN(void* p)
{
   HkDelDiagCmd_t* t;
   t = (HkDelDiagCmd_t*)p;
   return t->N;
}

/**
 * Set "N" in "HkDelDiagCmd" packet.
 * \param p Pointer to the packet.
 * \param N Value of "N" to be set in packet.
 */
static inline void setHkDelDiagCmdN(void* p, NSID_t N)
{
   HkDelDiagCmd_t* t;
   t = (HkDelDiagCmd_t*)p;
   t->N = N;
}

/**
 * Get pointer to "SID" array from "HkDelDiagCmd" packet.
 * \param p Pointer to the packet.
 * \return Pointer to the start of the SID array.
 */
static inline SID_t* getHkDelDiagCmdSIDArray(void* p)
{
   HkDelDiagCmd_t* t;
   t = (HkDelDiagCmd_t*)p;
   return &t->N_[0].SID;
}

/**
 * Get "SID" array from "HkDelDiagCmd" packet.
 * \param p Pointer to the packet.
 * \param dest Pointer to memory location where array data are copied to.
 */
static inline void readHkDelDiagCmdSIDArray(void* p, void* dest)
{
   HkDelDiagCmd_t* t;
   t = (HkDelDiagCmd_t*)p;
   memcpy(dest, &t->N_[0].SID, t->N*sizeof(t->N_[0].SID));
}

/**
 * Set "SID" array in "HkDelDiagCmd" packet.
 * \param p Pointer to the packet.
 * \param src Pointer to memory location from where array data are copied.
 */
static inline void writeHkDelDiagCmdSIDArray(void* p, const void* src)
{
   HkDelDiagCmd_t* t;
   t = (HkDelDiagCmd_t*)p;
   memcpy(&t->N_[0].SID, src, t->N*sizeof(t->N_[0].SID));
}

/**
 * Get "SID" from "HkDelDiagCmd" packet.
 * \param p Pointer to the packet.
 * \param N
 * \return Value of "SID".
 */
static inline SID_t getHkDelDiagCmdSID(void* p, NSID_t N)
{
   HkDelDiagCmd_t* t;
   t = (HkDelDiagCmd_t*)p;
   return t->N_[N].SID;
}

/**
 * Set "SID" in "HkDelDiagCmd" packet.
 * \param p Pointer to the packet.
 * \param N
 * \param SID Value of "SID" to be set in packet.
 */
static inline void setHkDelDiagCmdSID(void* p, NSID_t N, SID_t SID)
{
   HkDelDiagCmd_t* t;
   t = (HkDelDiagCmd_t*)p;
   t->N_[N].SID = SID;
}

/**
 * Get "N" from "HkEnbHkCmd" packet.
 * \param p Pointer to the packet.
 * \return Value of "N".
 */
static inline NSID_t getHkEnbHkCmdN(void* p)
{
   HkEnbHkCmd_t* t;
   t = (HkEnbHkCmd_t*)p;
   return t->N;
}

/**
 * Set "N" in "HkEnbHkCmd" packet.
 * \param p Pointer to the packet.
 * \param N Value of "N" to be set in packet.
 */
static inline void setHkEnbHkCmdN(void* p, NSID_t N)
{
   HkEnbHkCmd_t* t;
   t = (HkEnbHkCmd_t*)p;
   t->N = N;
}

/**
 * Get "SID" from "HkEnbHkCmd" packet.
 * \param p Pointer to the packet.
 * \return Value of "SID".
 */
static inline SID_t getHkEnbHkCmdSID(void* p)
{
   HkEnbHkCmd_t* t;
   t = (HkEnbHkCmd_t*)p;
   return t->SID;
}

/**
 * Set "SID" in "HkEnbHkCmd" packet.
 * \param p Pointer to the packet.
 * \param SID Value of "SID" to be set in packet.
 */
static inline void setHkEnbHkCmdSID(void* p, SID_t SID)
{
   HkEnbHkCmd_t* t;
   t = (HkEnbHkCmd_t*)p;
   t->SID = SID;
}

/**
 * Get "N" from "HkDisHkCmd" packet.
 * \param p Pointer to the packet.
 * \return Value of "N".
 */
static inline NSID_t getHkDisHkCmdN(void* p)
{
   HkDisHkCmd_t* t;
   t = (HkDisHkCmd_t*)p;
   return t->N;
}

/**
 * Set "N" in "HkDisHkCmd" packet.
 * \param p Pointer to the packet.
 * \param N Value of "N" to be set in packet.
 */
static inline void setHkDisHkCmdN(void* p, NSID_t N)
{
   HkDisHkCmd_t* t;
   t = (HkDisHkCmd_t*)p;
   t->N = N;
}

/**
 * Get pointer to "SID" array from "HkDisHkCmd" packet.
 * \param p Pointer to the packet.
 * \return Pointer to the start of the SID array.
 */
static inline SID_t* getHkDisHkCmdSIDArray(void* p)
{
   HkDisHkCmd_t* t;
   t = (HkDisHkCmd_t*)p;
   return &t->N_[0].SID;
}

/**
 * Get "SID" array from "HkDisHkCmd" packet.
 * \param p Pointer to the packet.
 * \param dest Pointer to memory location where array data are copied to.
 */
static inline void readHkDisHkCmdSIDArray(void* p, void* dest)
{
   HkDisHkCmd_t* t;
   t = (HkDisHkCmd_t*)p;
   memcpy(dest, &t->N_[0].SID, t->N*sizeof(t->N_[0].SID));
}

/**
 * Set "SID" array in "HkDisHkCmd" packet.
 * \param p Pointer to the packet.
 * \param src Pointer to memory location from where array data are copied.
 */
static inline void writeHkDisHkCmdSIDArray(void* p, const void* src)
{
   HkDisHkCmd_t* t;
   t = (HkDisHkCmd_t*)p;
   memcpy(&t->N_[0].SID, src, t->N*sizeof(t->N_[0].SID));
}

/**
 * Get "SID" from "HkDisHkCmd" packet.
 * \param p Pointer to the packet.
 * \param N
 * \return Value of "SID".
 */
static inline SID_t getHkDisHkCmdSID(void* p, NSID_t N)
{
   HkDisHkCmd_t* t;
   t = (HkDisHkCmd_t*)p;
   return t->N_[N].SID;
}

/**
 * Set "SID" in "HkDisHkCmd" packet.
 * \param p Pointer to the packet.
 * \param N
 * \param SID Value of "SID" to be set in packet.
 */
static inline void setHkDisHkCmdSID(void* p, NSID_t N, SID_t SID)
{
   HkDisHkCmd_t* t;
   t = (HkDisHkCmd_t*)p;
   t->N_[N].SID = SID;
}

/**
 * Get "N" from "HkEnbDiagCmd" packet.
 * \param p Pointer to the packet.
 * \return Value of "N".
 */
static inline NSID_t getHkEnbDiagCmdN(void* p)
{
   HkEnbDiagCmd_t* t;
   t = (HkEnbDiagCmd_t*)p;
   return t->N;
}

/**
 * Set "N" in "HkEnbDiagCmd" packet.
 * \param p Pointer to the packet.
 * \param N Value of "N" to be set in packet.
 */
static inline void setHkEnbDiagCmdN(void* p, NSID_t N)
{
   HkEnbDiagCmd_t* t;
   t = (HkEnbDiagCmd_t*)p;
   t->N = N;
}

/**
 * Get "SID" from "HkEnbDiagCmd" packet.
 * \param p Pointer to the packet.
 * \return Value of "SID".
 */
static inline SID_t getHkEnbDiagCmdSID(void* p)
{
   HkEnbDiagCmd_t* t;
   t = (HkEnbDiagCmd_t*)p;
   return t->SID;
}

/**
 * Set "SID" in "HkEnbDiagCmd" packet.
 * \param p Pointer to the packet.
 * \param SID Value of "SID" to be set in packet.
 */
static inline void setHkEnbDiagCmdSID(void* p, SID_t SID)
{
   HkEnbDiagCmd_t* t;
   t = (HkEnbDiagCmd_t*)p;
   t->SID = SID;
}

/**
 * Get "N" from "HkDisDiagCmd" packet.
 * \param p Pointer to the packet.
 * \return Value of "N".
 */
static inline NSID_t getHkDisDiagCmdN(void* p)
{
   HkDisDiagCmd_t* t;
   t = (HkDisDiagCmd_t*)p;
   return t->N;
}

/**
 * Set "N" in "HkDisDiagCmd" packet.
 * \param p Pointer to the packet.
 * \param N Value of "N" to be set in packet.
 */
static inline void setHkDisDiagCmdN(void* p, NSID_t N)
{
   HkDisDiagCmd_t* t;
   t = (HkDisDiagCmd_t*)p;
   t->N = N;
}

/**
 * Get pointer to "SID" array from "HkDisDiagCmd" packet.
 * \param p Pointer to the packet.
 * \return Pointer to the start of the SID array.
 */
static inline SID_t* getHkDisDiagCmdSIDArray(void* p)
{
   HkDisDiagCmd_t* t;
   t = (HkDisDiagCmd_t*)p;
   return &t->N_[0].SID;
}

/**
 * Get "SID" array from "HkDisDiagCmd" packet.
 * \param p Pointer to the packet.
 * \param dest Pointer to memory location where array data are copied to.
 */
static inline void readHkDisDiagCmdSIDArray(void* p, void* dest)
{
   HkDisDiagCmd_t* t;
   t = (HkDisDiagCmd_t*)p;
   memcpy(dest, &t->N_[0].SID, t->N*sizeof(t->N_[0].SID));
}

/**
 * Set "SID" array in "HkDisDiagCmd" packet.
 * \param p Pointer to the packet.
 * \param src Pointer to memory location from where array data are copied.
 */
static inline void writeHkDisDiagCmdSIDArray(void* p, const void* src)
{
   HkDisDiagCmd_t* t;
   t = (HkDisDiagCmd_t*)p;
   memcpy(&t->N_[0].SID, src, t->N*sizeof(t->N_[0].SID));
}

/**
 * Get "SID" from "HkDisDiagCmd" packet.
 * \param p Pointer to the packet.
 * \param N
 * \return Value of "SID".
 */
static inline SID_t getHkDisDiagCmdSID(void* p, NSID_t N)
{
   HkDisDiagCmd_t* t;
   t = (HkDisDiagCmd_t*)p;
   return t->N_[N].SID;
}

/**
 * Set "SID" in "HkDisDiagCmd" packet.
 * \param p Pointer to the packet.
 * \param N
 * \param SID Value of "SID" to be set in packet.
 */
static inline void setHkDisDiagCmdSID(void* p, NSID_t N, SID_t SID)
{
   HkDisDiagCmd_t* t;
   t = (HkDisDiagCmd_t*)p;
   t->N_[N].SID = SID;
}

/**
 * Get "N" from "HkRepStructHkCmd" packet.
 * \param p Pointer to the packet.
 * \return Value of "N".
 */
static inline NSID_t getHkRepStructHkCmdN(void* p)
{
   HkRepStructHkCmd_t* t;
   t = (HkRepStructHkCmd_t*)p;
   return t->N;
}

/**
 * Set "N" in "HkRepStructHkCmd" packet.
 * \param p Pointer to the packet.
 * \param N Value of "N" to be set in packet.
 */
static inline void setHkRepStructHkCmdN(void* p, NSID_t N)
{
   HkRepStructHkCmd_t* t;
   t = (HkRepStructHkCmd_t*)p;
   t->N = N;
}

/**
 * Get pointer to "SID" array from "HkRepStructHkCmd" packet.
 * \param p Pointer to the packet.
 * \return Pointer to the start of the SID array.
 */
static inline SID_t* getHkRepStructHkCmdSIDArray(void* p)
{
   HkRepStructHkCmd_t* t;
   t = (HkRepStructHkCmd_t*)p;
   return &t->N_[0].SID;
}

/**
 * Get "SID" array from "HkRepStructHkCmd" packet.
 * \param p Pointer to the packet.
 * \param dest Pointer to memory location where array data are copied to.
 */
static inline void readHkRepStructHkCmdSIDArray(void* p, void* dest)
{
   HkRepStructHkCmd_t* t;
   t = (HkRepStructHkCmd_t*)p;
   memcpy(dest, &t->N_[0].SID, t->N*sizeof(t->N_[0].SID));
}

/**
 * Set "SID" array in "HkRepStructHkCmd" packet.
 * \param p Pointer to the packet.
 * \param src Pointer to memory location from where array data are copied.
 */
static inline void writeHkRepStructHkCmdSIDArray(void* p, const void* src)
{
   HkRepStructHkCmd_t* t;
   t = (HkRepStructHkCmd_t*)p;
   memcpy(&t->N_[0].SID, src, t->N*sizeof(t->N_[0].SID));
}

/**
 * Get "SID" from "HkRepStructHkCmd" packet.
 * \param p Pointer to the packet.
 * \param N
 * \return Value of "SID".
 */
static inline SID_t getHkRepStructHkCmdSID(void* p, NSID_t N)
{
   HkRepStructHkCmd_t* t;
   t = (HkRepStructHkCmd_t*)p;
   return t->N_[N].SID;
}

/**
 * Set "SID" in "HkRepStructHkCmd" packet.
 * \param p Pointer to the packet.
 * \param N
 * \param SID Value of "SID" to be set in packet.
 */
static inline void setHkRepStructHkCmdSID(void* p, NSID_t N, SID_t SID)
{
   HkRepStructHkCmd_t* t;
   t = (HkRepStructHkCmd_t*)p;
   t->N_[N].SID = SID;
}

/**
 * Get "SID" from "HkRepStructHkRep" packet.
 * \param p Pointer to the packet.
 * \return Value of "SID".
 */
static inline SID_t getHkRepStructHkRepSID(void* p)
{
   HkRepStructHkRep_t* t;
   t = (HkRepStructHkRep_t*)p;
   return t->SID;
}

/**
 * Set "SID" in "HkRepStructHkRep" packet.
 * \param p Pointer to the packet.
 * \param SID Value of "SID" to be set in packet.
 */
static inline void setHkRepStructHkRepSID(void* p, SID_t SID)
{
   HkRepStructHkRep_t* t;
   t = (HkRepStructHkRep_t*)p;
   t->SID = SID;
}

/**
 * Get "PerGenActionStatus" from "HkRepStructHkRep" packet.
 * \param p Pointer to the packet.
 * \return Value of "PerGenActionStatus".
 */
static inline EnDis_t getHkRepStructHkRepPerGenActionStatus(void* p)
{
   HkRepStructHkRep_t* t;
   t = (HkRepStructHkRep_t*)p;
   return t->PerGenActionStatus;
}

/**
 * Set "PerGenActionStatus" in "HkRepStructHkRep" packet.
 * \param p Pointer to the packet.
 * \param PerGenActionStatus Value of "PerGenActionStatus" to be set in
 * packet.
 */
static inline void setHkRepStructHkRepPerGenActionStatus(void* p, EnDis_t PerGenActionStatus)
{
   HkRepStructHkRep_t* t;
   t = (HkRepStructHkRep_t*)p;
   t->PerGenActionStatus = PerGenActionStatus;
}

/**
 * Get "CollectionInterval" from "HkRepStructHkRep" packet.
 * \param p Pointer to the packet.
 * \return Value of "CollectionInterval".
 */
static inline CollectInterval_t getHkRepStructHkRepCollectionInterval(void* p)
{
   HkRepStructHkRep_t* t;
   t = (HkRepStructHkRep_t*)p;
   return t->CollectionInterval;
}

/**
 * Set "CollectionInterval" in "HkRepStructHkRep" packet.
 * \param p Pointer to the packet.
 * \param CollectionInterval Value of "CollectionInterval" to be set in
 * packet.
 */
static inline void setHkRepStructHkRepCollectionInterval(void* p, CollectInterval_t CollectionInterval)
{
   HkRepStructHkRep_t* t;
   t = (HkRepStructHkRep_t*)p;
   t->CollectionInterval = CollectionInterval;
}

/**
 * Get "N1" from "HkRepStructHkRep" packet.
 * \param p Pointer to the packet.
 * \return Value of "N1".
 */
static inline NPar_t getHkRepStructHkRepN1(void* p)
{
   HkRepStructHkRep_t* t;
   t = (HkRepStructHkRep_t*)p;
   return t->N1;
}

/**
 * Set "N1" in "HkRepStructHkRep" packet.
 * \param p Pointer to the packet.
 * \param N1 Value of "N1" to be set in packet.
 */
static inline void setHkRepStructHkRepN1(void* p, NPar_t N1)
{
   HkRepStructHkRep_t* t;
   t = (HkRepStructHkRep_t*)p;
   t->N1 = N1;
}

/**
 * Get pointer to "N1ParamId" array from "HkRepStructHkRep" packet.
 * \param p Pointer to the packet.
 * \return Pointer to the start of the N1ParamId array.
 */
static inline ParId_t* getHkRepStructHkRepN1ParamIdArray(void* p)
{
   HkRepStructHkRep_t* t;
   t = (HkRepStructHkRep_t*)p;
   return &t->N1_[0].N1ParamId;
}

/**
 * Get "N1ParamId" array from "HkRepStructHkRep" packet.
 * \param p Pointer to the packet.
 * \param dest Pointer to memory location where array data are copied to.
 */
static inline void readHkRepStructHkRepN1ParamIdArray(void* p, void* dest)
{
   HkRepStructHkRep_t* t;
   t = (HkRepStructHkRep_t*)p;
   memcpy(dest, &t->N1_[0].N1ParamId, t->N1*sizeof(t->N1_[0].N1ParamId));
}

/**
 * Set "N1ParamId" array in "HkRepStructHkRep" packet.
 * \param p Pointer to the packet.
 * \param src Pointer to memory location from where array data are copied.
 */
static inline void writeHkRepStructHkRepN1ParamIdArray(void* p, const void* src)
{
   HkRepStructHkRep_t* t;
   t = (HkRepStructHkRep_t*)p;
   memcpy(&t->N1_[0].N1ParamId, src, t->N1*sizeof(t->N1_[0].N1ParamId));
}

/**
 * Get "N1ParamId" from "HkRepStructHkRep" packet.
 * \param p Pointer to the packet.
 * \param N1
 * \return Value of "N1ParamId".
 */
static inline ParId_t getHkRepStructHkRepN1ParamId(void* p, NPar_t N1)
{
   HkRepStructHkRep_t* t;
   t = (HkRepStructHkRep_t*)p;
   return t->N1_[N1].N1ParamId;
}

/**
 * Set "N1ParamId" in "HkRepStructHkRep" packet.
 * \param p Pointer to the packet.
 * \param N1
 * \param N1ParamId Value of "N1ParamId" to be set in packet.
 */
static inline void setHkRepStructHkRepN1ParamId(void* p, NPar_t N1, ParId_t N1ParamId)
{
   HkRepStructHkRep_t* t;
   t = (HkRepStructHkRep_t*)p;
   t->N1_[N1].N1ParamId = N1ParamId;
}

/**
 * Get "NFA" from "HkRepStructHkRep" packet.
 * \param p Pointer to the packet.
 * \return Value of "NFA".
 */
static inline NGroups_t getHkRepStructHkRepNFA(void* p)
{
   HkRepStructHkRep_t* t;
   t = (HkRepStructHkRep_t*)p;
   return t->NFA;
}

/**
 * Set "NFA" in "HkRepStructHkRep" packet.
 * \param p Pointer to the packet.
 * \param NFA Value of "NFA" to be set in packet.
 */
static inline void setHkRepStructHkRepNFA(void* p, NGroups_t NFA)
{
   HkRepStructHkRep_t* t;
   t = (HkRepStructHkRep_t*)p;
   t->NFA = NFA;
}

/**
 * Get "SCSampleRepNum" from "HkRepStructHkRep" packet.
 * \param p Pointer to the packet.
 * \param NFA
 * \return Value of "SCSampleRepNum".
 */
static inline RepNum_t getHkRepStructHkRepSCSampleRepNum(void* p, NGroups_t NFA)
{
   HkRepStructHkRep_t* t;
   t = (HkRepStructHkRep_t*)p;
   return t->NFA_[NFA].SCSampleRepNum;
}

/**
 * Set "SCSampleRepNum" in "HkRepStructHkRep" packet.
 * \param p Pointer to the packet.
 * \param NFA
 * \param SCSampleRepNum Value of "SCSampleRepNum" to be set in packet.
 */
static inline void setHkRepStructHkRepSCSampleRepNum(void* p, NGroups_t NFA, RepNum_t SCSampleRepNum)
{
   HkRepStructHkRep_t* t;
   t = (HkRepStructHkRep_t*)p;
   t->NFA_[NFA].SCSampleRepNum = SCSampleRepNum;
}

/**
 * Get "N2" from "HkRepStructHkRep" packet.
 * \param p Pointer to the packet.
 * \return Value of "N2".
 */
static inline NPar_t getHkRepStructHkRepN2(void* p)
{
   HkRepStructHkRep_t* t;
   t = (HkRepStructHkRep_t*)p;
   return t->NFA_[NFA].N2;
}

/**
 * Set "N2" in "HkRepStructHkRep" packet.
 * \param p Pointer to the packet.
 * \param N2 Value of "N2" to be set in packet.
 */
static inline void setHkRepStructHkRepN2(void* p, NPar_t N2)
{
   HkRepStructHkRep_t* t;
   t = (HkRepStructHkRep_t*)p;
   t->NFA_[NFA].N2 = N2;
}

/**
 * Get pointer to "N2ParamId" array from "HkRepStructHkRep" packet.
 * \param p Pointer to the packet.
 * \param NFA
 * \return Pointer to the start of the N2ParamId array.
 */
static inline ParId_t* getHkRepStructHkRepN2ParamIdArray(void* p, NGroups_t NFA)
{
   HkRepStructHkRep_t* t;
   t = (HkRepStructHkRep_t*)p;
   return &t->NFA_[NFA].N2_[0].N2ParamId;
}

/**
 * Get "N2ParamId" array from "HkRepStructHkRep" packet.
 * \param p Pointer to the packet.
 * \param NFA
 * \param dest Pointer to memory location where array data are copied to.
 */
static inline void readHkRepStructHkRepN2ParamIdArray(void* p, NGroups_t NFA, void* dest)
{
   HkRepStructHkRep_t* t;
   t = (HkRepStructHkRep_t*)p;
   memcpy(dest, &t->NFA_[NFA].N2_[0].N2ParamId, t->NFA_[NFA].N2*sizeof(t->NFA_[NFA].N2_[0].N2ParamId));
}

/**
 * Set "N2ParamId" array in "HkRepStructHkRep" packet.
 * \param p Pointer to the packet.
 * \param NFA
 * \param src Pointer to memory location from where array data are copied.
 */
static inline void writeHkRepStructHkRepN2ParamIdArray(void* p, NGroups_t NFA, const void* src)
{
   HkRepStructHkRep_t* t;
   t = (HkRepStructHkRep_t*)p;
   memcpy(&t->NFA_[NFA].N2_[0].N2ParamId, src, t->NFA_[NFA].N2*sizeof(t->NFA_[NFA].N2_[0].N2ParamId));
}

/**
 * Get "N2ParamId" from "HkRepStructHkRep" packet.
 * \param p Pointer to the packet.
 * \param NFA
 * \param N2
 * \return Value of "N2ParamId".
 */
static inline ParId_t getHkRepStructHkRepN2ParamId(void* p, NGroups_t NFA, NPar_t N2)
{
   HkRepStructHkRep_t* t;
   t = (HkRepStructHkRep_t*)p;
   return t->NFA_[NFA].N2_[N2].N2ParamId;
}

/**
 * Set "N2ParamId" in "HkRepStructHkRep" packet.
 * \param p Pointer to the packet.
 * \param NFA
 * \param N2
 * \param N2ParamId Value of "N2ParamId" to be set in packet.
 */
static inline void setHkRepStructHkRepN2ParamId(void* p, NGroups_t NFA, NPar_t N2, ParId_t N2ParamId)
{
   HkRepStructHkRep_t* t;
   t = (HkRepStructHkRep_t*)p;
   t->NFA_[NFA].N2_[N2].N2ParamId = N2ParamId;
}

/**
 * Get "N" from "HkRepStructDiagCmd" packet.
 * \param p Pointer to the packet.
 * \return Value of "N".
 */
static inline NSID_t getHkRepStructDiagCmdN(void* p)
{
   HkRepStructDiagCmd_t* t;
   t = (HkRepStructDiagCmd_t*)p;
   return t->N;
}

/**
 * Set "N" in "HkRepStructDiagCmd" packet.
 * \param p Pointer to the packet.
 * \param N Value of "N" to be set in packet.
 */
static inline void setHkRepStructDiagCmdN(void* p, NSID_t N)
{
   HkRepStructDiagCmd_t* t;
   t = (HkRepStructDiagCmd_t*)p;
   t->N = N;
}

/**
 * Get pointer to "SID" array from "HkRepStructDiagCmd" packet.
 * \param p Pointer to the packet.
 * \return Pointer to the start of the SID array.
 */
static inline SID_t* getHkRepStructDiagCmdSIDArray(void* p)
{
   HkRepStructDiagCmd_t* t;
   t = (HkRepStructDiagCmd_t*)p;
   return &t->N_[0].SID;
}

/**
 * Get "SID" array from "HkRepStructDiagCmd" packet.
 * \param p Pointer to the packet.
 * \param dest Pointer to memory location where array data are copied to.
 */
static inline void readHkRepStructDiagCmdSIDArray(void* p, void* dest)
{
   HkRepStructDiagCmd_t* t;
   t = (HkRepStructDiagCmd_t*)p;
   memcpy(dest, &t->N_[0].SID, t->N*sizeof(t->N_[0].SID));
}

/**
 * Set "SID" array in "HkRepStructDiagCmd" packet.
 * \param p Pointer to the packet.
 * \param src Pointer to memory location from where array data are copied.
 */
static inline void writeHkRepStructDiagCmdSIDArray(void* p, const void* src)
{
   HkRepStructDiagCmd_t* t;
   t = (HkRepStructDiagCmd_t*)p;
   memcpy(&t->N_[0].SID, src, t->N*sizeof(t->N_[0].SID));
}

/**
 * Get "SID" from "HkRepStructDiagCmd" packet.
 * \param p Pointer to the packet.
 * \param N
 * \return Value of "SID".
 */
static inline SID_t getHkRepStructDiagCmdSID(void* p, NSID_t N)
{
   HkRepStructDiagCmd_t* t;
   t = (HkRepStructDiagCmd_t*)p;
   return t->N_[N].SID;
}

/**
 * Set "SID" in "HkRepStructDiagCmd" packet.
 * \param p Pointer to the packet.
 * \param N
 * \param SID Value of "SID" to be set in packet.
 */
static inline void setHkRepStructDiagCmdSID(void* p, NSID_t N, SID_t SID)
{
   HkRepStructDiagCmd_t* t;
   t = (HkRepStructDiagCmd_t*)p;
   t->N_[N].SID = SID;
}

/**
 * Get "SID" from "HkRepStructDiagRep" packet.
 * \param p Pointer to the packet.
 * \return Value of "SID".
 */
static inline SID_t getHkRepStructDiagRepSID(void* p)
{
   HkRepStructDiagRep_t* t;
   t = (HkRepStructDiagRep_t*)p;
   return t->SID;
}

/**
 * Set "SID" in "HkRepStructDiagRep" packet.
 * \param p Pointer to the packet.
 * \param SID Value of "SID" to be set in packet.
 */
static inline void setHkRepStructDiagRepSID(void* p, SID_t SID)
{
   HkRepStructDiagRep_t* t;
   t = (HkRepStructDiagRep_t*)p;
   t->SID = SID;
}

/**
 * Get "PerGenActionStatus" from "HkRepStructDiagRep" packet.
 * \param p Pointer to the packet.
 * \return Value of "PerGenActionStatus".
 */
static inline EnDis_t getHkRepStructDiagRepPerGenActionStatus(void* p)
{
   HkRepStructDiagRep_t* t;
   t = (HkRepStructDiagRep_t*)p;
   return t->PerGenActionStatus;
}

/**
 * Set "PerGenActionStatus" in "HkRepStructDiagRep" packet.
 * \param p Pointer to the packet.
 * \param PerGenActionStatus Value of "PerGenActionStatus" to be set in
 * packet.
 */
static inline void setHkRepStructDiagRepPerGenActionStatus(void* p, EnDis_t PerGenActionStatus)
{
   HkRepStructDiagRep_t* t;
   t = (HkRepStructDiagRep_t*)p;
   t->PerGenActionStatus = PerGenActionStatus;
}

/**
 * Get "CollectionInterval" from "HkRepStructDiagRep" packet.
 * \param p Pointer to the packet.
 * \return Value of "CollectionInterval".
 */
static inline CollectInterval_t getHkRepStructDiagRepCollectionInterval(void* p)
{
   HkRepStructDiagRep_t* t;
   t = (HkRepStructDiagRep_t*)p;
   return t->CollectionInterval;
}

/**
 * Set "CollectionInterval" in "HkRepStructDiagRep" packet.
 * \param p Pointer to the packet.
 * \param CollectionInterval Value of "CollectionInterval" to be set in
 * packet.
 */
static inline void setHkRepStructDiagRepCollectionInterval(void* p, CollectInterval_t CollectionInterval)
{
   HkRepStructDiagRep_t* t;
   t = (HkRepStructDiagRep_t*)p;
   t->CollectionInterval = CollectionInterval;
}

/**
 * Get "N1" from "HkRepStructDiagRep" packet.
 * \param p Pointer to the packet.
 * \return Value of "N1".
 */
static inline NPar_t getHkRepStructDiagRepN1(void* p)
{
   HkRepStructDiagRep_t* t;
   t = (HkRepStructDiagRep_t*)p;
   return t->N1;
}

/**
 * Set "N1" in "HkRepStructDiagRep" packet.
 * \param p Pointer to the packet.
 * \param N1 Value of "N1" to be set in packet.
 */
static inline void setHkRepStructDiagRepN1(void* p, NPar_t N1)
{
   HkRepStructDiagRep_t* t;
   t = (HkRepStructDiagRep_t*)p;
   t->N1 = N1;
}

/**
 * Get pointer to "N1ParamId" array from "HkRepStructDiagRep" packet.
 * \param p Pointer to the packet.
 * \return Pointer to the start of the N1ParamId array.
 */
static inline ParId_t* getHkRepStructDiagRepN1ParamIdArray(void* p)
{
   HkRepStructDiagRep_t* t;
   t = (HkRepStructDiagRep_t*)p;
   return &t->N1_[0].N1ParamId;
}

/**
 * Get "N1ParamId" array from "HkRepStructDiagRep" packet.
 * \param p Pointer to the packet.
 * \param dest Pointer to memory location where array data are copied to.
 */
static inline void readHkRepStructDiagRepN1ParamIdArray(void* p, void* dest)
{
   HkRepStructDiagRep_t* t;
   t = (HkRepStructDiagRep_t*)p;
   memcpy(dest, &t->N1_[0].N1ParamId, t->N1*sizeof(t->N1_[0].N1ParamId));
}

/**
 * Set "N1ParamId" array in "HkRepStructDiagRep" packet.
 * \param p Pointer to the packet.
 * \param src Pointer to memory location from where array data are copied.
 */
static inline void writeHkRepStructDiagRepN1ParamIdArray(void* p, const void* src)
{
   HkRepStructDiagRep_t* t;
   t = (HkRepStructDiagRep_t*)p;
   memcpy(&t->N1_[0].N1ParamId, src, t->N1*sizeof(t->N1_[0].N1ParamId));
}

/**
 * Get "N1ParamId" from "HkRepStructDiagRep" packet.
 * \param p Pointer to the packet.
 * \param N1
 * \return Value of "N1ParamId".
 */
static inline ParId_t getHkRepStructDiagRepN1ParamId(void* p, NPar_t N1)
{
   HkRepStructDiagRep_t* t;
   t = (HkRepStructDiagRep_t*)p;
   return t->N1_[N1].N1ParamId;
}

/**
 * Set "N1ParamId" in "HkRepStructDiagRep" packet.
 * \param p Pointer to the packet.
 * \param N1
 * \param N1ParamId Value of "N1ParamId" to be set in packet.
 */
static inline void setHkRepStructDiagRepN1ParamId(void* p, NPar_t N1, ParId_t N1ParamId)
{
   HkRepStructDiagRep_t* t;
   t = (HkRepStructDiagRep_t*)p;
   t->N1_[N1].N1ParamId = N1ParamId;
}

/**
 * Get "NFA" from "HkRepStructDiagRep" packet.
 * \param p Pointer to the packet.
 * \return Value of "NFA".
 */
static inline NGroups_t getHkRepStructDiagRepNFA(void* p)
{
   HkRepStructDiagRep_t* t;
   t = (HkRepStructDiagRep_t*)p;
   return t->NFA;
}

/**
 * Set "NFA" in "HkRepStructDiagRep" packet.
 * \param p Pointer to the packet.
 * \param NFA Value of "NFA" to be set in packet.
 */
static inline void setHkRepStructDiagRepNFA(void* p, NGroups_t NFA)
{
   HkRepStructDiagRep_t* t;
   t = (HkRepStructDiagRep_t*)p;
   t->NFA = NFA;
}

/**
 * Get "SCSampleRepNum" from "HkRepStructDiagRep" packet.
 * \param p Pointer to the packet.
 * \param NFA
 * \return Value of "SCSampleRepNum".
 */
static inline RepNum_t getHkRepStructDiagRepSCSampleRepNum(void* p, NGroups_t NFA)
{
   HkRepStructDiagRep_t* t;
   t = (HkRepStructDiagRep_t*)p;
   return t->NFA_[NFA].SCSampleRepNum;
}

/**
 * Set "SCSampleRepNum" in "HkRepStructDiagRep" packet.
 * \param p Pointer to the packet.
 * \param NFA
 * \param SCSampleRepNum Value of "SCSampleRepNum" to be set in packet.
 */
static inline void setHkRepStructDiagRepSCSampleRepNum(void* p, NGroups_t NFA, RepNum_t SCSampleRepNum)
{
   HkRepStructDiagRep_t* t;
   t = (HkRepStructDiagRep_t*)p;
   t->NFA_[NFA].SCSampleRepNum = SCSampleRepNum;
}

/**
 * Get "N2" from "HkRepStructDiagRep" packet.
 * \param p Pointer to the packet.
 * \return Value of "N2".
 */
static inline NPar_t getHkRepStructDiagRepN2(void* p)
{
   HkRepStructDiagRep_t* t;
   t = (HkRepStructDiagRep_t*)p;
   return t->NFA_[NFA].N2;
}

/**
 * Set "N2" in "HkRepStructDiagRep" packet.
 * \param p Pointer to the packet.
 * \param N2 Value of "N2" to be set in packet.
 */
static inline void setHkRepStructDiagRepN2(void* p, NPar_t N2)
{
   HkRepStructDiagRep_t* t;
   t = (HkRepStructDiagRep_t*)p;
   t->NFA_[NFA].N2 = N2;
}

/**
 * Get pointer to "N2ParamId" array from "HkRepStructDiagRep" packet.
 * \param p Pointer to the packet.
 * \param NFA
 * \return Pointer to the start of the N2ParamId array.
 */
static inline ParId_t* getHkRepStructDiagRepN2ParamIdArray(void* p, NGroups_t NFA)
{
   HkRepStructDiagRep_t* t;
   t = (HkRepStructDiagRep_t*)p;
   return &t->NFA_[NFA].N2_[0].N2ParamId;
}

/**
 * Get "N2ParamId" array from "HkRepStructDiagRep" packet.
 * \param p Pointer to the packet.
 * \param NFA
 * \param dest Pointer to memory location where array data are copied to.
 */
static inline void readHkRepStructDiagRepN2ParamIdArray(void* p, NGroups_t NFA, void* dest)
{
   HkRepStructDiagRep_t* t;
   t = (HkRepStructDiagRep_t*)p;
   memcpy(dest, &t->NFA_[NFA].N2_[0].N2ParamId, t->NFA_[NFA].N2*sizeof(t->NFA_[NFA].N2_[0].N2ParamId));
}

/**
 * Set "N2ParamId" array in "HkRepStructDiagRep" packet.
 * \param p Pointer to the packet.
 * \param NFA
 * \param src Pointer to memory location from where array data are copied.
 */
static inline void writeHkRepStructDiagRepN2ParamIdArray(void* p, NGroups_t NFA, const void* src)
{
   HkRepStructDiagRep_t* t;
   t = (HkRepStructDiagRep_t*)p;
   memcpy(&t->NFA_[NFA].N2_[0].N2ParamId, src, t->NFA_[NFA].N2*sizeof(t->NFA_[NFA].N2_[0].N2ParamId));
}

/**
 * Get "N2ParamId" from "HkRepStructDiagRep" packet.
 * \param p Pointer to the packet.
 * \param NFA
 * \param N2
 * \return Value of "N2ParamId".
 */
static inline ParId_t getHkRepStructDiagRepN2ParamId(void* p, NGroups_t NFA, NPar_t N2)
{
   HkRepStructDiagRep_t* t;
   t = (HkRepStructDiagRep_t*)p;
   return t->NFA_[NFA].N2_[N2].N2ParamId;
}

/**
 * Set "N2ParamId" in "HkRepStructDiagRep" packet.
 * \param p Pointer to the packet.
 * \param NFA
 * \param N2
 * \param N2ParamId Value of "N2ParamId" to be set in packet.
 */
static inline void setHkRepStructDiagRepN2ParamId(void* p, NGroups_t NFA, NPar_t N2, ParId_t N2ParamId)
{
   HkRepStructDiagRep_t* t;
   t = (HkRepStructDiagRep_t*)p;
   t->NFA_[NFA].N2_[N2].N2ParamId = N2ParamId;
}

/**
 * Get "SID" from "HkRep" packet.
 * \param p Pointer to the packet.
 * \return Value of "SID".
 */
static inline SID_t getHkRepSID(void* p)
{
   HkRep_t* t;
   t = (HkRep_t*)p;
   return t->SID;
}

/**
 * Set "SID" in "HkRep" packet.
 * \param p Pointer to the packet.
 * \param SID Value of "SID" to be set in packet.
 */
static inline void setHkRepSID(void* p, SID_t SID)
{
   HkRep_t* t;
   t = (HkRep_t*)p;
   t->SID = SID;
}

/**
 * Get "SID" from "HkDiagRep" packet.
 * \param p Pointer to the packet.
 * \return Value of "SID".
 */
static inline SID_t getHkDiagRepSID(void* p)
{
   HkDiagRep_t* t;
   t = (HkDiagRep_t*)p;
   return t->SID;
}

/**
 * Set "SID" in "HkDiagRep" packet.
 * \param p Pointer to the packet.
 * \param SID Value of "SID" to be set in packet.
 */
static inline void setHkDiagRepSID(void* p, SID_t SID)
{
   HkDiagRep_t* t;
   t = (HkDiagRep_t*)p;
   t->SID = SID;
}

/**
 * Get "N" from "HkOneShotHkCmd" packet.
 * \param p Pointer to the packet.
 * \return Value of "N".
 */
static inline NSID_t getHkOneShotHkCmdN(void* p)
{
   HkOneShotHkCmd_t* t;
   t = (HkOneShotHkCmd_t*)p;
   return t->N;
}

/**
 * Set "N" in "HkOneShotHkCmd" packet.
 * \param p Pointer to the packet.
 * \param N Value of "N" to be set in packet.
 */
static inline void setHkOneShotHkCmdN(void* p, NSID_t N)
{
   HkOneShotHkCmd_t* t;
   t = (HkOneShotHkCmd_t*)p;
   t->N = N;
}

/**
 * Get pointer to "SID" array from "HkOneShotHkCmd" packet.
 * \param p Pointer to the packet.
 * \return Pointer to the start of the SID array.
 */
static inline SID_t* getHkOneShotHkCmdSIDArray(void* p)
{
   HkOneShotHkCmd_t* t;
   t = (HkOneShotHkCmd_t*)p;
   return &t->N_[0].SID;
}

/**
 * Get "SID" array from "HkOneShotHkCmd" packet.
 * \param p Pointer to the packet.
 * \param dest Pointer to memory location where array data are copied to.
 */
static inline void readHkOneShotHkCmdSIDArray(void* p, void* dest)
{
   HkOneShotHkCmd_t* t;
   t = (HkOneShotHkCmd_t*)p;
   memcpy(dest, &t->N_[0].SID, t->N*sizeof(t->N_[0].SID));
}

/**
 * Set "SID" array in "HkOneShotHkCmd" packet.
 * \param p Pointer to the packet.
 * \param src Pointer to memory location from where array data are copied.
 */
static inline void writeHkOneShotHkCmdSIDArray(void* p, const void* src)
{
   HkOneShotHkCmd_t* t;
   t = (HkOneShotHkCmd_t*)p;
   memcpy(&t->N_[0].SID, src, t->N*sizeof(t->N_[0].SID));
}

/**
 * Get "SID" from "HkOneShotHkCmd" packet.
 * \param p Pointer to the packet.
 * \param N
 * \return Value of "SID".
 */
static inline SID_t getHkOneShotHkCmdSID(void* p, NSID_t N)
{
   HkOneShotHkCmd_t* t;
   t = (HkOneShotHkCmd_t*)p;
   return t->N_[N].SID;
}

/**
 * Set "SID" in "HkOneShotHkCmd" packet.
 * \param p Pointer to the packet.
 * \param N
 * \param SID Value of "SID" to be set in packet.
 */
static inline void setHkOneShotHkCmdSID(void* p, NSID_t N, SID_t SID)
{
   HkOneShotHkCmd_t* t;
   t = (HkOneShotHkCmd_t*)p;
   t->N_[N].SID = SID;
}

/**
 * Get "N" from "HkOneShotDiagCmd" packet.
 * \param p Pointer to the packet.
 * \return Value of "N".
 */
static inline NSID_t getHkOneShotDiagCmdN(void* p)
{
   HkOneShotDiagCmd_t* t;
   t = (HkOneShotDiagCmd_t*)p;
   return t->N;
}

/**
 * Set "N" in "HkOneShotDiagCmd" packet.
 * \param p Pointer to the packet.
 * \param N Value of "N" to be set in packet.
 */
static inline void setHkOneShotDiagCmdN(void* p, NSID_t N)
{
   HkOneShotDiagCmd_t* t;
   t = (HkOneShotDiagCmd_t*)p;
   t->N = N;
}

/**
 * Get pointer to "SID" array from "HkOneShotDiagCmd" packet.
 * \param p Pointer to the packet.
 * \return Pointer to the start of the SID array.
 */
static inline SID_t* getHkOneShotDiagCmdSIDArray(void* p)
{
   HkOneShotDiagCmd_t* t;
   t = (HkOneShotDiagCmd_t*)p;
   return &t->N_[0].SID;
}

/**
 * Get "SID" array from "HkOneShotDiagCmd" packet.
 * \param p Pointer to the packet.
 * \param dest Pointer to memory location where array data are copied to.
 */
static inline void readHkOneShotDiagCmdSIDArray(void* p, void* dest)
{
   HkOneShotDiagCmd_t* t;
   t = (HkOneShotDiagCmd_t*)p;
   memcpy(dest, &t->N_[0].SID, t->N*sizeof(t->N_[0].SID));
}

/**
 * Set "SID" array in "HkOneShotDiagCmd" packet.
 * \param p Pointer to the packet.
 * \param src Pointer to memory location from where array data are copied.
 */
static inline void writeHkOneShotDiagCmdSIDArray(void* p, const void* src)
{
   HkOneShotDiagCmd_t* t;
   t = (HkOneShotDiagCmd_t*)p;
   memcpy(&t->N_[0].SID, src, t->N*sizeof(t->N_[0].SID));
}

/**
 * Get "SID" from "HkOneShotDiagCmd" packet.
 * \param p Pointer to the packet.
 * \param N
 * \return Value of "SID".
 */
static inline SID_t getHkOneShotDiagCmdSID(void* p, NSID_t N)
{
   HkOneShotDiagCmd_t* t;
   t = (HkOneShotDiagCmd_t*)p;
   return t->N_[N].SID;
}

/**
 * Set "SID" in "HkOneShotDiagCmd" packet.
 * \param p Pointer to the packet.
 * \param N
 * \param SID Value of "SID" to be set in packet.
 */
static inline void setHkOneShotDiagCmdSID(void* p, NSID_t N, SID_t SID)
{
   HkOneShotDiagCmd_t* t;
   t = (HkOneShotDiagCmd_t*)p;
   t->N_[N].SID = SID;
}


/*----------------------------------------------------------------------------*/
#endif /* CRPSPKTHK_H */
