/**
 * @file CrPsVerConfig.c
 * @ingroup man_ver
 *
 * @brief Define functions to configure the Request Verification Service (service 11).
 * This module defines:
 * - The initialization function for service 1 (<code>::CrPsVerConfigInit</code>)
 * - The getter functions for the service 1 procedures
 * .
 *
 * @constraint The initialization function #CrPsVerConfigInit must be called as part
 * of the initialization of the host application.
 *
 * @author Alessandro Pasetti <pasetti@pnp-software.com>
 *
 * @copyright P&P Software GmbH, 2015 / Department of Astrophysics, University of Vienna, 2018
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 */

#ifndef CRPSVERCONFIG_H_
#define CRPSVERCONFIG_H_

/** FW Profile function definitions */
#include "FwSmConstants.h"

/** CORDET Framework type definitions */
#include "CrFwConstants.h"
#include "CrFwRepInCmdOutcome.h"

/**
 * Type for the Component Data attached to the service 1 procedures.
 * The service 1 procedures are called by <code>CrFwRepInCmdOutcome</code> to report
 * the outcome of the processing of an incoming command.
 * They generate the service 1 reports.
 */
typedef struct CrPsVerData {
	/** The descriptor of the incoming command whose processing triggers the service 1 reports */
	FwSmDesc_t inCmd;
	/** The type of the incoming command whose processing triggers the service 1 report */
	CrFwServType_t servType;
	/** The sub-type of the incoming command whose processing triggers the service 1 report */
	CrFwServSubType_t servSubType;
	/** The discriminant of the incoming command whose processing triggers the service 1 report */
	CrFwDiscriminant_t disc;
	/** The outcome of the processing of the incoming command */
	CrFwRepInCmdOutcome_t outcome;
	/** The failure code generated by the processing of the incoming command (only meaningful in case
	 * of processing failure
	 */
	CrFwOutcome_t failCode;
	/** The packet encapsulating the command whose processing triggers the service 1 report */
	CrFwPckt_t inPckt;
} CrPsVerData_t;

/**
 * Initialize the Request Verification Service.
 * This function must be called before service 1 can be used in the host application.
 * The function should typically be called as part of the initialization of the host application.
 *
 * This function creates and configures the service 1 procedures.
 * The service 1 procedure instances are called by <code>CrFwRepInCmdOutcome</code> to report
 * the outcome of the processing of an incoming command.
 * They generate the service 1 reports.
 *
 * No check is performed on the successful creation of the service 1 procedures.
 * This is acceptable because this function is only called during the application initialization
 * phase.
 * Its success or failure can therefore be determined statically.
 *
 * No configuration check (through function <code>FwPrCheck</code> in the FW Profile) is done.
 * Such a check should not be part of the operational implementation of service 17.
 * If it is needed (as is typically the case during the development and debug phase of an application),
 * it should be done in a separate module.
 *
 * The procedure instances can be retrieved using functions with names like <code>CrPsVerConfigGetXyz</code>
 * where 'Xyz' is the name of the procedure.
 */
void CrPsVerConfigInit();

/**
 * Set the data attached to the service 1 procedure instance.
 * The input for a service 1 procedure are stored in a data structure of type <code>#CrPsVerData</code>.
 * This function configures this data structure.
 * This function should be called before a service 1 procedure is run.
 *
 * The command which triggers the service 1 report may be represented either as an InCommand object or
 * as a raw packet.
 * In the former case, the InCommand object is passed through parameter inCmd.
 * In the latter case, the packet is passed through parameter inPckt.
 * The latter case only applies when the InCommand object could not be created (outcome <code>::crCmdAckCreFail</code>).
 *
 * @param outcome the command processing outcome for which the service 1 report is generated
 * @param servType the type of the command whose processing triggers the service 1 report
 * @param servSubType the sub-type of the command whose processing triggers the service 1 report
 * @param disc the discriminant of the command whose processing triggers the service 1 report
 * @param failCode the failure code for which the service 1 failure report is being generated
 * @param inCmd the incoming command whose processing triggers the service 1 report (non-NULL only if inPckt is NULL)
 * @param inPckt the packet holding the incoming command (non-NULL only if inCmd is NULL)
 */
void CrPsVerConfigSetPrData(CrFwRepInCmdOutcome_t outcome, CrFwServType_t servType, CrFwServSubType_t servSubType,
        CrFwDiscriminant_t disc, CrFwOutcome_t failCode, FwSmDesc_t inCmd, CrFwPckt_t inPckt);

/**
 * Get the processing outcome of the command for which the service 1 report is generated.
 * This function returns the value loaded with function <code>::CrPsVerConfigSetPrData</code>.
 *
 * @return the processing outcome of the command for which the service 1 report is generated.
 */
CrFwRepInCmdOutcome_t CrPsVerConfigGetOutcome();

/**
 * Get the service type of the command for which the service 1 report is generated.
 * This function returns the value loaded with function <code>::CrPsVerConfigSetPrData</code>.
 *
 * @return the service type of command for which the service 1 report is generated.
 */
CrFwServType_t CrPsVerConfigGetServType();

/**
 * Get the service sub-type of the command for which the service 1 report is generated.
 * This function returns the value loaded with function <code>::CrPsVerConfigSetPrData</code>.
 *
 * @return the service sub-type of command for which the service 1 report is generated.
 */
CrFwServSubType_t CrPsVerConfigGetServSubType();

/**
 * Get the discriminant of the command for which the service 1 report is generated.
 * This function returns the value loaded with function <code>::CrPsVerConfigSetPrData</code>.
 *
 * @return the discriminant of command for which the service 1 report is generated.
 */
CrFwDiscriminant_t CrPsVerConfigGetDisc();

/**
 * Get the failure code of the command for which the service 1 report is generated.
 * This function returns the value loaded with function <code>::CrPsVerConfigSetPrData</code>.
 * The return code is meaningful when a command has a failed one of its checks.
 * The function returns the value of the failure code.
 *
 * @return the failure code of command for which the service 1 report is generated.
 */
CrFwOutcome_t CrPsVerConfigGetFailCode();

/**
 * Get the InCommand for which the service 1 report is generated.
 * This function returns the value loaded with function <code>::CrPsVerConfigSetPrData</code>.
 *
 * @return the descriptor of the InCommand for which the service 1 report is generated.
 */
FwSmDesc_t CrPsVerConfigGetInCmd();

/**
 * Get the packet holding the command for which the service 1 report is generated.
 * This function returns the value loaded with function <code>::CrPsVerConfigSetPrData</code>.
 *
 * @return the source of command for which the service 1 report is generated.
 */
CrFwPckt_t CrPsVerConfigGetInPckt();

/**
 * Return the instance of the procedure implementing the Command Progress Failure Procedure.
 * This function should only be called after function <code>::CrPsVerConfigInit</code> (which
 * creates and configures the procedure instance) has been called.
 * If the initialization failed, this function might return NULL.
 *
 * @return the descriptor of the Command Progress Failure Procedure
 */
FwPrDesc_t CrPsVerConfigGetCmdPrgrFail();

/**
 * Return the instance of the procedure implementing the Command Progress Success Procedure.
 * This function should only be called after function <code>::CrPsVerConfigInit</code> (which
 * creates and configures the procedure instance) has been called.
 * If the initialization failed, this function might return NULL.
 *
 * @return the descriptor of the Command Progress Success Procedure
 */
FwPrDesc_t CrPsVerConfigGetCmdPrgrSucc();

/**
 * Return the instance of the procedure implementing the Command Verification Failure Procedure.
 * This function should only be called after function <code>::CrPsVerConfigInit</code> (which
 * creates and configures the procedure instance) has been called.
 * If the initialization failed, this function might return NULL.
 *
 * @return the descriptor of the Command Verification Failure Procedure
 */
FwPrDesc_t CrPsVerConfigGetCmdVerFail();

/**
 * Return the instance of the procedure implementing the Command Verification Success Procedure.
 * This function should only be called after function <code>::CrPsVerConfigInit</code> (which
 * creates and configures the procedure instance) has been called.
 * If the initialization failed, this function might return NULL.
 *
 * @return the descriptor of the Command Verification Success Procedure
 */
FwPrDesc_t CrPsVerConfigGetCmdVerSucc();

/**
 * Return the instance of the procedure implementing the Packet Rerouting Failure Procedure.
 * This function should only be called after function <code>::CrPsVerConfigInit</code> (which
 * creates and configures the procedure instance) has been called.
 * If the initialization failed, this function might return NULL.
 *
 * @return the descriptor of the Packet Rerouting Failure Procedure
 */
FwPrDesc_t CrPsVerConfigGetPcktReroutingFail();


#endif /* CRPSVERCONFIG_H_ */
