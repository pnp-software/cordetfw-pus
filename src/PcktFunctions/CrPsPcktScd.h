/**
 * @file
 * @ingroup gen_pck
 *
 * Interface for accessing fields in packets of service "Scd".
 *
 * @note This file was generated on 2018-07-10 22:24:46
 * @author Automatically Generated by CORDET Editor
 * @copyright P&P Software GmbH
 */
#ifndef CRPSPCKTSCD_H_
#define CRPSPCKTSCD_H_

#include "CrPsTypes.h"

#include "CrPsPckt.h"
/**
 * Structure for ScdEnbTbsCmd
 */
typedef struct __attribute__((packed)) _ScdEnbTbsCmd_t {
   /**
    * Packet header.
    */
   TcHeader_t Header;

} ScdEnbTbsCmd_t ;

/**
 * Structure for ScdDisTbsCmd
 */
typedef struct __attribute__((packed)) _ScdDisTbsCmd_t {
   /**
    * Packet header.
    */
   TcHeader_t Header;

} ScdDisTbsCmd_t ;

/**
 * Structure for ScdResTbsCmd
 */
typedef struct __attribute__((packed)) _ScdResTbsCmd_t {
   /**
    * Packet header.
    */
   TcHeader_t Header;

} ScdResTbsCmd_t ;

/**
 * Structure for ScdDelTbaCmd
 */
typedef struct __attribute__((packed)) _ScdDelTbaCmd_t {
   /**
    * Packet header.
    */
   TcHeader_t Header;

   /**
    * Number of activities to be inserted in the time-based schedule
    */
   CrPsNTba_t N;
   
   struct __attribute__((packed)) {
      /**
       * Source of command embedded in activity to be deleted
       */
      CrFwDestSrc_t AppId;
      
   } N_[0];
} ScdDelTbaCmd_t ;

/**
 * Structure for ScdEnbSubSchedCmd
 */
typedef struct __attribute__((packed)) _ScdEnbSubSchedCmd_t {
   /**
    * Packet header.
    */
   TcHeader_t Header;

   /**
    * The number of sub-schedule identifiers to be enabled
    */
   CrPsNTba_t N;
   
   struct __attribute__((packed)) {
      /**
       * The identifier of a sub-schedule to be enabled
       */
      CrPsNSubSchedGroup_t SubSchedId;
      
   } N_[0];
} ScdEnbSubSchedCmd_t ;

/**
 * Structure for ScdDisSubSchedCmd
 */
typedef struct __attribute__((packed)) _ScdDisSubSchedCmd_t {
   /**
    * Packet header.
    */
   TcHeader_t Header;

   /**
    * The number of sub-schedule identifiers to be disabled
    */
   CrPsNTba_t N;
   
   struct __attribute__((packed)) {
      /**
       * The identifier of a sub-schedule to be disabled
       */
      CrPsNSubSchedGroup_t SubSchedId;
      
   } N_[0];
} ScdDisSubSchedCmd_t ;

/**
 * Structure for ScdCreGrpCmd
 */
typedef struct __attribute__((packed)) _ScdCreGrpCmd_t {
   /**
    * Packet header.
    */
   TcHeader_t Header;

   /**
    * The number of groups to be created
    */
   CrPsNTba_t N;
   
   struct __attribute__((packed)) {
      /**
       * The identifier of a group to be created
       */
      CrPsNSubSchedGroup_t GroupId;
      
      /**
       * The initial enable status of the group
       */
      CrFwBool_t isGroupEnabled;
      
   } N_[0];
} ScdCreGrpCmd_t ;

/**
 * Structure for ScdDelGrpCmd
 */
typedef struct __attribute__((packed)) _ScdDelGrpCmd_t {
   /**
    * Packet header.
    */
   TcHeader_t Header;

   /**
    * The number of groups to be deleted
    */
   CrPsNTba_t N;
   
   struct __attribute__((packed)) {
      /**
       * The identifier of a group to be deleted
       */
      CrPsNSubSchedGroup_t GroupId;
      
   } N_[0];
} ScdDelGrpCmd_t ;

/**
 * Structure for ScdEnbGrpCmd
 */
typedef struct __attribute__((packed)) _ScdEnbGrpCmd_t {
   /**
    * Packet header.
    */
   TcHeader_t Header;

   /**
    * The number of groups to be enabled (if this is zero, then all groups are
    * enabled)
    */
   CrPsNTba_t N;
   
   struct __attribute__((packed)) {
      /**
       * The identifier of a group to be enabled
       */
      CrPsNSubSchedGroup_t GroupId;
      
   } N_[0];
} ScdEnbGrpCmd_t ;

/**
 * Structure for ScdDisGrpCmd
 */
typedef struct __attribute__((packed)) _ScdDisGrpCmd_t {
   /**
    * Packet header.
    */
   TcHeader_t Header;

   /**
    * The number of groups to be enabled (if this is zero, then all groups
    * currently in use are disabled)
    */
   CrPsNTba_t N;
   
   struct __attribute__((packed)) {
      /**
       * The identifier of a group to be enabled
       */
      CrPsNSubSchedGroup_t GroupId;
      
   } N_[0];
} ScdDisGrpCmd_t ;

/**
 * Structure for ScdRepGrpCmd
 */
typedef struct __attribute__((packed)) _ScdRepGrpCmd_t {
   /**
    * Packet header.
    */
   TcHeader_t Header;

} ScdRepGrpCmd_t ;

/**
 * Structure for ScdGrpRep
 */
typedef struct __attribute__((packed)) _ScdGrpRep_t {
   /**
    * Packet header.
    */
   TmHeader_t Header;

   /**
    * Number of groups being reported
    */
   CrPsNTba_t N;
   
   struct __attribute__((packed)) {
      /**
       * The identifier of a group being reported
       */
      CrPsNSubSchedGroup_t GroupId;
      
      /**
       * The enable status of a group being reported
       */
      CrFwBool_t isGroupEnabled;
      
   } N_[0];
} ScdGrpRep_t ;

/**
 * Get "N" from "ScdDelTbaCmd" packet.
 * @param p Pointer to the packet.
 * @return Value of "N".
 */
static inline CrPsNTba_t getScdDelTbaCmdN(void* p)
{
   ScdDelTbaCmd_t* t;
   t = (ScdDelTbaCmd_t*)p;
   return t->N;
}

/**
 * Set "N" in "ScdDelTbaCmd" packet.
 * @param p Pointer to the packet.
 * @param N Value of "N" to be set in packet.
 */
static inline void setScdDelTbaCmdN(void* p, CrPsNTba_t N)
{
   ScdDelTbaCmd_t* t;
   t = (ScdDelTbaCmd_t*)p;
   t->N = N;
}

/**
 * Get "AppId" from "ScdDelTbaCmd" packet.
 * @param p Pointer to the packet.
 * @param N
 * @return Value of "AppId".
 */
static inline CrFwDestSrc_t getScdDelTbaCmdAppId(void* p, CrPsNTba_t N)
{
   ScdDelTbaCmd_t* t;
   t = (ScdDelTbaCmd_t*)p;
   return t->N_[N].AppId;
}

/**
 * Set "AppId" in "ScdDelTbaCmd" packet.
 * @param p Pointer to the packet.
 * @param N
 * @param AppId Value of "AppId" to be set in packet.
 */
static inline void setScdDelTbaCmdAppId(void* p, CrPsNTba_t N, CrFwDestSrc_t AppId)
{
   ScdDelTbaCmd_t* t;
   t = (ScdDelTbaCmd_t*)p;
   t->N_[N].AppId = AppId;
}

/**
 * Get "APID" from "ScdDelTbaCmd" packet.
 * @param p Pointer to the packet.
 * @param N
 * @return Value of "APID".
 */
static inline CrPsElevenBit_t getScdDelTbaCmdAPID(void* p, CrPsNTba_t N)
{
   uint32_t t;
   (void)memcpy(&t, &((uint8_t*)p, CrPsNTba_t N)[3], sizeof(t));
   t >>= 21;
   t &= 0x7ff;
   return (CrPsElevenBit_t)t;
}

/**
 * Set "APID" in "ScdDelTbaCmd" packet.
 * @param p Pointer to the packet.
 * @param N
 * @param APID Value of "APID" to be set in packet.
 */
static inline void setScdDelTbaCmdAPID(void* p, CrPsNTba_t N, CrPsElevenBit_t APID)
{
   uint32_t s;
   uint32_t t;
   s = ((uint32_t)APID << 21);
   s &= (uint32_t)0xffe00000ull;
   (void)memcpy(&t, &((uint8_t*)p, CrPsNTba_t N)[3], sizeof(t));
   t &= (uint32_t)~0xffe00000ull;
   t |= s;
   (void)memcpy(&((uint8_t*)p, CrPsNTba_t N)[3], &t, sizeof(t));
}

/**
 * Get "SrcSeqCnt" from "ScdDelTbaCmd" packet.
 * @param p Pointer to the packet.
 * @param N
 * @return Value of "SrcSeqCnt".
 */
static inline CrPsFourteenBit_t getScdDelTbaCmdSrcSeqCnt(void* p, CrPsNTba_t N)
{
   uint32_t t;
   (void)memcpy(&t, &((uint8_t*)p, CrPsNTba_t N)[4], sizeof(t));
   t >>= 15;
   t &= 0x3fff;
   return (CrPsFourteenBit_t)t;
}

/**
 * Set "SrcSeqCnt" in "ScdDelTbaCmd" packet.
 * @param p Pointer to the packet.
 * @param N
 * @param SrcSeqCnt Value of "SrcSeqCnt" to be set in packet.
 */
static inline void setScdDelTbaCmdSrcSeqCnt(void* p, CrPsNTba_t N, CrPsFourteenBit_t SrcSeqCnt)
{
   uint32_t s;
   uint32_t t;
   s = ((uint32_t)SrcSeqCnt << 15);
   s &= (uint32_t)0x1fff8000ull;
   (void)memcpy(&t, &((uint8_t*)p, CrPsNTba_t N)[4], sizeof(t));
   t &= (uint32_t)~0x1fff8000ull;
   t |= s;
   (void)memcpy(&((uint8_t*)p, CrPsNTba_t N)[4], &t, sizeof(t));
}

/**
 * Get "N" from "ScdEnbSubSchedCmd" packet.
 * @param p Pointer to the packet.
 * @return Value of "N".
 */
static inline CrPsNTba_t getScdEnbSubSchedCmdN(void* p)
{
   ScdEnbSubSchedCmd_t* t;
   t = (ScdEnbSubSchedCmd_t*)p;
   return t->N;
}

/**
 * Set "N" in "ScdEnbSubSchedCmd" packet.
 * @param p Pointer to the packet.
 * @param N Value of "N" to be set in packet.
 */
static inline void setScdEnbSubSchedCmdN(void* p, CrPsNTba_t N)
{
   ScdEnbSubSchedCmd_t* t;
   t = (ScdEnbSubSchedCmd_t*)p;
   t->N = N;
}

/**
 * Get pointer to "SubSchedId" array from "ScdEnbSubSchedCmd" packet.
 * @param p Pointer to the packet.
 * @return Pointer to the start of the SubSchedId array.
 */
static inline CrPsNSubSchedGroup_t* getScdEnbSubSchedCmdSubSchedIdArray(void* p)
{
   ScdEnbSubSchedCmd_t* t;
   t = (ScdEnbSubSchedCmd_t*)p;
   return &t->N_[0].SubSchedId;
}

/**
 * Get "SubSchedId" array from "ScdEnbSubSchedCmd" packet.
 * @param p Pointer to the packet.
 * @param dest Pointer to memory location where array data are copied to.
 */
static inline void readScdEnbSubSchedCmdSubSchedIdArray(void* p, void* dest)
{
   ScdEnbSubSchedCmd_t* t;
   t = (ScdEnbSubSchedCmd_t*)p;
   memcpy(dest, &t->N_[0].SubSchedId, t->N*sizeof(t->N_[0].SubSchedId));
}

/**
 * Set "SubSchedId" array in "ScdEnbSubSchedCmd" packet.
 * @param p Pointer to the packet.
 * @param src Pointer to memory location from where array data are copied.
 */
static inline void writeScdEnbSubSchedCmdSubSchedIdArray(void* p, const void* src)
{
   ScdEnbSubSchedCmd_t* t;
   t = (ScdEnbSubSchedCmd_t*)p;
   memcpy(&t->N_[0].SubSchedId, src, t->N*sizeof(t->N_[0].SubSchedId));
}

/**
 * Get "SubSchedId" from "ScdEnbSubSchedCmd" packet.
 * @param p Pointer to the packet.
 * @param N
 * @return Value of "SubSchedId".
 */
static inline CrPsNSubSchedGroup_t getScdEnbSubSchedCmdSubSchedId(void* p, CrPsNTba_t N)
{
   ScdEnbSubSchedCmd_t* t;
   t = (ScdEnbSubSchedCmd_t*)p;
   return t->N_[N].SubSchedId;
}

/**
 * Set "SubSchedId" in "ScdEnbSubSchedCmd" packet.
 * @param p Pointer to the packet.
 * @param N
 * @param SubSchedId Value of "SubSchedId" to be set in packet.
 */
static inline void setScdEnbSubSchedCmdSubSchedId(void* p, CrPsNTba_t N, CrPsNSubSchedGroup_t SubSchedId)
{
   ScdEnbSubSchedCmd_t* t;
   t = (ScdEnbSubSchedCmd_t*)p;
   t->N_[N].SubSchedId = SubSchedId;
}

/**
 * Get "N" from "ScdDisSubSchedCmd" packet.
 * @param p Pointer to the packet.
 * @return Value of "N".
 */
static inline CrPsNTba_t getScdDisSubSchedCmdN(void* p)
{
   ScdDisSubSchedCmd_t* t;
   t = (ScdDisSubSchedCmd_t*)p;
   return t->N;
}

/**
 * Set "N" in "ScdDisSubSchedCmd" packet.
 * @param p Pointer to the packet.
 * @param N Value of "N" to be set in packet.
 */
static inline void setScdDisSubSchedCmdN(void* p, CrPsNTba_t N)
{
   ScdDisSubSchedCmd_t* t;
   t = (ScdDisSubSchedCmd_t*)p;
   t->N = N;
}

/**
 * Get pointer to "SubSchedId" array from "ScdDisSubSchedCmd" packet.
 * @param p Pointer to the packet.
 * @return Pointer to the start of the SubSchedId array.
 */
static inline CrPsNSubSchedGroup_t* getScdDisSubSchedCmdSubSchedIdArray(void* p)
{
   ScdDisSubSchedCmd_t* t;
   t = (ScdDisSubSchedCmd_t*)p;
   return &t->N_[0].SubSchedId;
}

/**
 * Get "SubSchedId" array from "ScdDisSubSchedCmd" packet.
 * @param p Pointer to the packet.
 * @param dest Pointer to memory location where array data are copied to.
 */
static inline void readScdDisSubSchedCmdSubSchedIdArray(void* p, void* dest)
{
   ScdDisSubSchedCmd_t* t;
   t = (ScdDisSubSchedCmd_t*)p;
   memcpy(dest, &t->N_[0].SubSchedId, t->N*sizeof(t->N_[0].SubSchedId));
}

/**
 * Set "SubSchedId" array in "ScdDisSubSchedCmd" packet.
 * @param p Pointer to the packet.
 * @param src Pointer to memory location from where array data are copied.
 */
static inline void writeScdDisSubSchedCmdSubSchedIdArray(void* p, const void* src)
{
   ScdDisSubSchedCmd_t* t;
   t = (ScdDisSubSchedCmd_t*)p;
   memcpy(&t->N_[0].SubSchedId, src, t->N*sizeof(t->N_[0].SubSchedId));
}

/**
 * Get "SubSchedId" from "ScdDisSubSchedCmd" packet.
 * @param p Pointer to the packet.
 * @param N
 * @return Value of "SubSchedId".
 */
static inline CrPsNSubSchedGroup_t getScdDisSubSchedCmdSubSchedId(void* p, CrPsNTba_t N)
{
   ScdDisSubSchedCmd_t* t;
   t = (ScdDisSubSchedCmd_t*)p;
   return t->N_[N].SubSchedId;
}

/**
 * Set "SubSchedId" in "ScdDisSubSchedCmd" packet.
 * @param p Pointer to the packet.
 * @param N
 * @param SubSchedId Value of "SubSchedId" to be set in packet.
 */
static inline void setScdDisSubSchedCmdSubSchedId(void* p, CrPsNTba_t N, CrPsNSubSchedGroup_t SubSchedId)
{
   ScdDisSubSchedCmd_t* t;
   t = (ScdDisSubSchedCmd_t*)p;
   t->N_[N].SubSchedId = SubSchedId;
}

/**
 * Get "N" from "ScdCreGrpCmd" packet.
 * @param p Pointer to the packet.
 * @return Value of "N".
 */
static inline CrPsNTba_t getScdCreGrpCmdN(void* p)
{
   ScdCreGrpCmd_t* t;
   t = (ScdCreGrpCmd_t*)p;
   return t->N;
}

/**
 * Set "N" in "ScdCreGrpCmd" packet.
 * @param p Pointer to the packet.
 * @param N Value of "N" to be set in packet.
 */
static inline void setScdCreGrpCmdN(void* p, CrPsNTba_t N)
{
   ScdCreGrpCmd_t* t;
   t = (ScdCreGrpCmd_t*)p;
   t->N = N;
}

/**
 * Get "GroupId" from "ScdCreGrpCmd" packet.
 * @param p Pointer to the packet.
 * @param N
 * @return Value of "GroupId".
 */
static inline CrPsNSubSchedGroup_t getScdCreGrpCmdGroupId(void* p, CrPsNTba_t N)
{
   ScdCreGrpCmd_t* t;
   t = (ScdCreGrpCmd_t*)p;
   return t->N_[N].GroupId;
}

/**
 * Set "GroupId" in "ScdCreGrpCmd" packet.
 * @param p Pointer to the packet.
 * @param N
 * @param GroupId Value of "GroupId" to be set in packet.
 */
static inline void setScdCreGrpCmdGroupId(void* p, CrPsNTba_t N, CrPsNSubSchedGroup_t GroupId)
{
   ScdCreGrpCmd_t* t;
   t = (ScdCreGrpCmd_t*)p;
   t->N_[N].GroupId = GroupId;
}

/**
 * Get "isGroupEnabled" from "ScdCreGrpCmd" packet.
 * @param p Pointer to the packet.
 * @param N
 * @return Value of "isGroupEnabled".
 */
static inline CrFwBool_t getScdCreGrpCmdisGroupEnabled(void* p, CrPsNTba_t N)
{
   ScdCreGrpCmd_t* t;
   t = (ScdCreGrpCmd_t*)p;
   return t->N_[N].isGroupEnabled;
}

/**
 * Set "isGroupEnabled" in "ScdCreGrpCmd" packet.
 * @param p Pointer to the packet.
 * @param N
 * @param isGroupEnabled Value of "isGroupEnabled" to be set in packet.
 */
static inline void setScdCreGrpCmdisGroupEnabled(void* p, CrPsNTba_t N, CrFwBool_t isGroupEnabled)
{
   ScdCreGrpCmd_t* t;
   t = (ScdCreGrpCmd_t*)p;
   t->N_[N].isGroupEnabled = isGroupEnabled;
}

/**
 * Get "N" from "ScdDelGrpCmd" packet.
 * @param p Pointer to the packet.
 * @return Value of "N".
 */
static inline CrPsNTba_t getScdDelGrpCmdN(void* p)
{
   ScdDelGrpCmd_t* t;
   t = (ScdDelGrpCmd_t*)p;
   return t->N;
}

/**
 * Set "N" in "ScdDelGrpCmd" packet.
 * @param p Pointer to the packet.
 * @param N Value of "N" to be set in packet.
 */
static inline void setScdDelGrpCmdN(void* p, CrPsNTba_t N)
{
   ScdDelGrpCmd_t* t;
   t = (ScdDelGrpCmd_t*)p;
   t->N = N;
}

/**
 * Get pointer to "GroupId" array from "ScdDelGrpCmd" packet.
 * @param p Pointer to the packet.
 * @return Pointer to the start of the GroupId array.
 */
static inline CrPsNSubSchedGroup_t* getScdDelGrpCmdGroupIdArray(void* p)
{
   ScdDelGrpCmd_t* t;
   t = (ScdDelGrpCmd_t*)p;
   return &t->N_[0].GroupId;
}

/**
 * Get "GroupId" array from "ScdDelGrpCmd" packet.
 * @param p Pointer to the packet.
 * @param dest Pointer to memory location where array data are copied to.
 */
static inline void readScdDelGrpCmdGroupIdArray(void* p, void* dest)
{
   ScdDelGrpCmd_t* t;
   t = (ScdDelGrpCmd_t*)p;
   memcpy(dest, &t->N_[0].GroupId, t->N*sizeof(t->N_[0].GroupId));
}

/**
 * Set "GroupId" array in "ScdDelGrpCmd" packet.
 * @param p Pointer to the packet.
 * @param src Pointer to memory location from where array data are copied.
 */
static inline void writeScdDelGrpCmdGroupIdArray(void* p, const void* src)
{
   ScdDelGrpCmd_t* t;
   t = (ScdDelGrpCmd_t*)p;
   memcpy(&t->N_[0].GroupId, src, t->N*sizeof(t->N_[0].GroupId));
}

/**
 * Get "GroupId" from "ScdDelGrpCmd" packet.
 * @param p Pointer to the packet.
 * @param N
 * @return Value of "GroupId".
 */
static inline CrPsNSubSchedGroup_t getScdDelGrpCmdGroupId(void* p, CrPsNTba_t N)
{
   ScdDelGrpCmd_t* t;
   t = (ScdDelGrpCmd_t*)p;
   return t->N_[N].GroupId;
}

/**
 * Set "GroupId" in "ScdDelGrpCmd" packet.
 * @param p Pointer to the packet.
 * @param N
 * @param GroupId Value of "GroupId" to be set in packet.
 */
static inline void setScdDelGrpCmdGroupId(void* p, CrPsNTba_t N, CrPsNSubSchedGroup_t GroupId)
{
   ScdDelGrpCmd_t* t;
   t = (ScdDelGrpCmd_t*)p;
   t->N_[N].GroupId = GroupId;
}

/**
 * Get "N" from "ScdEnbGrpCmd" packet.
 * @param p Pointer to the packet.
 * @return Value of "N".
 */
static inline CrPsNTba_t getScdEnbGrpCmdN(void* p)
{
   ScdEnbGrpCmd_t* t;
   t = (ScdEnbGrpCmd_t*)p;
   return t->N;
}

/**
 * Set "N" in "ScdEnbGrpCmd" packet.
 * @param p Pointer to the packet.
 * @param N Value of "N" to be set in packet.
 */
static inline void setScdEnbGrpCmdN(void* p, CrPsNTba_t N)
{
   ScdEnbGrpCmd_t* t;
   t = (ScdEnbGrpCmd_t*)p;
   t->N = N;
}

/**
 * Get pointer to "GroupId" array from "ScdEnbGrpCmd" packet.
 * @param p Pointer to the packet.
 * @return Pointer to the start of the GroupId array.
 */
static inline CrPsNSubSchedGroup_t* getScdEnbGrpCmdGroupIdArray(void* p)
{
   ScdEnbGrpCmd_t* t;
   t = (ScdEnbGrpCmd_t*)p;
   return &t->N_[0].GroupId;
}

/**
 * Get "GroupId" array from "ScdEnbGrpCmd" packet.
 * @param p Pointer to the packet.
 * @param dest Pointer to memory location where array data are copied to.
 */
static inline void readScdEnbGrpCmdGroupIdArray(void* p, void* dest)
{
   ScdEnbGrpCmd_t* t;
   t = (ScdEnbGrpCmd_t*)p;
   memcpy(dest, &t->N_[0].GroupId, t->N*sizeof(t->N_[0].GroupId));
}

/**
 * Set "GroupId" array in "ScdEnbGrpCmd" packet.
 * @param p Pointer to the packet.
 * @param src Pointer to memory location from where array data are copied.
 */
static inline void writeScdEnbGrpCmdGroupIdArray(void* p, const void* src)
{
   ScdEnbGrpCmd_t* t;
   t = (ScdEnbGrpCmd_t*)p;
   memcpy(&t->N_[0].GroupId, src, t->N*sizeof(t->N_[0].GroupId));
}

/**
 * Get "GroupId" from "ScdEnbGrpCmd" packet.
 * @param p Pointer to the packet.
 * @param N
 * @return Value of "GroupId".
 */
static inline CrPsNSubSchedGroup_t getScdEnbGrpCmdGroupId(void* p, CrPsNTba_t N)
{
   ScdEnbGrpCmd_t* t;
   t = (ScdEnbGrpCmd_t*)p;
   return t->N_[N].GroupId;
}

/**
 * Set "GroupId" in "ScdEnbGrpCmd" packet.
 * @param p Pointer to the packet.
 * @param N
 * @param GroupId Value of "GroupId" to be set in packet.
 */
static inline void setScdEnbGrpCmdGroupId(void* p, CrPsNTba_t N, CrPsNSubSchedGroup_t GroupId)
{
   ScdEnbGrpCmd_t* t;
   t = (ScdEnbGrpCmd_t*)p;
   t->N_[N].GroupId = GroupId;
}

/**
 * Get "N" from "ScdDisGrpCmd" packet.
 * @param p Pointer to the packet.
 * @return Value of "N".
 */
static inline CrPsNTba_t getScdDisGrpCmdN(void* p)
{
   ScdDisGrpCmd_t* t;
   t = (ScdDisGrpCmd_t*)p;
   return t->N;
}

/**
 * Set "N" in "ScdDisGrpCmd" packet.
 * @param p Pointer to the packet.
 * @param N Value of "N" to be set in packet.
 */
static inline void setScdDisGrpCmdN(void* p, CrPsNTba_t N)
{
   ScdDisGrpCmd_t* t;
   t = (ScdDisGrpCmd_t*)p;
   t->N = N;
}

/**
 * Get pointer to "GroupId" array from "ScdDisGrpCmd" packet.
 * @param p Pointer to the packet.
 * @return Pointer to the start of the GroupId array.
 */
static inline CrPsNSubSchedGroup_t* getScdDisGrpCmdGroupIdArray(void* p)
{
   ScdDisGrpCmd_t* t;
   t = (ScdDisGrpCmd_t*)p;
   return &t->N_[0].GroupId;
}

/**
 * Get "GroupId" array from "ScdDisGrpCmd" packet.
 * @param p Pointer to the packet.
 * @param dest Pointer to memory location where array data are copied to.
 */
static inline void readScdDisGrpCmdGroupIdArray(void* p, void* dest)
{
   ScdDisGrpCmd_t* t;
   t = (ScdDisGrpCmd_t*)p;
   memcpy(dest, &t->N_[0].GroupId, t->N*sizeof(t->N_[0].GroupId));
}

/**
 * Set "GroupId" array in "ScdDisGrpCmd" packet.
 * @param p Pointer to the packet.
 * @param src Pointer to memory location from where array data are copied.
 */
static inline void writeScdDisGrpCmdGroupIdArray(void* p, const void* src)
{
   ScdDisGrpCmd_t* t;
   t = (ScdDisGrpCmd_t*)p;
   memcpy(&t->N_[0].GroupId, src, t->N*sizeof(t->N_[0].GroupId));
}

/**
 * Get "GroupId" from "ScdDisGrpCmd" packet.
 * @param p Pointer to the packet.
 * @param N
 * @return Value of "GroupId".
 */
static inline CrPsNSubSchedGroup_t getScdDisGrpCmdGroupId(void* p, CrPsNTba_t N)
{
   ScdDisGrpCmd_t* t;
   t = (ScdDisGrpCmd_t*)p;
   return t->N_[N].GroupId;
}

/**
 * Set "GroupId" in "ScdDisGrpCmd" packet.
 * @param p Pointer to the packet.
 * @param N
 * @param GroupId Value of "GroupId" to be set in packet.
 */
static inline void setScdDisGrpCmdGroupId(void* p, CrPsNTba_t N, CrPsNSubSchedGroup_t GroupId)
{
   ScdDisGrpCmd_t* t;
   t = (ScdDisGrpCmd_t*)p;
   t->N_[N].GroupId = GroupId;
}

/**
 * Get "N" from "ScdGrpRep" packet.
 * @param p Pointer to the packet.
 * @return Value of "N".
 */
static inline CrPsNTba_t getScdGrpRepN(void* p)
{
   ScdGrpRep_t* t;
   t = (ScdGrpRep_t*)p;
   return t->N;
}

/**
 * Set "N" in "ScdGrpRep" packet.
 * @param p Pointer to the packet.
 * @param N Value of "N" to be set in packet.
 */
static inline void setScdGrpRepN(void* p, CrPsNTba_t N)
{
   ScdGrpRep_t* t;
   t = (ScdGrpRep_t*)p;
   t->N = N;
}

/**
 * Get "GroupId" from "ScdGrpRep" packet.
 * @param p Pointer to the packet.
 * @param N
 * @return Value of "GroupId".
 */
static inline CrPsNSubSchedGroup_t getScdGrpRepGroupId(void* p, CrPsNTba_t N)
{
   ScdGrpRep_t* t;
   t = (ScdGrpRep_t*)p;
   return t->N_[N].GroupId;
}

/**
 * Set "GroupId" in "ScdGrpRep" packet.
 * @param p Pointer to the packet.
 * @param N
 * @param GroupId Value of "GroupId" to be set in packet.
 */
static inline void setScdGrpRepGroupId(void* p, CrPsNTba_t N, CrPsNSubSchedGroup_t GroupId)
{
   ScdGrpRep_t* t;
   t = (ScdGrpRep_t*)p;
   t->N_[N].GroupId = GroupId;
}

/**
 * Get "isGroupEnabled" from "ScdGrpRep" packet.
 * @param p Pointer to the packet.
 * @param N
 * @return Value of "isGroupEnabled".
 */
static inline CrFwBool_t getScdGrpRepisGroupEnabled(void* p, CrPsNTba_t N)
{
   ScdGrpRep_t* t;
   t = (ScdGrpRep_t*)p;
   return t->N_[N].isGroupEnabled;
}

/**
 * Set "isGroupEnabled" in "ScdGrpRep" packet.
 * @param p Pointer to the packet.
 * @param N
 * @param isGroupEnabled Value of "isGroupEnabled" to be set in packet.
 */
static inline void setScdGrpRepisGroupEnabled(void* p, CrPsNTba_t N, CrFwBool_t isGroupEnabled)
{
   ScdGrpRep_t* t;
   t = (ScdGrpRep_t*)p;
   t->N_[N].isGroupEnabled = isGroupEnabled;
}


/*----------------------------------------------------------------------------*/
#endif /* CRPSPCKTSCD_H */
