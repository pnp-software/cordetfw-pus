/**
 * @file
 * @ingroup gen_pck
 *
 * Definition of type and sub-type identifiers.
 *
 * @note This file was generated on 2018-07-10 22:24:46
 * @author Automatically Generated by CORDET Editor
 * @copyright P&P Software GmbH
 */
#ifndef CRPSSERVTYPEID_H_
#define CRPSSERVTYPEID_H_

/**
 * Identifier for service: Ver (Request Verification Service)
 */
#define VER_TYPE (1)
/**
 * Identifier for service: Hk (Housekeeping Service)
 */
#define HK_TYPE (3)
/**
 * Identifier for service: Evt (Event Reporting Service)
 */
#define EVT_TYPE (5)
/**
 * Identifier for service: Scd (Time Based Scheduling Service)
 */
#define SCD_TYPE (11)
/**
 * Identifier for service: Mon (On Board Monitoring Service)
 */
#define MON_TYPE (12)
/**
 * Identifier for service: Lpt (Large Packet Transfer Service)
 */
#define LPT_TYPE (13)
/**
 * Identifier for service: Tst (Test Service)
 */
#define TST_TYPE (17)
/**
 * Identifier for sub-type of packet: VerSuccAccRep (Report generated to mark
 * the successful acceptance of an incoming command)
 */
#define VERSUCCACCREP_STYPE (1)
/**
 * Identifier for sub-type of packet: VerFailedAccRep (Report generated to
 * mark the acceptance failure of an incoming command)
 */
#define VERFAILEDACCREP_STYPE (2)
/**
 * Identifier for sub-type of packet: VerSuccStartRep (Report generated to
 * mark the successful start of execution of an incoming command)
 */
#define VERSUCCSTARTREP_STYPE (3)
/**
 * Identifier for sub-type of packet: VerFailedStartRep (Report generated to
 * mark the start of execution failure of an incoming command)
 */
#define VERFAILEDSTARTREP_STYPE (4)
/**
 * Identifier for sub-type of packet: VerSuccPrgrRep (Report generated to mark
 * the successful completion of an execution step of an incoming command)
 */
#define VERSUCCPRGRREP_STYPE (5)
/**
 * Identifier for sub-type of packet: VerFailedPrgrRep (Report generated to
 * mark the failure of an execution step of an incoming command)
 */
#define VERFAILEDPRGRREP_STYPE (6)
/**
 * Identifier for sub-type of packet: VerSuccTermRep (Report generated to mark
 * the successful completion of execution of an incoming command)
 */
#define VERSUCCTERMREP_STYPE (7)
/**
 * Identifier for sub-type of packet: VerFailedTermRep (Report generated to
 * mark the failure to complete execution of an incoming command)
 */
#define VERFAILEDTERMREP_STYPE (8)
/**
 * Identifier for sub-type of packet: VerFailedRoutingRep (Report generated to
 * mark the failure to route an incoming command to its final destination)
 */
#define VERFAILEDROUTINGREP_STYPE (10)
/**
 * Identifier for sub-type of packet: HkCreHkCmd (Create a housekeeping report
 * structure)
 */
#define HKCREHKCMD_STYPE (1)
/**
 * Identifier for sub-type of packet: HkCreDiagCmd (Create a diagnostic report
 * structure)
 */
#define HKCREDIAGCMD_STYPE (2)
/**
 * Identifier for sub-type of packet: HkDelHkCmd (Delete one or more
 * housekeeping report definitions)
 */
#define HKDELHKCMD_STYPE (3)
/**
 * Identifier for sub-type of packet: HkDelDiagCmd (Delete one or more
 * diagnostic report definitions)
 */
#define HKDELDIAGCMD_STYPE (4)
/**
 * Identifier for sub-type of packet: HkEnbHkCmd (Enable the periodic
 * generation of one or more housekeeping report structures)
 */
#define HKENBHKCMD_STYPE (5)
/**
 * Identifier for sub-type of packet: HkDisHkCmd (Disable the periodic
 * generation of one or more housekeeping report structures)
 */
#define HKDISHKCMD_STYPE (6)
/**
 * Identifier for sub-type of packet: HkEnbDiagCmd (Enable the periodic
 * generation of one or more diagnostic report structures)
 */
#define HKENBDIAGCMD_STYPE (7)
/**
 * Identifier for sub-type of packet: HkDisDiagCmd (Disable the periodic
 * generation of one or more diagnostic report structures)
 */
#define HKDISDIAGCMD_STYPE (8)
/**
 * Identifier for sub-type of packet: HkRepStructHkCmd (This command carries a
 * list of SIDs. For each SID, it triggers the generation of a (3,10) report
 * with the definition of the housekeeping report structure for that SID.)
 */
#define HKREPSTRUCTHKCMD_STYPE (9)
/**
 * Identifier for sub-type of packet: HkRepStructHkRep (Report carrying the
 * definition of a housekeeping report structure generated in response to a
 * (3,9) command.)
 */
#define HKREPSTRUCTHKREP_STYPE (10)
/**
 * Identifier for sub-type of packet: HkRepStructDiagCmd (This command carries
 * a list of SIDs. For each SID, it triggers the generation of a (3,12) report
 * with the definition of the diagnostic report structure for that SID.)
 */
#define HKREPSTRUCTDIAGCMD_STYPE (11)
/**
 * Identifier for sub-type of packet: HkRepStructDiagRep (Report carrying the
 * definition of a diagnostic report structure generated in response to a
 * (3,11) command.)
 */
#define HKREPSTRUCTDIAGREP_STYPE (12)
/**
 * Identifier for sub-type of packet: HkRep (Periodic housekeeping report)
 */
#define HKREP_STYPE (25)
/**
 * Identifier for sub-type of packet: HkDiagRep (Periodic Diagnostic Report
 * (3,26))
 */
#define HKDIAGREP_STYPE (26)
/**
 * Identifier for sub-type of packet: HkOneShotHkCmd (Command (3,27) to
 * generate a one-shot housekeeping report)
 */
#define HKONESHOTHKCMD_STYPE (27)
/**
 * Identifier for sub-type of packet: HkOneShotDiagCmd (Command (3,28) to
 * generate a one-shot diagnostic report)
 */
#define HKONESHOTDIAGCMD_STYPE (28)
/**
 * Identifier for sub-type of packet: EvtRep1 (Informative event report)
 */
#define EVTREP1_STYPE (1)
/**
 * Identifier for sub-type of packet: EvtRep2 (Low severity event report)
 */
#define EVTREP2_STYPE (2)
/**
 * Identifier for sub-type of packet: EvtRep3 (Medium severity event report)
 */
#define EVTREP3_STYPE (3)
/**
 * Identifier for sub-type of packet: EvtRep4 (High severity event report )
 */
#define EVTREP4_STYPE (4)
/**
 * Identifier for sub-type of packet: EvtEnbId (Command to enable generation
 * of a list of event identifiers)
 */
#define EVTENBID_STYPE (5)
/**
 * Identifier for sub-type of packet: EvtDisIdCmd (Command to disable
 * generation of a list of event identifiers)
 */
#define EVTDISIDCMD_STYPE (6)
/**
 * Identifier for sub-type of packet: EvtRepDisIdCmd (This command triggers
 * the generation of a (5,8) report holding the list of disabled event
 * identifiers)
 */
#define EVTREPDISIDCMD_STYPE (7)
/**
 * Identifier for sub-type of packet: EvtDisIdRep (Report generated in
 * response to a (5,7) command carrying the list of disabled Event
 * Identifiers)
 */
#define EVTDISIDREP_STYPE (8)
/**
 * Identifier for sub-type of packet: ScdEnbTbsCmd (Command to enable the
 * time-based schedule execution function)
 */
#define SCDENBTBSCMD_STYPE (1)
/**
 * Identifier for sub-type of packet: ScdDisTbsCmd (Command to disable the
 * time-based schedule execution function)
 */
#define SCDDISTBSCMD_STYPE (2)
/**
 * Identifier for sub-type of packet: ScdResTbsCmd (Command to reset the
 * time-based schedule)
 */
#define SCDRESTBSCMD_STYPE (3)
/**
 * Identifier for sub-type of packet: ScdInsTbaCmd (Command to insert one or
 * more time-based activities (TBAs) into the time-based schedule (TBS))
 */
#define SCDINSTBACMD_STYPE (4)
/**
 * Identifier for sub-type of packet: ScdDelTbaCmd (Command to delete one or
 * more time-based activities (TBAs) from the time-based schedule (TBS))
 */
#define SCDDELTBACMD_STYPE (5)
/**
 * Identifier for sub-type of packet: ScdEnbSubSchedCmd (Command to enable one
 * or more time-based sub-schedules)
 */
#define SCDENBSUBSCHEDCMD_STYPE (20)
/**
 * Identifier for sub-type of packet: ScdDisSubSchedCmd (Command to disable
 * one or more time-based sub-schedules)
 */
#define SCDDISSUBSCHEDCMD_STYPE (21)
/**
 * Identifier for sub-type of packet: ScdCreGrpCmd (Command to create one or
 * more scheduling groups)
 */
#define SCDCREGRPCMD_STYPE (22)
/**
 * Identifier for sub-type of packet: ScdDelGrpCmd (Command to delete one or
 * more scheduling groups)
 */
#define SCDDELGRPCMD_STYPE (23)
/**
 * Identifier for sub-type of packet: ScdEnbGrpCmd (Command to enable one or
 * more scheduling groups)
 */
#define SCDENBGRPCMD_STYPE (24)
/**
 * Identifier for sub-type of packet: ScdDisGrpCmd (Command to disable one or
 * more scheduling groups)
 */
#define SCDDISGRPCMD_STYPE (25)
/**
 * Identifier for sub-type of packet: ScdRepGrpCmd (Command to trigger the
 * generation of a (11,27) report carrying the status of the scheduling
 * groups)
 */
#define SCDREPGRPCMD_STYPE (26)
/**
 * Identifier for sub-type of packet: ScdGrpRep (Report generated in response
 * to a (11,26) command to report the status of the scheduling groups)
 */
#define SCDGRPREP_STYPE (27)
/**
 * Identifier for sub-type of packet: MonEnbParMonDefCmd (Command to enable
 * one or more monitoring definitions)
 */
#define MONENBPARMONDEFCMD_STYPE (1)
/**
 * Identifier for sub-type of packet: MonDisParMonDefCmd (Command to disable
 * one or more monitoring definitions)
 */
#define MONDISPARMONDEFCMD_STYPE (2)
/**
 * Identifier for sub-type of packet: MonChgTransDelCmd (Command to change the
 * maximum delay after which the content of the check transition list (CTL) is
 * reported through a (12,12) report)
 */
#define MONCHGTRANSDELCMD_STYPE (3)
/**
 * Identifier for sub-type of packet: MonDelAllParMonCmd (Command to delete
 * all parameter monitoring definitions)
 */
#define MONDELALLPARMONCMD_STYPE (4)
/**
 * Identifier for sub-type of packet: MonAddParMonDefCmd (Command to add one
 * or more parameter definitions)
 */
#define MONADDPARMONDEFCMD_STYPE (5)
/**
 * Identifier for sub-type of packet: MonDelParMonDefCmd (Command to delete
 * one or more parameter monitoring definitions)
 */
#define MONDELPARMONDEFCMD_STYPE (6)
/**
 * Identifier for sub-type of packet: MonModParMonDefCmd (Command to modify
 * one or more parameter definitions)
 */
#define MONMODPARMONDEFCMD_STYPE (7)
/**
 * Identifier for sub-type of packet: MonRepParMonDefCmd (This command
 * triggers the generation of a (12,9) report carrying one or more parameter
 * monitor definitions)
 */
#define MONREPPARMONDEFCMD_STYPE (8)
/**
 * Identifier for sub-type of packet: MonRepParMonDefRep (Report generated in
 * response to a (12,8) command to report one or more monitoring definitions.)
 */
#define MONREPPARMONDEFREP_STYPE (9)
/**
 * Identifier for sub-type of packet: MonRepOutOfLimitsCmd (This command
 * triggers the generation of a (12,11) report holding the parameter monitors
 * which are out of limits)
 */
#define MONREPOUTOFLIMITSCMD_STYPE (10)
/**
 * Identifier for sub-type of packet: MonRepOutOfLimitsRep (Report generated
 * in response to a (12,10) command carrying the parameter monitors which are
 * out of limits)
 */
#define MONREPOUTOFLIMITSREP_STYPE (11)
/**
 * Identifier for sub-type of packet: MonCheckTransRep (Report carrying the
 * content of the Check Transition List (CTL).)
 */
#define MONCHECKTRANSREP_STYPE (12)
/**
 * Identifier for sub-type of packet: MonRepParMonStatCmd (This command
 * triggers the generation of a (12,14) report carrying the status of all
 * parameter monitors)
 */
#define MONREPPARMONSTATCMD_STYPE (13)
/**
 * Identifier for sub-type of packet: MonRepParMonStatRep (Report generated in
 * response to a (12,13) report carrying the status of all currently defined
 * parameter monitors)
 */
#define MONREPPARMONSTATREP_STYPE (14)
/**
 * Identifier for sub-type of packet: MonEnbParMonFuncCmd (Command to enable
 * the monitoring function)
 */
#define MONENBPARMONFUNCCMD_STYPE (15)
/**
 * Identifier for sub-type of packet: MonDisParMonFuncCmd (Command to disable
 * the parameter monitoring function)
 */
#define MONDISPARMONFUNCCMD_STYPE (16)
/**
 * Identifier for sub-type of packet: MonEnbFuncMonCmd (Command to enable the
 * functional monitoring function)
 */
#define MONENBFUNCMONCMD_STYPE (17)
/**
 * Identifier for sub-type of packet: MonDisFuncMonCmd (Command to disable the
 * functional monitoring function)
 */
#define MONDISFUNCMONCMD_STYPE (18)
/**
 * Identifier for sub-type of packet: MonEnbFuncMonDefCmd (Command to enable
 * one or more functional monitoring definitions)
 */
#define MONENBFUNCMONDEFCMD_STYPE (19)
/**
 * Identifier for sub-type of packet: MonDisFuncMonDefCmd (Command to disable
 * one ore more functional monitoring definitions)
 */
#define MONDISFUNCMONDEFCMD_STYPE (20)
/**
 * Identifier for sub-type of packet: MonProtFuncMonDefCmd (Command to protect
 * one or more functional monitoring definitions)
 */
#define MONPROTFUNCMONDEFCMD_STYPE (21)
/**
 * Identifier for sub-type of packet: MonUnprotFuncMonDefCmd (Command to
 * unprotect one or more functional monitoring definitions)
 */
#define MONUNPROTFUNCMONDEFCMD_STYPE (22)
/**
 * Identifier for sub-type of packet: MonAddFuncMonDefCmd (Command to add one
 * or more functional monitoring definitions)
 */
#define MONADDFUNCMONDEFCMD_STYPE (23)
/**
 * Identifier for sub-type of packet: MonDelFuncMonDefCmd (Command to delete
 * one or more functional monitoring definitions to the FMDL)
 */
#define MONDELFUNCMONDEFCMD_STYPE (24)
/**
 * Identifier for sub-type of packet: MonRepFuncMonDefCmd (This command
 * triggers the generation of a (12,26) report carrying the definition of one
 * or more functional monitors)
 */
#define MONREPFUNCMONDEFCMD_STYPE (25)
/**
 * Identifier for sub-type of packet: MonRepFuncMonDefRep (Report generated in
 * response to a (12,25) command to carry the definition of some or all
 * functional monitoring definitions)
 */
#define MONREPFUNCMONDEFREP_STYPE (26)
/**
 * Identifier for sub-type of packet: MonRepFuncMonStatCmd (This command
 * triggers the generation of a (12,28) report carrying the status of all
 * functional monitors)
 */
#define MONREPFUNCMONSTATCMD_STYPE (27)
/**
 * Identifier for sub-type of packet: MonRepFuncMonStatRep (Report generated
 * in response to a (12,27) command carrying the status of all currently
 * defined functional monitors)
 */
#define MONREPFUNCMONSTATREP_STYPE (28)
/**
 * Identifier for sub-type of packet: LptDownFirstRep (Report carrying the
 * first part of a down-transfer)
 */
#define LPTDOWNFIRSTREP_STYPE (1)
/**
 * Identifier for sub-type of packet: LptDownInterRep (Report carrying an
 * intermediate part of a down-transfer)
 */
#define LPTDOWNINTERREP_STYPE (2)
/**
 * Identifier for sub-type of packet: LptDownLastRep (Report carrying the last
 * part of a down-transfer)
 */
#define LPTDOWNLASTREP_STYPE (3)
/**
 * Identifier for sub-type of packet: LptUpFirstCmd (Command to carry the
 * first part of an up-transfer)
 */
#define LPTUPFIRSTCMD_STYPE (9)
/**
 * Identifier for sub-type of packet: LptUpInterCmd (Command to carry an
 * intermediate part of an up-transfer)
 */
#define LPTUPINTERCMD_STYPE (10)
/**
 * Identifier for sub-type of packet: LptUpLastCmd (Command to carry the last
 * part of an up-transfer)
 */
#define LPTUPLASTCMD_STYPE (11)
/**
 * Identifier for sub-type of packet: LptUpAbortRep (Report to notify the
 * abortion of an up-transfer)
 */
#define LPTUPABORTREP_STYPE (16)
/**
 * Identifier for sub-type of packet: LptStartDownCmd (Command to start a
 * down-transfer)
 */
#define LPTSTARTDOWNCMD_STYPE (129)
/**
 * Identifier for sub-type of packet: LptAbortDownCmd (Command to abort a
 * down-transfer)
 */
#define LPTABORTDOWNCMD_STYPE (130)
/**
 * Identifier for sub-type of packet: TstAreYouAliveCmd (Command to perform
 * and Are-You-Alive Connection Test)
 */
#define TSTAREYOUALIVECMD_STYPE (1)
/**
 * Identifier for sub-type of packet: TstAreYouAliveRep (Report generated in
 * response to a (17,1) command requesting an Are-You-Alive Connection Test)
 */
#define TSTAREYOUALIVEREP_STYPE (2)
/**
 * Identifier for sub-type of packet: TstConnectCmd (Command to perform and
 * On-Board Connection Test. )
 */
#define TSTCONNECTCMD_STYPE (3)
/**
 * Identifier for sub-type of packet: TstConnectRep (Report generated in
 * response to a (17,3) command requesting a On-Board Connection Test)
 */
#define TSTCONNECTREP_STYPE (4)

/*----------------------------------------------------------------------------*/
#endif /* CRPSSERVTYPEID_H */
