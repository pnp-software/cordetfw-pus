/**
 * @file
 * @ingroup gen_pck
 *
 * Definition of type and sub-type identifiers.
 *
 * @note This file was generated on 2018-10-28 17:05:47
 * @author Automatically Generated by CORDET Editor
 * @copyright P&P Software GmbH
 */
#ifndef CRPSSERVTYPEID_H_
#define CRPSSERVTYPEID_H_

/**
 * Identifier for service: Ver (Request Verification Service)
 */
#define VER_TYPE (1)
/**
 * Identifier for service: Hk (Housekeeping Service)
 */
#define HK_TYPE (3)
/**
 * Identifier for service: Evt (Event Reporting Service)
 */
#define EVT_TYPE (5)
/**
 * Identifier for service: Scd (Time Based Scheduling Service)
 */
#define SCD_TYPE (11)
/**
 * Identifier for service: Mon (On Board Monitoring Service)
 */
#define MON_TYPE (12)
/**
 * Identifier for service: Lpt (Large Packet Transfer Service)
 */
#define LPT_TYPE (13)
/**
 * Identifier for service: Tst (Test Service)
 */
#define TST_TYPE (17)
/**
 * Identifier for service: Dum (Dummy Service)
 */
#define DUM_TYPE (255)
/**
 * Identifier for sub-type of packet: SuccAccRep in domain Ver (Report
 * generated to mark the successful acceptance of an incoming command)
 */
#define VERSUCCACCREP_STYPE (1)
/**
 * Identifier for sub-type of packet: FailedAccRep in domain Ver (Report
 * generated to mark the acceptance failure of an incoming command)
 */
#define VERFAILEDACCREP_STYPE (2)
/**
 * Identifier for sub-type of packet: SuccStartRep in domain Ver (Report
 * generated to mark the successful start of execution of an incoming command)
 */
#define VERSUCCSTARTREP_STYPE (3)
/**
 * Identifier for sub-type of packet: FailedStartRep in domain Ver (Report
 * generated to mark the start of execution failure of an incoming command)
 */
#define VERFAILEDSTARTREP_STYPE (4)
/**
 * Identifier for sub-type of packet: SuccPrgrRep in domain Ver (Report
 * generated to mark the successful completion of an execution step of an
 * incoming command)
 */
#define VERSUCCPRGRREP_STYPE (5)
/**
 * Identifier for sub-type of packet: FailedPrgrRep in domain Ver (Report
 * generated to mark the failure of an execution step of an incoming command)
 */
#define VERFAILEDPRGRREP_STYPE (6)
/**
 * Identifier for sub-type of packet: SuccTermRep in domain Ver (Report
 * generated to mark the successful completion of execution of an incoming
 * command)
 */
#define VERSUCCTERMREP_STYPE (7)
/**
 * Identifier for sub-type of packet: FailedTermRep in domain Ver (Report
 * generated to mark the failure to complete execution of an incoming command)
 */
#define VERFAILEDTERMREP_STYPE (8)
/**
 * Identifier for sub-type of packet: FailedRoutingRep in domain Ver (Report
 * generated to mark the failure to route an incoming command to its final
 * destination)
 */
#define VERFAILEDROUTINGREP_STYPE (10)
/**
 * Identifier for sub-type of packet: CreHkCmd in domain Hk (Create a
 * housekeeping report structure)
 */
#define HKCREHKCMD_STYPE (1)
/**
 * Identifier for sub-type of packet: CreDiagCmd in domain Hk (Create a
 * diagnostic report structure)
 */
#define HKCREDIAGCMD_STYPE (2)
/**
 * Identifier for sub-type of packet: DelHkCmd in domain Hk (Delete one or
 * more housekeeping report definitions)
 */
#define HKDELHKCMD_STYPE (3)
/**
 * Identifier for sub-type of packet: DelDiagCmd in domain Hk (Delete one or
 * more diagnostic report definitions)
 */
#define HKDELDIAGCMD_STYPE (4)
/**
 * Identifier for sub-type of packet: EnbHkCmd in domain Hk (Enable the
 * periodic generation of one or more housekeeping report structures)
 */
#define HKENBHKCMD_STYPE (5)
/**
 * Identifier for sub-type of packet: DisHkCmd in domain Hk (Disable the
 * periodic generation of one or more housekeeping report structures)
 */
#define HKDISHKCMD_STYPE (6)
/**
 * Identifier for sub-type of packet: EnbDiagCmd in domain Hk (Enable the
 * periodic generation of one or more diagnostic report structures)
 */
#define HKENBDIAGCMD_STYPE (7)
/**
 * Identifier for sub-type of packet: DisDiagCmd in domain Hk (Disable the
 * periodic generation of one or more diagnostic report structures)
 */
#define HKDISDIAGCMD_STYPE (8)
/**
 * Identifier for sub-type of packet: RepStructHkCmd in domain Hk (This
 * command carries a list of SIDs. For each SID, it triggers the generation of
 * a (3,10) report with the definition of the housekeeping report structure
 * for that SID.)
 */
#define HKREPSTRUCTHKCMD_STYPE (9)
/**
 * Identifier for sub-type of packet: RepStructHkRep in domain Hk (Report
 * carrying the definition of a housekeeping report structure generated in
 * response to a (3,9) command.)
 */
#define HKREPSTRUCTHKREP_STYPE (10)
/**
 * Identifier for sub-type of packet: RepStructDiagCmd in domain Hk (This
 * command carries a list of SIDs. For each SID, it triggers the generation of
 * a (3,12) report with the definition of the diagnostic report structure for
 * that SID.)
 */
#define HKREPSTRUCTDIAGCMD_STYPE (11)
/**
 * Identifier for sub-type of packet: RepStructDiagRep in domain Hk (Report
 * carrying the definition of a diagnostic report structure generated in
 * response to a (3,11) command.)
 */
#define HKREPSTRUCTDIAGREP_STYPE (12)
/**
 * Identifier for sub-type of packet: Rep in domain Hk (Periodic housekeeping
 * report)
 */
#define HKREP_STYPE (25)
/**
 * Identifier for sub-type of packet: DiagRep in domain Hk (Periodic
 * Diagnostic Report (3,26))
 */
#define HKDIAGREP_STYPE (26)
/**
 * Identifier for sub-type of packet: OneShotHkCmd in domain Hk (Command
 * (3,27) to generate a one-shot housekeeping report)
 */
#define HKONESHOTHKCMD_STYPE (27)
/**
 * Identifier for sub-type of packet: OneShotDiagCmd in domain Hk (Command
 * (3,28) to generate a one-shot diagnostic report)
 */
#define HKONESHOTDIAGCMD_STYPE (28)
/**
 * Identifier for sub-type of packet: Rep1 in domain Evt (Informative event
 * report)
 */
#define EVTREP1_STYPE (1)
/**
 * Identifier for sub-type of packet: Rep2 in domain Evt (Low severity event
 * report)
 */
#define EVTREP2_STYPE (2)
/**
 * Identifier for sub-type of packet: Rep3 in domain Evt (Medium severity
 * event report)
 */
#define EVTREP3_STYPE (3)
/**
 * Identifier for sub-type of packet: Rep4 in domain Evt (High severity event
 * report )
 */
#define EVTREP4_STYPE (4)
/**
 * Identifier for sub-type of packet: EnbCmd in domain Evt (Command to enable
 * generation of a list of event identifiers)
 */
#define EVTENBCMD_STYPE (5)
/**
 * Identifier for sub-type of packet: DisCmd in domain Evt (Command to disable
 * generation of a list of event identifiers)
 */
#define EVTDISCMD_STYPE (6)
/**
 * Identifier for sub-type of packet: RepDisCmd in domain Evt (This command
 * triggers the generation of a (5,8) report holding the list of disabled
 * event identifiers)
 */
#define EVTREPDISCMD_STYPE (7)
/**
 * Identifier for sub-type of packet: DisRep in domain Evt (Report generated
 * in response to a (5,7) command carrying the list of disabled Event
 * Identifiers)
 */
#define EVTDISREP_STYPE (8)
/**
 * Identifier for sub-type of packet: EnbTbsCmd in domain Scd (Command to
 * enable the time-based schedule execution function)
 */
#define SCDENBTBSCMD_STYPE (1)
/**
 * Identifier for sub-type of packet: DisTbsCmd in domain Scd (Command to
 * disable the time-based schedule execution function)
 */
#define SCDDISTBSCMD_STYPE (2)
/**
 * Identifier for sub-type of packet: ResTbsCmd in domain Scd (Command to
 * reset the time-based schedule)
 */
#define SCDRESTBSCMD_STYPE (3)
/**
 * Identifier for sub-type of packet: InsTbaCmd in domain Scd (Command to
 * insert one or more time-based activities (TBAs) into the time-based
 * schedule (TBS))
 */
#define SCDINSTBACMD_STYPE (4)
/**
 * Identifier for sub-type of packet: DelTbaCmd in domain Scd (Command to
 * delete one or more time-based activities (TBAs) from the time-based
 * schedule (TBS))
 */
#define SCDDELTBACMD_STYPE (5)
/**
 * Identifier for sub-type of packet: EnbSubSchedCmd in domain Scd (Command to
 * enable one or more time-based sub-schedules)
 */
#define SCDENBSUBSCHEDCMD_STYPE (20)
/**
 * Identifier for sub-type of packet: DisSubSchedCmd in domain Scd (Command to
 * disable one or more time-based sub-schedules)
 */
#define SCDDISSUBSCHEDCMD_STYPE (21)
/**
 * Identifier for sub-type of packet: CreGrpCmd in domain Scd (Command to
 * create one or more scheduling groups)
 */
#define SCDCREGRPCMD_STYPE (22)
/**
 * Identifier for sub-type of packet: DelGrpCmd in domain Scd (Command to
 * delete one or more scheduling groups)
 */
#define SCDDELGRPCMD_STYPE (23)
/**
 * Identifier for sub-type of packet: EnbGrpCmd in domain Scd (Command to
 * enable one or more scheduling groups)
 */
#define SCDENBGRPCMD_STYPE (24)
/**
 * Identifier for sub-type of packet: DisGrpCmd in domain Scd (Command to
 * disable one or more scheduling groups)
 */
#define SCDDISGRPCMD_STYPE (25)
/**
 * Identifier for sub-type of packet: RepGrpCmd in domain Scd (Command to
 * trigger the generation of a (11,27) report carrying the status of the
 * scheduling groups)
 */
#define SCDREPGRPCMD_STYPE (26)
/**
 * Identifier for sub-type of packet: GrpRep in domain Scd (Report generated
 * in response to a (11,26) command to report the status of the scheduling
 * groups)
 */
#define SCDGRPREP_STYPE (27)
/**
 * Identifier for sub-type of packet: EnbParMonDefCmd in domain Mon (Command
 * to enable one or more monitoring definitions)
 */
#define MONENBPARMONDEFCMD_STYPE (1)
/**
 * Identifier for sub-type of packet: DisParMonDefCmd in domain Mon (Command
 * to disable one or more monitoring definitions)
 */
#define MONDISPARMONDEFCMD_STYPE (2)
/**
 * Identifier for sub-type of packet: ChgTransDelCmd in domain Mon (Command to
 * change the maximum delay after which the content of the check transition
 * list (CTL) is reported through a (12,12) report)
 */
#define MONCHGTRANSDELCMD_STYPE (3)
/**
 * Identifier for sub-type of packet: DelAllParMonCmd in domain Mon (Command
 * to delete all parameter monitoring definitions)
 */
#define MONDELALLPARMONCMD_STYPE (4)
/**
 * Identifier for sub-type of packet: AddParMonDefCmd in domain Mon (Command
 * to add one or more parameter definitions)
 */
#define MONADDPARMONDEFCMD_STYPE (5)
/**
 * Identifier for sub-type of packet: DelParMonDefCmd in domain Mon (Command
 * to delete one or more parameter monitoring definitions)
 */
#define MONDELPARMONDEFCMD_STYPE (6)
/**
 * Identifier for sub-type of packet: ModParMonDefCmd in domain Mon (Command
 * to modify one or more parameter definitions)
 */
#define MONMODPARMONDEFCMD_STYPE (7)
/**
 * Identifier for sub-type of packet: RepParMonDefCmd in domain Mon (This
 * command triggers the generation of a (12,9) report carrying one or more
 * parameter monitor definitions)
 */
#define MONREPPARMONDEFCMD_STYPE (8)
/**
 * Identifier for sub-type of packet: RepParMonDefRep in domain Mon (Report
 * generated in response to a (12,8) command to report one or more monitoring
 * definitions.)
 */
#define MONREPPARMONDEFREP_STYPE (9)
/**
 * Identifier for sub-type of packet: RepOutOfLimitsCmd in domain Mon (This
 * command triggers the generation of a (12,11) report holding the parameter
 * monitors which are out of limits)
 */
#define MONREPOUTOFLIMITSCMD_STYPE (10)
/**
 * Identifier for sub-type of packet: RepOutOfLimitsRep in domain Mon (Report
 * generated in response to a (12,10) command carrying the parameter monitors
 * which are out of limits)
 */
#define MONREPOUTOFLIMITSREP_STYPE (11)
/**
 * Identifier for sub-type of packet: CheckTransRep in domain Mon (Report
 * carrying the content of the Check Transition List (CTL).)
 */
#define MONCHECKTRANSREP_STYPE (12)
/**
 * Identifier for sub-type of packet: RepParMonStatCmd in domain Mon (This
 * command triggers the generation of a (12,14) report carrying the status of
 * all parameter monitors)
 */
#define MONREPPARMONSTATCMD_STYPE (13)
/**
 * Identifier for sub-type of packet: RepParMonStatRep in domain Mon (Report
 * generated in response to a (12,13) report carrying the status of all
 * currently defined parameter monitors)
 */
#define MONREPPARMONSTATREP_STYPE (14)
/**
 * Identifier for sub-type of packet: EnbParMonFuncCmd in domain Mon (Command
 * to enable the monitoring function)
 */
#define MONENBPARMONFUNCCMD_STYPE (15)
/**
 * Identifier for sub-type of packet: DisParMonFuncCmd in domain Mon (Command
 * to disable the parameter monitoring function)
 */
#define MONDISPARMONFUNCCMD_STYPE (16)
/**
 * Identifier for sub-type of packet: EnbFuncMonCmd in domain Mon (Command to
 * enable the functional monitoring function)
 */
#define MONENBFUNCMONCMD_STYPE (17)
/**
 * Identifier for sub-type of packet: DisFuncMonCmd in domain Mon (Command to
 * disable the functional monitoring function)
 */
#define MONDISFUNCMONCMD_STYPE (18)
/**
 * Identifier for sub-type of packet: EnbFuncMonDefCmd in domain Mon (Command
 * to enable one or more functional monitoring definitions)
 */
#define MONENBFUNCMONDEFCMD_STYPE (19)
/**
 * Identifier for sub-type of packet: DisFuncMonDefCmd in domain Mon (Command
 * to disable one ore more functional monitoring definitions)
 */
#define MONDISFUNCMONDEFCMD_STYPE (20)
/**
 * Identifier for sub-type of packet: ProtFuncMonDefCmd in domain Mon (Command
 * to protect one or more functional monitoring definitions)
 */
#define MONPROTFUNCMONDEFCMD_STYPE (21)
/**
 * Identifier for sub-type of packet: UnprotFuncMonDefCmd in domain Mon
 * (Command to unprotect one or more functional monitoring definitions)
 */
#define MONUNPROTFUNCMONDEFCMD_STYPE (22)
/**
 * Identifier for sub-type of packet: AddFuncMonDefCmd in domain Mon (Command
 * to add one or more functional monitoring definitions)
 */
#define MONADDFUNCMONDEFCMD_STYPE (23)
/**
 * Identifier for sub-type of packet: DelFuncMonDefCmd in domain Mon (Command
 * to delete one or more functional monitoring definitions to the FMDL)
 */
#define MONDELFUNCMONDEFCMD_STYPE (24)
/**
 * Identifier for sub-type of packet: RepFuncMonDefCmd in domain Mon (This
 * command triggers the generation of a (12,26) report carrying the definition
 * of one or more functional monitors)
 */
#define MONREPFUNCMONDEFCMD_STYPE (25)
/**
 * Identifier for sub-type of packet: RepFuncMonDefRep in domain Mon (Report
 * generated in response to a (12,25) command to carry the definition of some
 * or all functional monitoring definitions)
 */
#define MONREPFUNCMONDEFREP_STYPE (26)
/**
 * Identifier for sub-type of packet: RepFuncMonStatCmd in domain Mon (This
 * command triggers the generation of a (12,28) report carrying the status of
 * all functional monitors)
 */
#define MONREPFUNCMONSTATCMD_STYPE (27)
/**
 * Identifier for sub-type of packet: RepFuncMonStatRep in domain Mon (Report
 * generated in response to a (12,27) command carrying the status of all
 * currently defined functional monitors)
 */
#define MONREPFUNCMONSTATREP_STYPE (28)
/**
 * Identifier for sub-type of packet: DownFirstRep in domain Lpt (Report
 * carrying the first part of a down-transfer)
 */
#define LPTDOWNFIRSTREP_STYPE (1)
/**
 * Identifier for sub-type of packet: DownInterRep in domain Lpt (Report
 * carrying an intermediate part of a down-transfer)
 */
#define LPTDOWNINTERREP_STYPE (2)
/**
 * Identifier for sub-type of packet: DownLastRep in domain Lpt (Report
 * carrying the last part of a down-transfer)
 */
#define LPTDOWNLASTREP_STYPE (3)
/**
 * Identifier for sub-type of packet: UpFirstCmd in domain Lpt (Command to
 * carry the first part of an up-transfer)
 */
#define LPTUPFIRSTCMD_STYPE (9)
/**
 * Identifier for sub-type of packet: UpInterCmd in domain Lpt (Command to
 * carry an intermediate part of an up-transfer)
 */
#define LPTUPINTERCMD_STYPE (10)
/**
 * Identifier for sub-type of packet: UpLastCmd in domain Lpt (Command to
 * carry the last part of an up-transfer)
 */
#define LPTUPLASTCMD_STYPE (11)
/**
 * Identifier for sub-type of packet: UpAbortRep in domain Lpt (Report to
 * notify the abortion of an up-transfer)
 */
#define LPTUPABORTREP_STYPE (16)
/**
 * Identifier for sub-type of packet: StartDownCmd in domain Lpt (Command to
 * start a down-transfer)
 */
#define LPTSTARTDOWNCMD_STYPE (129)
/**
 * Identifier for sub-type of packet: AbortDownCmd in domain Lpt (Command to
 * abort a down-transfer)
 */
#define LPTABORTDOWNCMD_STYPE (130)
/**
 * Identifier for sub-type of packet: AreYouAliveCmd in domain Tst (Command to
 * perform and Are-You-Alive Connection Test)
 */
#define TSTAREYOUALIVECMD_STYPE (1)
/**
 * Identifier for sub-type of packet: AreYouAliveRep in domain Tst (Report
 * generated in response to a (17,1) command requesting an Are-You-Alive
 * Connection Test)
 */
#define TSTAREYOUALIVEREP_STYPE (2)
/**
 * Identifier for sub-type of packet: ConnectCmd in domain Tst (Command to
 * perform and On-Board Connection Test. )
 */
#define TSTCONNECTCMD_STYPE (3)
/**
 * Identifier for sub-type of packet: ConnectRep in domain Tst (Report
 * generated in response to a (17,3) command requesting a On-Board Connection
 * Test)
 */
#define TSTCONNECTREP_STYPE (4)
/**
 * Identifier for sub-type of packet: Sample1 in domain Dum (Sample command
 * used for testing purposes. The outcome of all its actions and checks can be
 * set by setting user-commandable flags. Its actions increment the value of
 * user-observable counters. )
 */
#define DUMSAMPLE1_STYPE (1)

/*----------------------------------------------------------------------------*/
#endif /* CRPSSERVTYPEID_H */
